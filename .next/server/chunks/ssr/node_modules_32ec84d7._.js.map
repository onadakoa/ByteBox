{"version":3,"sources":["turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/querystring.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/format-url.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/router-reducer-types.ts","turbopack:///[project]/node_modules/next/src/shared/lib/utils.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/parse-path.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/add-path-prefix.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/remove-trailing-slash.ts","turbopack:///[project]/node_modules/next/src/client/normalize-trailing-slash.ts","turbopack:///[project]/node_modules/next/src/client/add-base-path.ts","turbopack:///[project]/node_modules/next/src/client/components/app-router-headers.ts","turbopack:///[project]/node_modules/next/src/shared/lib/is-thenable.ts","turbopack:///[project]/node_modules/next/src/client/components/use-action-queue.ts","turbopack:///[project]/node_modules/next/src/client/app-call-server.ts","turbopack:///[project]/node_modules/next/src/client/app-find-source-map-url.ts","turbopack:///[project]/node_modules/next/src/client/flight-data-helpers.ts","turbopack:///[project]/node_modules/next/src/client/app-build-id.ts","turbopack:///[project]/node_modules/next/src/shared/lib/hash.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/set-cache-busting-search-param.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/fetch-server-response.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/create-router-cache-key.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/invalidate-cache-below-flight-segmentpath.ts","turbopack:///[project]/node_modules/next/src/client/components/match-segments.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/fill-lazy-items-till-leaf-with-head.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/invalidate-cache-by-router-state.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/fill-cache-with-new-subtree-data.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/apply-flight-data.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/refetch-inactive-parallel-segments.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/apply-router-state-patch-to-tree.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/should-hard-navigate.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/is-navigating-to-new-root-layout.ts","turbopack:///[project]/node_modules/next/src/shared/lib/page-path/ensure-leading-slash.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/app-paths.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/interception-routes.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/compute-changed-path.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/handle-mutable.ts","turbopack:///[project]/node_modules/@swc/helpers/cjs/_class_private_field_loose_base.cjs","turbopack:///[project]/node_modules/@swc/helpers/cjs/_class_private_field_loose_key.cjs","turbopack:///[project]/node_modules/next/src/client/components/promise-queue.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/prefetch-cache-utils.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/reducers/prefetch-reducer.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/html-bots.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/is-bot.ts","turbopack:///[project]/node_modules/next/src/client/components/app-router-announcer.tsx","turbopack:///[project]/node_modules/next/src/client/components/redirect-boundary.tsx","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/reducers/find-head-in-cache.ts","turbopack:///[project]/node_modules/next/src/client/components/unresolved-thenable.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/path-has-prefix.ts","turbopack:///[project]/node_modules/next/src/client/has-base-path.ts","turbopack:///[project]/node_modules/next/src/client/remove-base-path.ts","turbopack:///[project]/node_modules/next/src/client/components/app-router.tsx","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/ppr-navigations.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/clear-cache-node-data-for-segment-path.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/aliased-prefetch-navigations.ts","turbopack:///[project]/node_modules/next/src/client/components/segment-cache.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/reducers/navigate-reducer.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/reducers/server-patch-reducer.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/reducers/restore-reducer.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/handle-segment-mismatch.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/reducers/has-interception-route-in-current-tree.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/reducers/refresh-reducer.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/reducers/hmr-refresh-reducer.ts","turbopack:///[project]/node_modules/next/src/client/assign-location.ts","turbopack:///[project]/node_modules/next/src/shared/lib/server-reference-info.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/reducers/server-action-reducer.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/router-reducer.ts","turbopack:///[project]/node_modules/next/src/client/components/app-router-instance.ts","turbopack:///[project]/node_modules/next/src/client/components/links.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/is-local-url.ts","turbopack:///[project]/node_modules/next/src/shared/lib/utils/error-once.ts","turbopack:///[project]/node_modules/next/src/client/app-dir/link.tsx"],"sourcesContent":["import type { ParsedUrlQuery } from 'querystring'\n\nexport function searchParamsToUrlQuery(\n  searchParams: URLSearchParams\n): ParsedUrlQuery {\n  const query: ParsedUrlQuery = {}\n  for (const [key, value] of searchParams.entries()) {\n    const existing = query[key]\n    if (typeof existing === 'undefined') {\n      query[key] = value\n    } else if (Array.isArray(existing)) {\n      existing.push(value)\n    } else {\n      query[key] = [existing, value]\n    }\n  }\n  return query\n}\n\nfunction stringifyUrlQueryParam(param: unknown): string {\n  if (typeof param === 'string') {\n    return param\n  }\n\n  if (\n    (typeof param === 'number' && !isNaN(param)) ||\n    typeof param === 'boolean'\n  ) {\n    return String(param)\n  } else {\n    return ''\n  }\n}\n\nexport function urlQueryToSearchParams(query: ParsedUrlQuery): URLSearchParams {\n  const searchParams = new URLSearchParams()\n  for (const [key, value] of Object.entries(query)) {\n    if (Array.isArray(value)) {\n      for (const item of value) {\n        searchParams.append(key, stringifyUrlQueryParam(item))\n      }\n    } else {\n      searchParams.set(key, stringifyUrlQueryParam(value))\n    }\n  }\n  return searchParams\n}\n\nexport function assign(\n  target: URLSearchParams,\n  ...searchParamsList: URLSearchParams[]\n): URLSearchParams {\n  for (const searchParams of searchParamsList) {\n    for (const key of searchParams.keys()) {\n      target.delete(key)\n    }\n\n    for (const [key, value] of searchParams.entries()) {\n      target.append(key, value)\n    }\n  }\n\n  return target\n}\n","// Format function modified from nodejs\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nimport type { UrlObject } from 'url'\nimport type { ParsedUrlQuery } from 'querystring'\nimport * as querystring from './querystring'\n\nconst slashedProtocols = /https?|ftp|gopher|file/\n\nexport function formatUrl(urlObj: UrlObject) {\n  let { auth, hostname } = urlObj\n  let protocol = urlObj.protocol || ''\n  let pathname = urlObj.pathname || ''\n  let hash = urlObj.hash || ''\n  let query = urlObj.query || ''\n  let host: string | false = false\n\n  auth = auth ? encodeURIComponent(auth).replace(/%3A/i, ':') + '@' : ''\n\n  if (urlObj.host) {\n    host = auth + urlObj.host\n  } else if (hostname) {\n    host = auth + (~hostname.indexOf(':') ? `[${hostname}]` : hostname)\n    if (urlObj.port) {\n      host += ':' + urlObj.port\n    }\n  }\n\n  if (query && typeof query === 'object') {\n    query = String(querystring.urlQueryToSearchParams(query as ParsedUrlQuery))\n  }\n\n  let search = urlObj.search || (query && `?${query}`) || ''\n\n  if (protocol && !protocol.endsWith(':')) protocol += ':'\n\n  if (\n    urlObj.slashes ||\n    ((!protocol || slashedProtocols.test(protocol)) && host !== false)\n  ) {\n    host = '//' + (host || '')\n    if (pathname && pathname[0] !== '/') pathname = '/' + pathname\n  } else if (!host) {\n    host = ''\n  }\n\n  if (hash && hash[0] !== '#') hash = '#' + hash\n  if (search && search[0] !== '?') search = '?' + search\n\n  pathname = pathname.replace(/[?#]/g, encodeURIComponent)\n  search = search.replace('#', '%23')\n\n  return `${protocol}${host}${pathname}${search}${hash}`\n}\n\nexport const urlObjectKeys = [\n  'auth',\n  'hash',\n  'host',\n  'hostname',\n  'href',\n  'path',\n  'pathname',\n  'port',\n  'protocol',\n  'query',\n  'search',\n  'slashes',\n]\n\nexport function formatWithValidation(url: UrlObject): string {\n  if (process.env.NODE_ENV === 'development') {\n    if (url !== null && typeof url === 'object') {\n      Object.keys(url).forEach((key) => {\n        if (!urlObjectKeys.includes(key)) {\n          console.warn(\n            `Unknown key passed via urlObject into url.format: ${key}`\n          )\n        }\n      })\n    }\n  }\n\n  return formatUrl(url)\n}\n","import type { CacheNode } from '../../../shared/lib/app-router-context.shared-runtime'\nimport type {\n  FlightRouterState,\n  FlightSegmentPath,\n} from '../../../server/app-render/types'\nimport type { FetchServerResponseResult } from './fetch-server-response'\n\nexport const ACTION_REFRESH = 'refresh'\nexport const ACTION_NAVIGATE = 'navigate'\nexport const ACTION_RESTORE = 'restore'\nexport const ACTION_SERVER_PATCH = 'server-patch'\nexport const ACTION_PREFETCH = 'prefetch'\nexport const ACTION_HMR_REFRESH = 'hmr-refresh'\nexport const ACTION_SERVER_ACTION = 'server-action'\n\nexport type RouterChangeByServerResponse = ({\n  navigatedAt,\n  previousTree,\n  serverResponse,\n}: {\n  navigatedAt: number\n  previousTree: FlightRouterState\n  serverResponse: FetchServerResponseResult\n}) => void\n\nexport interface Mutable {\n  mpaNavigation?: boolean\n  patchedTree?: FlightRouterState\n  canonicalUrl?: string\n  scrollableSegments?: FlightSegmentPath[]\n  pendingPush?: boolean\n  cache?: CacheNode\n  prefetchCache?: AppRouterState['prefetchCache']\n  hashFragment?: string\n  shouldScroll?: boolean\n  preserveCustomHistoryState?: boolean\n  onlyHashChange?: boolean\n}\n\nexport interface ServerActionMutable extends Mutable {\n  inFlightServerAction?: Promise<any> | null\n}\n\n/**\n * Refresh triggers a refresh of the full page data.\n * - fetches the Flight data and fills rsc at the root of the cache.\n * - The router state is updated at the root.\n */\nexport interface RefreshAction {\n  type: typeof ACTION_REFRESH\n  origin: Location['origin']\n}\n\nexport interface HmrRefreshAction {\n  type: typeof ACTION_HMR_REFRESH\n  origin: Location['origin']\n}\n\nexport type ServerActionDispatcher = (\n  args: Omit<\n    ServerActionAction,\n    'type' | 'mutable' | 'navigate' | 'changeByServerResponse' | 'cache'\n  >\n) => void\n\nexport interface ServerActionAction {\n  type: typeof ACTION_SERVER_ACTION\n  actionId: string\n  actionArgs: any[]\n  resolve: (value: any) => void\n  reject: (reason?: any) => void\n}\n\n/**\n * Navigate triggers a navigation to the provided url. It supports two types: `push` and `replace`.\n *\n * `navigateType`:\n * - `push` - pushes a new history entry in the browser history\n * - `replace` - replaces the current history entry in the browser history\n *\n * Navigate has multiple cache heuristics:\n * - page was prefetched\n *  - Apply router state tree from prefetch\n *  - Apply Flight data from prefetch to the cache\n *  - If Flight data is a string, it's a redirect and the state is updated to trigger a redirect\n *  - Check if hard navigation is needed\n *    - Hard navigation happens when a dynamic parameter below the common layout changed\n *    - When hard navigation is needed the cache is invalidated below the flightSegmentPath\n *    - The missing cache nodes of the page will be fetched in layout-router and trigger the SERVER_PATCH action\n *  - If hard navigation is not needed\n *    - The cache is reused\n *    - If any cache nodes are missing they'll be fetched in layout-router and trigger the SERVER_PATCH action\n * - page was not prefetched\n *  - The navigate was called from `next/router` (`router.push()` / `router.replace()`) / `next/link` without prefetched data available (e.g. the prefetch didn't come back from the server before clicking the link)\n *    - Flight data is fetched in the reducer (suspends the reducer)\n *    - Router state tree is created based on Flight data\n *    - Cache is filled based on the Flight data\n *\n * Above steps explain 3 cases:\n * - `soft` - Reuses the existing cache and fetches missing nodes in layout-router.\n * - `hard` - Creates a new cache where cache nodes are removed below the common layout and fetches missing nodes in layout-router.\n * - `optimistic` (explicit no prefetch) - Creates a new cache and kicks off the data fetch in the reducer. The data fetch is awaited in the layout-router.\n */\nexport interface NavigateAction {\n  type: typeof ACTION_NAVIGATE\n  url: URL\n  isExternalUrl: boolean\n  locationSearch: Location['search']\n  navigateType: 'push' | 'replace'\n  shouldScroll: boolean\n  allowAliasing: boolean\n}\n\n/**\n * Restore applies the provided router state.\n * - Used for `popstate` (back/forward navigation) where a known router state has to be applied.\n * - Also used when syncing the router state with `pushState`/`replaceState` calls.\n * - Router state is applied as-is from the history state, if available.\n * - If the history state does not contain the router state, the existing router state is used.\n * - If any cache node is missing it will be fetched in layout-router during rendering and the server-patch case.\n * - If existing cache nodes match these are used.\n */\nexport interface RestoreAction {\n  type: typeof ACTION_RESTORE\n  url: URL\n  tree: FlightRouterState | undefined\n}\n\n/**\n * Server-patch applies the provided Flight data to the cache and router tree.\n * - Only triggered in layout-router.\n * - Creates a new cache and router state with the Flight data applied.\n */\nexport interface ServerPatchAction {\n  type: typeof ACTION_SERVER_PATCH\n  navigatedAt: number\n  serverResponse: FetchServerResponseResult\n  previousTree: FlightRouterState\n}\n\n/**\n * PrefetchKind defines the type of prefetching that should be done.\n * - `auto` - if the page is dynamic, prefetch the page data partially, if static prefetch the page data fully.\n * - `full` - prefetch the page data fully.\n * - `temporary` - a temporary prefetch entry is added to the cache, this is used when prefetch={false} is used in next/link or when you push a route programmatically.\n */\n\nexport enum PrefetchKind {\n  AUTO = 'auto',\n  FULL = 'full',\n  TEMPORARY = 'temporary',\n}\n\n/**\n * Prefetch adds the provided FlightData to the prefetch cache\n * - Creates the router state tree based on the patch in FlightData\n * - Adds the FlightData to the prefetch cache\n * - In ACTION_NAVIGATE the prefetch cache is checked and the router state tree and FlightData are applied.\n */\nexport interface PrefetchAction {\n  type: typeof ACTION_PREFETCH\n  url: URL\n  kind: PrefetchKind\n}\n\nexport interface PushRef {\n  /**\n   * If the app-router should push a new history entry in app-router's useEffect()\n   */\n  pendingPush: boolean\n  /**\n   * Multi-page navigation through location.href.\n   */\n  mpaNavigation: boolean\n  /**\n   * Skip applying the router state to the browser history state.\n   */\n  preserveCustomHistoryState: boolean\n}\n\nexport type FocusAndScrollRef = {\n  /**\n   * If focus and scroll should be set in the layout-router's useEffect()\n   */\n  apply: boolean\n  /**\n   * The hash fragment that should be scrolled to.\n   */\n  hashFragment: string | null\n  /**\n   * The paths of the segments that should be focused.\n   */\n  segmentPaths: FlightSegmentPath[]\n  /**\n   * If only the URLs hash fragment changed\n   */\n  onlyHashChange: boolean\n}\n\nexport type PrefetchCacheEntry = {\n  treeAtTimeOfPrefetch: FlightRouterState\n  data: Promise<FetchServerResponseResult>\n  kind: PrefetchKind\n  prefetchTime: number\n  staleTime: number\n  lastUsedTime: number | null\n  key: string\n  status: PrefetchCacheEntryStatus\n  url: URL\n}\n\nexport enum PrefetchCacheEntryStatus {\n  fresh = 'fresh',\n  reusable = 'reusable',\n  expired = 'expired',\n  stale = 'stale',\n}\n\n/**\n * Handles keeping the state of app-router.\n */\nexport type AppRouterState = {\n  /**\n   * The router state, this is written into the history state in app-router using replaceState/pushState.\n   * - Has to be serializable as it is written into the history state.\n   * - Holds which segments and parallel routes are shown on the screen.\n   */\n  tree: FlightRouterState\n  /**\n   * The cache holds React nodes for every segment that is shown on screen as well as previously shown segments.\n   * It also holds in-progress data requests.\n   * Prefetched data is stored separately in `prefetchCache`, that is applied during ACTION_NAVIGATE.\n   */\n  cache: CacheNode\n  /**\n   * Cache that holds prefetched Flight responses keyed by url.\n   */\n  prefetchCache: Map<string, PrefetchCacheEntry>\n  /**\n   * Decides if the update should create a new history entry and if the navigation has to trigger a browser navigation.\n   */\n  pushRef: PushRef\n  /**\n   * Decides if the update should apply scroll and focus management.\n   */\n  focusAndScrollRef: FocusAndScrollRef\n  /**\n   * The canonical url that is pushed/replaced.\n   * - This is the url you see in the browser.\n   */\n  canonicalUrl: string\n  /**\n   * The underlying \"url\" representing the UI state, which is used for intercepting routes.\n   */\n  nextUrl: string | null\n}\n\nexport type ReadonlyReducerState = Readonly<AppRouterState>\nexport type ReducerState = Promise<AppRouterState> | AppRouterState\nexport type ReducerActions = Readonly<\n  | RefreshAction\n  | NavigateAction\n  | RestoreAction\n  | ServerPatchAction\n  | PrefetchAction\n  | HmrRefreshAction\n  | ServerActionAction\n>\n","import type { HtmlProps } from './html-context.shared-runtime'\nimport type { ComponentType, JSX } from 'react'\nimport type { DomainLocale } from '../../server/config'\nimport type { Env } from '@next/env'\nimport type { IncomingMessage, ServerResponse } from 'http'\nimport type { NextRouter } from './router/router'\nimport type { ParsedUrlQuery } from 'querystring'\nimport type { PreviewData } from '../../types'\nimport type { COMPILER_NAMES } from './constants'\nimport type fs from 'fs'\n\nexport type NextComponentType<\n  Context extends BaseContext = NextPageContext,\n  InitialProps = {},\n  Props = {},\n> = ComponentType<Props> & {\n  /**\n   * Used for initial page load data population. Data returned from `getInitialProps` is serialized when server rendered.\n   * Make sure to return plain `Object` without using `Date`, `Map`, `Set`.\n   * @param context Context of `page`\n   */\n  getInitialProps?(context: Context): InitialProps | Promise<InitialProps>\n}\n\nexport type DocumentType = NextComponentType<\n  DocumentContext,\n  DocumentInitialProps,\n  DocumentProps\n>\n\nexport type AppType<P = {}> = NextComponentType<\n  AppContextType,\n  P,\n  AppPropsType<any, P>\n>\n\nexport type AppTreeType = ComponentType<\n  AppInitialProps & { [name: string]: any }\n>\n\n/**\n * Web vitals provided to _app.reportWebVitals by Core Web Vitals plugin developed by Google Chrome team.\n * https://nextjs.org/blog/next-9-4#integrated-web-vitals-reporting\n */\nexport const WEB_VITALS = ['CLS', 'FCP', 'FID', 'INP', 'LCP', 'TTFB'] as const\nexport type NextWebVitalsMetric = {\n  id: string\n  startTime: number\n  value: number\n  attribution?: { [key: string]: unknown }\n} & (\n  | {\n      label: 'web-vital'\n      name: (typeof WEB_VITALS)[number]\n    }\n  | {\n      label: 'custom'\n      name:\n        | 'Next.js-hydration'\n        | 'Next.js-route-change-to-render'\n        | 'Next.js-render'\n    }\n)\n\nexport type Enhancer<C> = (Component: C) => C\n\nexport type ComponentsEnhancer =\n  | {\n      enhanceApp?: Enhancer<AppType>\n      enhanceComponent?: Enhancer<NextComponentType>\n    }\n  | Enhancer<NextComponentType>\n\nexport type RenderPageResult = {\n  html: string\n  head?: Array<JSX.Element | null>\n}\n\nexport type RenderPage = (\n  options?: ComponentsEnhancer\n) => DocumentInitialProps | Promise<DocumentInitialProps>\n\nexport type BaseContext = {\n  res?: ServerResponse\n  [k: string]: any\n}\n\nexport type NEXT_DATA = {\n  props: Record<string, any>\n  page: string\n  query: ParsedUrlQuery\n  buildId: string\n  assetPrefix?: string\n  runtimeConfig?: { [key: string]: any }\n  nextExport?: boolean\n  autoExport?: boolean\n  isFallback?: boolean\n  isExperimentalCompile?: boolean\n  dynamicIds?: (string | number)[]\n  err?: Error & {\n    statusCode?: number\n    source?: typeof COMPILER_NAMES.server | typeof COMPILER_NAMES.edgeServer\n  }\n  gsp?: boolean\n  gssp?: boolean\n  customServer?: boolean\n  gip?: boolean\n  appGip?: boolean\n  locale?: string\n  locales?: readonly string[]\n  defaultLocale?: string\n  domainLocales?: readonly DomainLocale[]\n  scriptLoader?: any[]\n  isPreview?: boolean\n  notFoundSrcPage?: string\n}\n\n/**\n * `Next` context\n */\nexport interface NextPageContext {\n  /**\n   * Error object if encountered during rendering\n   */\n  err?: (Error & { statusCode?: number }) | null\n  /**\n   * `HTTP` request object.\n   */\n  req?: IncomingMessage\n  /**\n   * `HTTP` response object.\n   */\n  res?: ServerResponse\n  /**\n   * Path section of `URL`.\n   */\n  pathname: string\n  /**\n   * Query string section of `URL` parsed as an object.\n   */\n  query: ParsedUrlQuery\n  /**\n   * `String` of the actual path including query.\n   */\n  asPath?: string\n  /**\n   * The currently active locale\n   */\n  locale?: string\n  /**\n   * All configured locales\n   */\n  locales?: readonly string[]\n  /**\n   * The configured default locale\n   */\n  defaultLocale?: string\n  /**\n   * `Component` the tree of the App to use if needing to render separately\n   */\n  AppTree: AppTreeType\n}\n\nexport type AppContextType<Router extends NextRouter = NextRouter> = {\n  Component: NextComponentType<NextPageContext>\n  AppTree: AppTreeType\n  ctx: NextPageContext\n  router: Router\n}\n\nexport type AppInitialProps<PageProps = any> = {\n  pageProps: PageProps\n}\n\nexport type AppPropsType<\n  Router extends NextRouter = NextRouter,\n  PageProps = {},\n> = AppInitialProps<PageProps> & {\n  Component: NextComponentType<NextPageContext, any, any>\n  router: Router\n  __N_SSG?: boolean\n  __N_SSP?: boolean\n}\n\nexport type DocumentContext = NextPageContext & {\n  renderPage: RenderPage\n  defaultGetInitialProps(\n    ctx: DocumentContext,\n    options?: { nonce?: string }\n  ): Promise<DocumentInitialProps>\n}\n\nexport type DocumentInitialProps = RenderPageResult & {\n  styles?: React.ReactElement[] | Iterable<React.ReactNode> | JSX.Element\n}\n\nexport type DocumentProps = DocumentInitialProps & HtmlProps\n\n/**\n * Next `API` route request\n */\nexport interface NextApiRequest extends IncomingMessage {\n  /**\n   * Object of `query` values from url\n   */\n  query: Partial<{\n    [key: string]: string | string[]\n  }>\n  /**\n   * Object of `cookies` from header\n   */\n  cookies: Partial<{\n    [key: string]: string\n  }>\n\n  body: any\n\n  env: Env\n\n  draftMode?: boolean\n\n  preview?: boolean\n  /**\n   * Preview data set on the request, if any\n   * */\n  previewData?: PreviewData\n}\n\n/**\n * Send body of response\n */\ntype Send<T> = (body: T) => void\n\n/**\n * Next `API` route response\n */\nexport type NextApiResponse<Data = any> = ServerResponse & {\n  /**\n   * Send data `any` data in response\n   */\n  send: Send<Data>\n  /**\n   * Send data `json` data in response\n   */\n  json: Send<Data>\n  status: (statusCode: number) => NextApiResponse<Data>\n  redirect(url: string): NextApiResponse<Data>\n  redirect(status: number, url: string): NextApiResponse<Data>\n\n  /**\n   * Set draft mode\n   */\n  setDraftMode: (options: { enable: boolean }) => NextApiResponse<Data>\n\n  /**\n   * Set preview data for Next.js' prerender mode\n   */\n  setPreviewData: (\n    data: object | string,\n    options?: {\n      /**\n       * Specifies the number (in seconds) for the preview session to last for.\n       * The given number will be converted to an integer by rounding down.\n       * By default, no maximum age is set and the preview session finishes\n       * when the client shuts down (browser is closed).\n       */\n      maxAge?: number\n      /**\n       * Specifies the path for the preview session to work under. By default,\n       * the path is considered the \"default path\", i.e., any pages under \"/\".\n       */\n      path?: string\n    }\n  ) => NextApiResponse<Data>\n\n  /**\n   * Clear preview data for Next.js' prerender mode\n   */\n  clearPreviewData: (options?: { path?: string }) => NextApiResponse<Data>\n\n  /**\n   * Revalidate a specific page and regenerate it using On-Demand Incremental\n   * Static Regeneration.\n   * The path should be an actual path, not a rewritten path. E.g. for\n   * \"/blog/[slug]\" this should be \"/blog/post-1\".\n   * @link https://nextjs.org/docs/app/building-your-application/data-fetching/incremental-static-regeneration#on-demand-revalidation-with-revalidatepath\n   */\n  revalidate: (\n    urlPath: string,\n    opts?: {\n      unstable_onlyGenerated?: boolean\n    }\n  ) => Promise<void>\n}\n\n/**\n * Next `API` route handler\n */\nexport type NextApiHandler<T = any> = (\n  req: NextApiRequest,\n  res: NextApiResponse<T>\n) => unknown | Promise<unknown>\n\n/**\n * Utils\n */\nexport function execOnce<T extends (...args: any[]) => ReturnType<T>>(\n  fn: T\n): T {\n  let used = false\n  let result: ReturnType<T>\n\n  return ((...args: any[]) => {\n    if (!used) {\n      used = true\n      result = fn(...args)\n    }\n    return result\n  }) as T\n}\n\n// Scheme: https://tools.ietf.org/html/rfc3986#section-3.1\n// Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3\nconst ABSOLUTE_URL_REGEX = /^[a-zA-Z][a-zA-Z\\d+\\-.]*?:/\nexport const isAbsoluteUrl = (url: string) => ABSOLUTE_URL_REGEX.test(url)\n\nexport function getLocationOrigin() {\n  const { protocol, hostname, port } = window.location\n  return `${protocol}//${hostname}${port ? ':' + port : ''}`\n}\n\nexport function getURL() {\n  const { href } = window.location\n  const origin = getLocationOrigin()\n  return href.substring(origin.length)\n}\n\nexport function getDisplayName<P>(Component: ComponentType<P>) {\n  return typeof Component === 'string'\n    ? Component\n    : Component.displayName || Component.name || 'Unknown'\n}\n\nexport function isResSent(res: ServerResponse) {\n  return res.finished || res.headersSent\n}\n\nexport function normalizeRepeatedSlashes(url: string) {\n  const urlParts = url.split('?')\n  const urlNoQuery = urlParts[0]\n\n  return (\n    urlNoQuery\n      // first we replace any non-encoded backslashes with forward\n      // then normalize repeated forward slashes\n      .replace(/\\\\/g, '/')\n      .replace(/\\/\\/+/g, '/') +\n    (urlParts[1] ? `?${urlParts.slice(1).join('?')}` : '')\n  )\n}\n\nexport async function loadGetInitialProps<\n  C extends BaseContext,\n  IP = {},\n  P = {},\n>(App: NextComponentType<C, IP, P>, ctx: C): Promise<IP> {\n  if (process.env.NODE_ENV !== 'production') {\n    if (App.prototype?.getInitialProps) {\n      const message = `\"${getDisplayName(\n        App\n      )}.getInitialProps()\" is defined as an instance method - visit https://nextjs.org/docs/messages/get-initial-props-as-an-instance-method for more information.`\n      throw new Error(message)\n    }\n  }\n  // when called from _app `ctx` is nested in `ctx`\n  const res = ctx.res || (ctx.ctx && ctx.ctx.res)\n\n  if (!App.getInitialProps) {\n    if (ctx.ctx && ctx.Component) {\n      // @ts-ignore pageProps default\n      return {\n        pageProps: await loadGetInitialProps(ctx.Component, ctx.ctx),\n      }\n    }\n    return {} as IP\n  }\n\n  const props = await App.getInitialProps(ctx)\n\n  if (res && isResSent(res)) {\n    return props\n  }\n\n  if (!props) {\n    const message = `\"${getDisplayName(\n      App\n    )}.getInitialProps()\" should resolve to an object. But found \"${props}\" instead.`\n    throw new Error(message)\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (Object.keys(props).length === 0 && !ctx.ctx) {\n      console.warn(\n        `${getDisplayName(\n          App\n        )} returned an empty object from \\`getInitialProps\\`. This de-optimizes and prevents automatic static optimization. https://nextjs.org/docs/messages/empty-object-getInitialProps`\n      )\n    }\n  }\n\n  return props\n}\n\nexport const SP = typeof performance !== 'undefined'\nexport const ST =\n  SP &&\n  (['mark', 'measure', 'getEntriesByName'] as const).every(\n    (method) => typeof performance[method] === 'function'\n  )\n\nexport class DecodeError extends Error {}\nexport class NormalizeError extends Error {}\nexport class PageNotFoundError extends Error {\n  code: string\n\n  constructor(page: string) {\n    super()\n    this.code = 'ENOENT'\n    this.name = 'PageNotFoundError'\n    this.message = `Cannot find module for page: ${page}`\n  }\n}\n\nexport class MissingStaticPage extends Error {\n  constructor(page: string, message: string) {\n    super()\n    this.message = `Failed to load static file for page: ${page} ${message}`\n  }\n}\n\nexport class MiddlewareNotFoundError extends Error {\n  code: string\n  constructor() {\n    super()\n    this.code = 'ENOENT'\n    this.message = `Cannot find the middleware module`\n  }\n}\n\nexport interface CacheFs {\n  existsSync: typeof fs.existsSync\n  readFile: typeof fs.promises.readFile\n  readFileSync: typeof fs.readFileSync\n  writeFile(f: string, d: any): Promise<void>\n  mkdir(dir: string): Promise<void | string>\n  stat(f: string): Promise<{ mtime: Date }>\n}\n\nexport function stringifyError(error: Error) {\n  return JSON.stringify({ message: error.message, stack: error.stack })\n}\n","/**\n * Given a path this function will find the pathname, query and hash and return\n * them. This is useful to parse full paths on the client side.\n * @param path A path to parse e.g. /foo/bar?id=1#hash\n */\nexport function parsePath(path: string) {\n  const hashIndex = path.indexOf('#')\n  const queryIndex = path.indexOf('?')\n  const hasQuery = queryIndex > -1 && (hashIndex < 0 || queryIndex < hashIndex)\n\n  if (hasQuery || hashIndex > -1) {\n    return {\n      pathname: path.substring(0, hasQuery ? queryIndex : hashIndex),\n      query: hasQuery\n        ? path.substring(queryIndex, hashIndex > -1 ? hashIndex : undefined)\n        : '',\n      hash: hashIndex > -1 ? path.slice(hashIndex) : '',\n    }\n  }\n\n  return { pathname: path, query: '', hash: '' }\n}\n","import { parsePath } from './parse-path'\n\n/**\n * Adds the provided prefix to the given path. It first ensures that the path\n * is indeed starting with a slash.\n */\nexport function addPathPrefix(path: string, prefix?: string) {\n  if (!path.startsWith('/') || !prefix) {\n    return path\n  }\n\n  const { pathname, query, hash } = parsePath(path)\n  return `${prefix}${pathname}${query}${hash}`\n}\n","/**\n * Removes the trailing slash for a given route or page path. Preserves the\n * root page. Examples:\n *   - `/foo/bar/` -> `/foo/bar`\n *   - `/foo/bar` -> `/foo/bar`\n *   - `/` -> `/`\n */\nexport function removeTrailingSlash(route: string) {\n  return route.replace(/\\/$/, '') || '/'\n}\n","import { removeTrailingSlash } from '../shared/lib/router/utils/remove-trailing-slash'\nimport { parsePath } from '../shared/lib/router/utils/parse-path'\n\n/**\n * Normalizes the trailing slash of a path according to the `trailingSlash` option\n * in `next.config.js`.\n */\nexport const normalizePathTrailingSlash = (path: string) => {\n  if (!path.startsWith('/') || process.env.__NEXT_MANUAL_TRAILING_SLASH) {\n    return path\n  }\n\n  const { pathname, query, hash } = parsePath(path)\n  if (process.env.__NEXT_TRAILING_SLASH) {\n    if (/\\.[^/]+\\/?$/.test(pathname)) {\n      return `${removeTrailingSlash(pathname)}${query}${hash}`\n    } else if (pathname.endsWith('/')) {\n      return `${pathname}${query}${hash}`\n    } else {\n      return `${pathname}/${query}${hash}`\n    }\n  }\n\n  return `${removeTrailingSlash(pathname)}${query}${hash}`\n}\n","import { addPathPrefix } from '../shared/lib/router/utils/add-path-prefix'\nimport { normalizePathTrailingSlash } from './normalize-trailing-slash'\n\nconst basePath = (process.env.__NEXT_ROUTER_BASEPATH as string) || ''\n\nexport function addBasePath(path: string, required?: boolean): string {\n  return normalizePathTrailingSlash(\n    process.env.__NEXT_MANUAL_CLIENT_BASE_PATH && !required\n      ? path\n      : addPathPrefix(path, basePath)\n  )\n}\n","export const RSC_HEADER = 'RSC' as const\nexport const ACTION_HEADER = 'Next-Action' as const\n// TODO: Instead of sending the full router state, we only need to send the\n// segment path. Saves bytes. Then we could also use this field for segment\n// prefetches, which also need to specify a particular segment.\nexport const NEXT_ROUTER_STATE_TREE_HEADER = 'Next-Router-State-Tree' as const\nexport const NEXT_ROUTER_PREFETCH_HEADER = 'Next-Router-Prefetch' as const\n// This contains the path to the segment being prefetched.\n// TODO: If we change Next-Router-State-Tree to be a segment path, we can use\n// that instead. Then Next-Router-Prefetch and Next-Router-Segment-Prefetch can\n// be merged into a single enum.\nexport const NEXT_ROUTER_SEGMENT_PREFETCH_HEADER =\n  'Next-Router-Segment-Prefetch' as const\nexport const NEXT_HMR_REFRESH_HEADER = 'Next-HMR-Refresh' as const\nexport const NEXT_HMR_REFRESH_HASH_COOKIE = '__next_hmr_refresh_hash__' as const\nexport const NEXT_URL = 'Next-Url' as const\nexport const RSC_CONTENT_TYPE_HEADER = 'text/x-component' as const\n\nexport const FLIGHT_HEADERS = [\n  RSC_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_HMR_REFRESH_HEADER,\n  NEXT_ROUTER_SEGMENT_PREFETCH_HEADER,\n] as const\n\nexport const NEXT_RSC_UNION_QUERY = '_rsc' as const\n\nexport const NEXT_ROUTER_STALE_TIME_HEADER = 'x-nextjs-stale-time' as const\nexport const NEXT_DID_POSTPONE_HEADER = 'x-nextjs-postponed' as const\nexport const NEXT_REWRITTEN_PATH_HEADER = 'x-nextjs-rewritten-path' as const\nexport const NEXT_REWRITTEN_QUERY_HEADER = 'x-nextjs-rewritten-query' as const\nexport const NEXT_IS_PRERENDER_HEADER = 'x-nextjs-prerender' as const\n","/**\n * Check to see if a value is Thenable.\n *\n * @param promise the maybe-thenable value\n * @returns true if the value is thenable\n */\nexport function isThenable<T = unknown>(\n  promise: Promise<T> | T\n): promise is Promise<T> {\n  return (\n    promise !== null &&\n    typeof promise === 'object' &&\n    'then' in promise &&\n    typeof promise.then === 'function'\n  )\n}\n","import type { Dispatch } from 'react'\nimport React, { use } from 'react'\nimport { isThenable } from '../../shared/lib/is-thenable'\nimport type { AppRouterActionQueue } from './app-router-instance'\nimport type {\n  AppRouterState,\n  ReducerActions,\n  ReducerState,\n} from './router-reducer/router-reducer-types'\n\n// The app router state lives outside of React, so we can import the dispatch\n// method directly wherever we need it, rather than passing it around via props\n// or context.\nlet dispatch: Dispatch<ReducerActions> | null = null\n\nexport function dispatchAppRouterAction(action: ReducerActions) {\n  if (dispatch === null) {\n    throw new Error(\n      'Internal Next.js error: Router action dispatched before initialization.'\n    )\n  }\n  dispatch(action)\n}\n\nexport function useActionQueue(\n  actionQueue: AppRouterActionQueue\n): AppRouterState {\n  const [state, setState] = React.useState<ReducerState>(actionQueue.state)\n\n  // Because of a known issue that requires to decode Flight streams inside the\n  // render phase, we have to be a bit clever and assign the dispatch method to\n  // a module-level variable upon initialization. The useState hook in this\n  // module only exists to synchronize state that lives outside of React.\n  // Ideally, what we'd do instead is pass the state as a prop to root.render;\n  // this is conceptually how we're modeling the app router state, despite the\n  // weird implementation details.\n  if (process.env.NODE_ENV !== 'production') {\n    const useSyncDevRenderIndicator =\n      require('./react-dev-overlay/utils/dev-indicator/use-sync-dev-render-indicator')\n        .useSyncDevRenderIndicator as typeof import('./react-dev-overlay/utils/dev-indicator/use-sync-dev-render-indicator').useSyncDevRenderIndicator\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const syncDevRenderIndicator = useSyncDevRenderIndicator()\n\n    dispatch = (action: ReducerActions) => {\n      syncDevRenderIndicator(() => {\n        actionQueue.dispatch(action, setState)\n      })\n    }\n  } else {\n    dispatch = (action: ReducerActions) =>\n      actionQueue.dispatch(action, setState)\n  }\n\n  return isThenable(state) ? use(state) : state\n}\n","import { startTransition } from 'react'\nimport { ACTION_SERVER_ACTION } from './components/router-reducer/router-reducer-types'\nimport { dispatchAppRouterAction } from './components/use-action-queue'\n\nexport async function callServer(actionId: string, actionArgs: any[]) {\n  return new Promise((resolve, reject) => {\n    startTransition(() => {\n      dispatchAppRouterAction({\n        type: ACTION_SERVER_ACTION,\n        actionId,\n        actionArgs,\n        resolve,\n        reject,\n      })\n    })\n  })\n}\n","const basePath = process.env.__NEXT_ROUTER_BASEPATH || ''\nconst pathname = `${basePath}/__nextjs_source-map`\n\nexport const findSourceMapURL =\n  process.env.NODE_ENV === 'development'\n    ? function findSourceMapURL(filename: string): string | null {\n        if (filename === '') {\n          return null\n        }\n\n        if (\n          filename.startsWith(document.location.origin) &&\n          filename.includes('/_next/static')\n        ) {\n          // This is a request for a client chunk. This can only happen when\n          // using Turbopack. In this case, since we control how those source\n          // maps are generated, we can safely assume that the sourceMappingURL\n          // is relative to the filename, with an added `.map` extension. The\n          // browser can just request this file, and it gets served through the\n          // normal dev server, without the need to route this through\n          // the `/__nextjs_source-map` dev middleware.\n          return `${filename}.map`\n        }\n\n        const url = new URL(pathname, document.location.origin)\n        url.searchParams.set('filename', filename)\n\n        return url.href\n      }\n    : undefined\n","import type {\n  CacheNodeSeedData,\n  FlightData,\n  FlightDataPath,\n  FlightRouterState,\n  FlightSegmentPath,\n  Segment,\n} from '../server/app-render/types'\nimport type { HeadData } from '../shared/lib/app-router-context.shared-runtime'\n\nexport type NormalizedFlightData = {\n  /**\n   * The full `FlightSegmentPath` inclusive of the final `Segment`\n   */\n  segmentPath: FlightSegmentPath\n  /**\n   * The `FlightSegmentPath` exclusive of the final `Segment`\n   */\n  pathToSegment: FlightSegmentPath\n  segment: Segment\n  tree: FlightRouterState\n  seedData: CacheNodeSeedData | null\n  head: HeadData\n  isHeadPartial: boolean\n  isRootRender: boolean\n}\n\n// TODO: We should only have to export `normalizeFlightData`, however because the initial flight data\n// that gets passed to `createInitialRouterState` doesn't conform to the `FlightDataPath` type (it's missing the root segment)\n// we're currently exporting it so we can use it directly. This should be fixed as part of the unification of\n// the different ways we express `FlightSegmentPath`.\nexport function getFlightDataPartsFromPath(\n  flightDataPath: FlightDataPath\n): NormalizedFlightData {\n  // Pick the last 4 items from the `FlightDataPath` to get the [tree, seedData, viewport, isHeadPartial].\n  const flightDataPathLength = 4\n  // tree, seedData, and head are *always* the last three items in the `FlightDataPath`.\n  const [tree, seedData, head, isHeadPartial] =\n    flightDataPath.slice(-flightDataPathLength)\n  // The `FlightSegmentPath` is everything except the last three items. For a root render, it won't be present.\n  const segmentPath = flightDataPath.slice(0, -flightDataPathLength)\n\n  return {\n    // TODO: Unify these two segment path helpers. We are inconsistently pushing an empty segment (\"\")\n    // to the start of the segment path in some places which makes it hard to use solely the segment path.\n    // Look for \"// TODO-APP: remove ''\" in the codebase.\n    pathToSegment: segmentPath.slice(0, -1),\n    segmentPath,\n    // if the `FlightDataPath` corresponds with the root, there'll be no segment path,\n    // in which case we default to ''.\n    segment: segmentPath[segmentPath.length - 1] ?? '',\n    tree,\n    seedData,\n    head,\n    isHeadPartial,\n    isRootRender: flightDataPath.length === flightDataPathLength,\n  }\n}\n\nexport function getNextFlightSegmentPath(\n  flightSegmentPath: FlightSegmentPath\n): FlightSegmentPath {\n  // Since `FlightSegmentPath` is a repeated tuple of `Segment` and `ParallelRouteKey`, we slice off two items\n  // to get the next segment path.\n  return flightSegmentPath.slice(2)\n}\n\nexport function normalizeFlightData(\n  flightData: FlightData\n): NormalizedFlightData[] | string {\n  // FlightData can be a string when the server didn't respond with a proper flight response,\n  // or when a redirect happens, to signal to the client that it needs to perform an MPA navigation.\n  if (typeof flightData === 'string') {\n    return flightData\n  }\n\n  return flightData.map(getFlightDataPartsFromPath)\n}\n","// This gets assigned as a side-effect during app initialization. Because it\n// represents the build used to create the JS bundle, it should never change\n// after being set, so we store it in a global variable.\n//\n// When performing RSC requests, if the incoming data has a different build ID,\n// we perform an MPA navigation/refresh to load the updated build and ensure\n// that the client and server in sync.\n\n// Starts as an empty string. In practice, because setAppBuildId is called\n// during initialization before hydration starts, this will always get\n// reassigned to the actual build ID before it's ever needed by a navigation.\n// If for some reasons it didn't, due to a bug or race condition, then on\n// navigation the build comparision would fail and trigger an MPA navigation.\nlet globalBuildId: string = ''\n\nexport function setAppBuildId(buildId: string) {\n  globalBuildId = buildId\n}\n\nexport function getAppBuildId(): string {\n  return globalBuildId\n}\n","// http://www.cse.yorku.ca/~oz/hash.html\n// More specifically, 32-bit hash via djbxor\n// (ref: https://gist.github.com/eplawless/52813b1d8ad9af510d85?permalink_comment_id=3367765#gistcomment-3367765)\n// This is due to number type differences between rust for turbopack to js number types,\n// where rust does not have easy way to repreesnt js's 53-bit float number type for the matching\n// overflow behavior. This is more `correct` in terms of having canonical hash across different runtime / implementation\n// as can gaurantee determinstic output from 32bit hash.\nexport function djb2Hash(str: string) {\n  let hash = 5381\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i)\n    hash = ((hash << 5) + hash + char) & 0xffffffff\n  }\n  return hash >>> 0\n}\n\nexport function hexHash(str: string) {\n  return djb2Hash(str).toString(36).slice(0, 5)\n}\n","'use client'\nimport { hexHash } from '../../../shared/lib/hash'\nimport {\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_ROUTER_SEGMENT_PREFETCH_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_URL,\n  NEXT_RSC_UNION_QUERY,\n} from '../app-router-headers'\nimport type { RequestHeaders } from './fetch-server-response'\n\n/**\n * Mutates the provided URL by adding a cache-busting search parameter for CDNs that don't\n * support custom headers. This helps avoid caching conflicts by making each request unique.\n *\n * Rather than relying on the Vary header which some CDNs ignore, we append a search param\n * to create a unique URL that forces a fresh request.\n *\n * Example:\n * URL before: https://example.com/path?query=1\n * URL after: https://example.com/path?query=1&_rsc=abc123\n *\n * Note: This function mutates the input URL directly and does not return anything.\n *\n * TODO: Since we need to use a search param anyway, we could simplify by removing the custom\n * headers approach entirely and just use search params.\n */\nexport const setCacheBustingSearchParam = (\n  url: URL,\n  headers: RequestHeaders\n): void => {\n  const uniqueCacheKey = hexHash(\n    [\n      headers[NEXT_ROUTER_PREFETCH_HEADER] || '0',\n      headers[NEXT_ROUTER_SEGMENT_PREFETCH_HEADER] || '0',\n      headers[NEXT_ROUTER_STATE_TREE_HEADER],\n      headers[NEXT_URL],\n    ].join(',')\n  )\n\n  /**\n   * Note that we intentionally do not use `url.searchParams.set` here:\n   *\n   * const url = new URL('https://example.com/search?q=custom%20spacing');\n   * url.searchParams.set('_rsc', 'abc123');\n   * console.log(url.toString()); // Outputs: https://example.com/search?q=custom+spacing&_rsc=abc123\n   *                                                                             ^ <--- this is causing confusion\n   * This is in fact intended based on https://url.spec.whatwg.org/#interface-urlsearchparams, but\n   * we want to preserve the %20 as %20 if that's what the user passed in, hence the custom\n   * logic below.\n   */\n  const existingSearch = url.search\n  const rawQuery = existingSearch.startsWith('?')\n    ? existingSearch.slice(1)\n    : existingSearch\n  const pairs = rawQuery.split('&').filter(Boolean)\n  pairs.push(`${NEXT_RSC_UNION_QUERY}=${uniqueCacheKey}`)\n  url.search = pairs.length ? `?${pairs.join('&')}` : ''\n}\n","'use client'\n\n// @ts-ignore\n// eslint-disable-next-line import/no-extraneous-dependencies\n// import { createFromReadableStream } from 'react-server-dom-webpack/client'\nconst { createFromReadableStream } = (\n  !!process.env.NEXT_RUNTIME\n    ? // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client.edge')\n    : // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client')\n) as typeof import('react-server-dom-webpack/client')\n\nimport type {\n  FlightRouterState,\n  NavigationFlightResponse,\n} from '../../../server/app-render/types'\n\nimport type { NEXT_ROUTER_SEGMENT_PREFETCH_HEADER } from '../app-router-headers'\nimport {\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_RSC_UNION_QUERY,\n  NEXT_URL,\n  RSC_HEADER,\n  RSC_CONTENT_TYPE_HEADER,\n  NEXT_HMR_REFRESH_HEADER,\n  NEXT_DID_POSTPONE_HEADER,\n  NEXT_ROUTER_STALE_TIME_HEADER,\n} from '../app-router-headers'\nimport { callServer } from '../../app-call-server'\nimport { findSourceMapURL } from '../../app-find-source-map-url'\nimport { PrefetchKind } from './router-reducer-types'\nimport {\n  normalizeFlightData,\n  type NormalizedFlightData,\n} from '../../flight-data-helpers'\nimport { getAppBuildId } from '../../app-build-id'\nimport { setCacheBustingSearchParam } from './set-cache-busting-search-param'\n\nexport interface FetchServerResponseOptions {\n  readonly flightRouterState: FlightRouterState\n  readonly nextUrl: string | null\n  readonly prefetchKind?: PrefetchKind\n  readonly isHmrRefresh?: boolean\n}\n\nexport type FetchServerResponseResult = {\n  flightData: NormalizedFlightData[] | string\n  canonicalUrl: URL | undefined\n  couldBeIntercepted: boolean\n  prerendered: boolean\n  postponed: boolean\n  staleTime: number\n}\n\nexport type RequestHeaders = {\n  [RSC_HEADER]?: '1'\n  [NEXT_ROUTER_STATE_TREE_HEADER]?: string\n  [NEXT_URL]?: string\n  [NEXT_ROUTER_PREFETCH_HEADER]?: '1'\n  [NEXT_ROUTER_SEGMENT_PREFETCH_HEADER]?: string\n  'x-deployment-id'?: string\n  [NEXT_HMR_REFRESH_HEADER]?: '1'\n  // A header that is only added in test mode to assert on fetch priority\n  'Next-Test-Fetch-Priority'?: RequestInit['priority']\n}\n\nexport function urlToUrlWithoutFlightMarker(url: string): URL {\n  const urlWithoutFlightParameters = new URL(url, location.origin)\n  urlWithoutFlightParameters.searchParams.delete(NEXT_RSC_UNION_QUERY)\n  if (process.env.NODE_ENV === 'production') {\n    if (\n      process.env.__NEXT_CONFIG_OUTPUT === 'export' &&\n      urlWithoutFlightParameters.pathname.endsWith('.txt')\n    ) {\n      const { pathname } = urlWithoutFlightParameters\n      const length = pathname.endsWith('/index.txt') ? 10 : 4\n      // Slice off `/index.txt` or `.txt` from the end of the pathname\n      urlWithoutFlightParameters.pathname = pathname.slice(0, -length)\n    }\n  }\n  return urlWithoutFlightParameters\n}\n\nfunction doMpaNavigation(url: string): FetchServerResponseResult {\n  return {\n    flightData: urlToUrlWithoutFlightMarker(url).toString(),\n    canonicalUrl: undefined,\n    couldBeIntercepted: false,\n    prerendered: false,\n    postponed: false,\n    staleTime: -1,\n  }\n}\n\nlet abortController = new AbortController()\n\nif (typeof window !== 'undefined') {\n  // Abort any in-flight requests when the page is unloaded, e.g. due to\n  // reloading the page or performing hard navigations. This allows us to ignore\n  // what would otherwise be a thrown TypeError when the browser cancels the\n  // requests.\n  window.addEventListener('pagehide', () => {\n    abortController.abort()\n  })\n\n  // Use a fresh AbortController instance on pageshow, e.g. when navigating back\n  // and the JavaScript execution context is restored by the browser.\n  window.addEventListener('pageshow', () => {\n    abortController = new AbortController()\n  })\n}\n\n/**\n * Fetch the flight data for the provided url. Takes in the current router state\n * to decide what to render server-side.\n */\nexport async function fetchServerResponse(\n  url: URL,\n  options: FetchServerResponseOptions\n): Promise<FetchServerResponseResult> {\n  const { flightRouterState, nextUrl, prefetchKind } = options\n\n  const headers: RequestHeaders = {\n    // Enable flight response\n    [RSC_HEADER]: '1',\n    // Provide the current router state\n    [NEXT_ROUTER_STATE_TREE_HEADER]: encodeURIComponent(\n      JSON.stringify(flightRouterState)\n    ),\n  }\n\n  /**\n   * Three cases:\n   * - `prefetchKind` is `undefined`, it means it's a normal navigation, so we want to prefetch the page data fully\n   * - `prefetchKind` is `full` - we want to prefetch the whole page so same as above\n   * - `prefetchKind` is `auto` - if the page is dynamic, prefetch the page data partially, if static prefetch the page data fully\n   */\n  if (prefetchKind === PrefetchKind.AUTO) {\n    headers[NEXT_ROUTER_PREFETCH_HEADER] = '1'\n  }\n\n  if (process.env.NODE_ENV === 'development' && options.isHmrRefresh) {\n    headers[NEXT_HMR_REFRESH_HEADER] = '1'\n  }\n\n  if (nextUrl) {\n    headers[NEXT_URL] = nextUrl\n  }\n\n  try {\n    // When creating a \"temporary\" prefetch (the \"on-demand\" prefetch that gets created on navigation, if one doesn't exist)\n    // we send the request with a \"high\" priority as it's in response to a user interaction that could be blocking a transition.\n    // Otherwise, all other prefetches are sent with a \"low\" priority.\n    // We use \"auto\" for in all other cases to match the existing default, as this function is shared outside of prefetching.\n    const fetchPriority = prefetchKind\n      ? prefetchKind === PrefetchKind.TEMPORARY\n        ? 'high'\n        : 'low'\n      : 'auto'\n\n    if (process.env.NODE_ENV === 'production') {\n      if (process.env.__NEXT_CONFIG_OUTPUT === 'export') {\n        // In \"output: export\" mode, we can't rely on headers to distinguish\n        // between HTML and RSC requests. Instead, we append an extra prefix\n        // to the request.\n        url = new URL(url)\n        if (url.pathname.endsWith('/')) {\n          url.pathname += 'index.txt'\n        } else {\n          url.pathname += '.txt'\n        }\n      }\n    }\n\n    const res = await createFetch(\n      url,\n      headers,\n      fetchPriority,\n      abortController.signal\n    )\n\n    const responseUrl = urlToUrlWithoutFlightMarker(res.url)\n    const canonicalUrl = res.redirected ? responseUrl : undefined\n\n    const contentType = res.headers.get('content-type') || ''\n    const interception = !!res.headers.get('vary')?.includes(NEXT_URL)\n    const postponed = !!res.headers.get(NEXT_DID_POSTPONE_HEADER)\n    const staleTimeHeader = res.headers.get(NEXT_ROUTER_STALE_TIME_HEADER)\n    const staleTime =\n      staleTimeHeader !== null ? parseInt(staleTimeHeader, 10) : -1\n    let isFlightResponse = contentType.startsWith(RSC_CONTENT_TYPE_HEADER)\n\n    if (process.env.NODE_ENV === 'production') {\n      if (process.env.__NEXT_CONFIG_OUTPUT === 'export') {\n        if (!isFlightResponse) {\n          isFlightResponse = contentType.startsWith('text/plain')\n        }\n      }\n    }\n\n    // If fetch returns something different than flight response handle it like a mpa navigation\n    // If the fetch was not 200, we also handle it like a mpa navigation\n    if (!isFlightResponse || !res.ok || !res.body) {\n      // in case the original URL came with a hash, preserve it before redirecting to the new URL\n      if (url.hash) {\n        responseUrl.hash = url.hash\n      }\n\n      return doMpaNavigation(responseUrl.toString())\n    }\n\n    // We may navigate to a page that requires a different Webpack runtime.\n    // In prod, every page will have the same Webpack runtime.\n    // In dev, the Webpack runtime is minimal for each page.\n    // We need to ensure the Webpack runtime is updated before executing client-side JS of the new page.\n    if (process.env.NODE_ENV !== 'production' && !process.env.TURBOPACK) {\n      await require('../react-dev-overlay/app/hot-reloader-client').waitForWebpackRuntimeHotUpdate()\n    }\n\n    // Handle the `fetch` readable stream that can be unwrapped by `React.use`.\n    const flightStream = postponed\n      ? createUnclosingPrefetchStream(res.body)\n      : res.body\n    const response = await (createFromNextReadableStream(\n      flightStream\n    ) as Promise<NavigationFlightResponse>)\n\n    if (getAppBuildId() !== response.b) {\n      return doMpaNavigation(res.url)\n    }\n\n    return {\n      flightData: normalizeFlightData(response.f),\n      canonicalUrl: canonicalUrl,\n      couldBeIntercepted: interception,\n      prerendered: response.S,\n      postponed,\n      staleTime,\n    }\n  } catch (err) {\n    if (!abortController.signal.aborted) {\n      console.error(\n        `Failed to fetch RSC payload for ${url}. Falling back to browser navigation.`,\n        err\n      )\n    }\n\n    // If fetch fails handle it like a mpa navigation\n    // TODO-APP: Add a test for the case where a CORS request fails, e.g. external url redirect coming from the response.\n    // See https://github.com/vercel/next.js/issues/43605#issuecomment-1451617521 for a reproduction.\n    return {\n      flightData: url.toString(),\n      canonicalUrl: undefined,\n      couldBeIntercepted: false,\n      prerendered: false,\n      postponed: false,\n      staleTime: -1,\n    }\n  }\n}\n\nexport function createFetch(\n  url: URL,\n  headers: RequestHeaders,\n  fetchPriority: 'auto' | 'high' | 'low' | null,\n  signal?: AbortSignal\n) {\n  const fetchUrl = new URL(url)\n\n  // TODO: In output: \"export\" mode, the headers do nothing. Omit them (and the\n  // cache busting search param) from the request so they're\n  // maximally cacheable.\n  setCacheBustingSearchParam(fetchUrl, headers)\n\n  if (process.env.__NEXT_TEST_MODE && fetchPriority !== null) {\n    headers['Next-Test-Fetch-Priority'] = fetchPriority\n  }\n\n  if (process.env.NEXT_DEPLOYMENT_ID) {\n    headers['x-deployment-id'] = process.env.NEXT_DEPLOYMENT_ID\n  }\n\n  return fetch(fetchUrl, {\n    // Backwards compat for older browsers. `same-origin` is the default in modern browsers.\n    credentials: 'same-origin',\n    headers,\n    priority: fetchPriority || undefined,\n    signal,\n  })\n}\n\nexport function createFromNextReadableStream(\n  flightStream: ReadableStream<Uint8Array>\n): Promise<unknown> {\n  return createFromReadableStream(flightStream, {\n    callServer,\n    findSourceMapURL,\n  })\n}\n\nfunction createUnclosingPrefetchStream(\n  originalFlightStream: ReadableStream<Uint8Array>\n): ReadableStream<Uint8Array> {\n  // When PPR is enabled, prefetch streams may contain references that never\n  // resolve, because that's how we encode dynamic data access. In the decoded\n  // object returned by the Flight client, these are reified into hanging\n  // promises that suspend during render, which is effectively what we want.\n  // The UI resolves when it switches to the dynamic data stream\n  // (via useDeferredValue(dynamic, static)).\n  //\n  // However, the Flight implementation currently errors if the server closes\n  // the response before all the references are resolved. As a cheat to work\n  // around this, we wrap the original stream in a new stream that never closes,\n  // and therefore doesn't error.\n  const reader = originalFlightStream.getReader()\n  return new ReadableStream({\n    async pull(controller) {\n      while (true) {\n        const { done, value } = await reader.read()\n        if (!done) {\n          // Pass to the target stream and keep consuming the Flight response\n          // from the server.\n          controller.enqueue(value)\n          continue\n        }\n        // The server stream has closed. Exit, but intentionally do not close\n        // the target stream.\n        return\n      }\n    },\n  })\n}\n","import type { Segment } from '../../../server/app-render/types'\nimport { PAGE_SEGMENT_KEY } from '../../../shared/lib/segment'\n\nexport function createRouterCacheKey(\n  segment: Segment,\n  withoutSearchParameters: boolean = false\n) {\n  // if the segment is an array, it means it's a dynamic segment\n  // for example, ['lang', 'en', 'd']. We need to convert it to a string to store it as a cache node key.\n  if (Array.isArray(segment)) {\n    return `${segment[0]}|${segment[1]}|${segment[2]}`\n  }\n\n  // Page segments might have search parameters, ie __PAGE__?foo=bar\n  // When `withoutSearchParameters` is true, we only want to return the page segment\n  if (withoutSearchParameters && segment.startsWith(PAGE_SEGMENT_KEY)) {\n    return PAGE_SEGMENT_KEY\n  }\n\n  return segment\n}\n","import type { CacheNode } from '../../../shared/lib/app-router-context.shared-runtime'\nimport type { FlightSegmentPath } from '../../../server/app-render/types'\nimport { createRouterCacheKey } from './create-router-cache-key'\nimport { getNextFlightSegmentPath } from '../../flight-data-helpers'\n\n/**\n * Fill cache up to the end of the flightSegmentPath, invalidating anything below it.\n */\nexport function invalidateCacheBelowFlightSegmentPath(\n  newCache: CacheNode,\n  existingCache: CacheNode,\n  flightSegmentPath: FlightSegmentPath\n): void {\n  const isLastEntry = flightSegmentPath.length <= 2\n  const [parallelRouteKey, segment] = flightSegmentPath\n\n  const cacheKey = createRouterCacheKey(segment)\n\n  const existingChildSegmentMap =\n    existingCache.parallelRoutes.get(parallelRouteKey)\n\n  if (!existingChildSegmentMap) {\n    // Bailout because the existing cache does not have the path to the leaf node\n    // Will trigger lazy fetch in layout-router because of missing segment\n    return\n  }\n\n  let childSegmentMap = newCache.parallelRoutes.get(parallelRouteKey)\n  if (!childSegmentMap || childSegmentMap === existingChildSegmentMap) {\n    childSegmentMap = new Map(existingChildSegmentMap)\n    newCache.parallelRoutes.set(parallelRouteKey, childSegmentMap)\n  }\n\n  // In case of last entry don't copy further down.\n  if (isLastEntry) {\n    childSegmentMap.delete(cacheKey)\n    return\n  }\n\n  const existingChildCacheNode = existingChildSegmentMap.get(cacheKey)\n  let childCacheNode = childSegmentMap.get(cacheKey)\n\n  if (!childCacheNode || !existingChildCacheNode) {\n    // Bailout because the existing cache does not have the path to the leaf node\n    // Will trigger lazy fetch in layout-router because of missing segment\n    return\n  }\n\n  if (childCacheNode === existingChildCacheNode) {\n    childCacheNode = {\n      lazyData: childCacheNode.lazyData,\n      rsc: childCacheNode.rsc,\n      prefetchRsc: childCacheNode.prefetchRsc,\n      head: childCacheNode.head,\n      prefetchHead: childCacheNode.prefetchHead,\n      parallelRoutes: new Map(childCacheNode.parallelRoutes),\n    } as CacheNode\n    childSegmentMap.set(cacheKey, childCacheNode)\n  }\n\n  invalidateCacheBelowFlightSegmentPath(\n    childCacheNode,\n    existingChildCacheNode,\n    getNextFlightSegmentPath(flightSegmentPath)\n  )\n}\n","import type { Segment } from '../../server/app-render/types'\n\nexport const matchSegment = (\n  existingSegment: Segment,\n  segment: Segment\n): boolean => {\n  // segment is either Array or string\n  if (typeof existingSegment === 'string') {\n    if (typeof segment === 'string') {\n      // Common case: segment is just a string\n      return existingSegment === segment\n    }\n    return false\n  }\n\n  if (typeof segment === 'string') {\n    return false\n  }\n  return existingSegment[0] === segment[0] && existingSegment[1] === segment[1]\n}\n","import type { CacheNode } from '../../../shared/lib/app-router-context.shared-runtime'\nimport type {\n  FlightRouterState,\n  CacheNodeSeedData,\n} from '../../../server/app-render/types'\nimport { createRouterCacheKey } from './create-router-cache-key'\nimport {\n  PrefetchCacheEntryStatus,\n  type PrefetchCacheEntry,\n} from './router-reducer-types'\n\nexport function fillLazyItemsTillLeafWithHead(\n  navigatedAt: number,\n  newCache: CacheNode,\n  existingCache: CacheNode | undefined,\n  routerState: FlightRouterState,\n  cacheNodeSeedData: CacheNodeSeedData | null,\n  head: React.ReactNode,\n  prefetchEntry: PrefetchCacheEntry | undefined\n): void {\n  const isLastSegment = Object.keys(routerState[1]).length === 0\n  if (isLastSegment) {\n    newCache.head = head\n    return\n  }\n  // Remove segment that we got data for so that it is filled in during rendering of rsc.\n  for (const key in routerState[1]) {\n    const parallelRouteState = routerState[1][key]\n    const segmentForParallelRoute = parallelRouteState[0]\n    const cacheKey = createRouterCacheKey(segmentForParallelRoute)\n\n    // TODO: We should traverse the cacheNodeSeedData tree instead of the router\n    // state tree. Ideally, they would always be the same shape, but because of\n    // the loading.js pattern, cacheNodeSeedData sometimes only represents a\n    // partial tree. That's why this node is sometimes null. Once PPR lands,\n    // loading.js will no longer have special behavior and we can traverse the\n    // data tree instead.\n    //\n    // We should also consider merging the router state tree and the data tree\n    // in the response format, so that we don't have to send the keys twice.\n    // Then the client can convert them into separate representations.\n    const parallelSeedData =\n      cacheNodeSeedData !== null && cacheNodeSeedData[2][key] !== undefined\n        ? cacheNodeSeedData[2][key]\n        : null\n    if (existingCache) {\n      const existingParallelRoutesCacheNode =\n        existingCache.parallelRoutes.get(key)\n      if (existingParallelRoutesCacheNode) {\n        const hasReusablePrefetch =\n          prefetchEntry?.kind === 'auto' &&\n          prefetchEntry.status === PrefetchCacheEntryStatus.reusable\n\n        let parallelRouteCacheNode = new Map(existingParallelRoutesCacheNode)\n        const existingCacheNode = parallelRouteCacheNode.get(cacheKey)\n        let newCacheNode: CacheNode\n        if (parallelSeedData !== null) {\n          // New data was sent from the server.\n          const seedNode = parallelSeedData[1]\n          const loading = parallelSeedData[3]\n          newCacheNode = {\n            lazyData: null,\n            rsc: seedNode,\n            // This is a PPR-only field. When PPR is enabled, we shouldn't hit\n            // this path during a navigation, but until PPR is fully implemented\n            // yet it's possible the existing node does have a non-null\n            // `prefetchRsc`. As an incremental step, we'll just de-opt to the\n            // old behavior — no PPR value.\n            prefetchRsc: null,\n            head: null,\n            prefetchHead: null,\n            loading,\n            parallelRoutes: new Map(existingCacheNode?.parallelRoutes),\n            navigatedAt,\n          }\n        } else if (hasReusablePrefetch && existingCacheNode) {\n          // No new data was sent from the server, but the existing cache node\n          // was prefetched, so we should reuse that.\n          newCacheNode = {\n            lazyData: existingCacheNode.lazyData,\n            rsc: existingCacheNode.rsc,\n            // This is a PPR-only field. Unlike the previous branch, since we're\n            // just cloning the existing cache node, we might as well keep the\n            // PPR value, if it exists.\n            prefetchRsc: existingCacheNode.prefetchRsc,\n            head: existingCacheNode.head,\n            prefetchHead: existingCacheNode.prefetchHead,\n            parallelRoutes: new Map(existingCacheNode.parallelRoutes),\n            loading: existingCacheNode.loading,\n          } as CacheNode\n        } else {\n          // No data available for this node. This will trigger a lazy fetch\n          // during render.\n          newCacheNode = {\n            lazyData: null,\n            rsc: null,\n            prefetchRsc: null,\n            head: null,\n            prefetchHead: null,\n            parallelRoutes: new Map(existingCacheNode?.parallelRoutes),\n            loading: null,\n            navigatedAt,\n          }\n        }\n\n        // Overrides the cache key with the new cache node.\n        parallelRouteCacheNode.set(cacheKey, newCacheNode)\n        // Traverse deeper to apply the head / fill lazy items till the head.\n        fillLazyItemsTillLeafWithHead(\n          navigatedAt,\n          newCacheNode,\n          existingCacheNode,\n          parallelRouteState,\n          parallelSeedData ? parallelSeedData : null,\n          head,\n          prefetchEntry\n        )\n\n        newCache.parallelRoutes.set(key, parallelRouteCacheNode)\n        continue\n      }\n    }\n\n    let newCacheNode: CacheNode\n    if (parallelSeedData !== null) {\n      // New data was sent from the server.\n      const seedNode = parallelSeedData[1]\n      const loading = parallelSeedData[3]\n      newCacheNode = {\n        lazyData: null,\n        rsc: seedNode,\n        prefetchRsc: null,\n        head: null,\n        prefetchHead: null,\n        parallelRoutes: new Map(),\n        loading,\n        navigatedAt,\n      }\n    } else {\n      // No data available for this node. This will trigger a lazy fetch\n      // during render.\n      newCacheNode = {\n        lazyData: null,\n        rsc: null,\n        prefetchRsc: null,\n        head: null,\n        prefetchHead: null,\n        parallelRoutes: new Map(),\n        loading: null,\n        navigatedAt,\n      }\n    }\n\n    const existingParallelRoutes = newCache.parallelRoutes.get(key)\n    if (existingParallelRoutes) {\n      existingParallelRoutes.set(cacheKey, newCacheNode)\n    } else {\n      newCache.parallelRoutes.set(key, new Map([[cacheKey, newCacheNode]]))\n    }\n\n    fillLazyItemsTillLeafWithHead(\n      navigatedAt,\n      newCacheNode,\n      undefined,\n      parallelRouteState,\n      parallelSeedData,\n      head,\n      prefetchEntry\n    )\n  }\n}\n","import type { CacheNode } from '../../../shared/lib/app-router-context.shared-runtime'\nimport type { FlightRouterState } from '../../../server/app-render/types'\nimport { createRouterCacheKey } from './create-router-cache-key'\n\n/**\n * Invalidate cache one level down from the router state.\n */\nexport function invalidateCacheByRouterState(\n  newCache: CacheNode,\n  existingCache: CacheNode,\n  routerState: FlightRouterState\n): void {\n  // Remove segment that we got data for so that it is filled in during rendering of rsc.\n  for (const key in routerState[1]) {\n    const segmentForParallelRoute = routerState[1][key][0]\n    const cacheKey = createRouterCacheKey(segmentForParallelRoute)\n    const existingParallelRoutesCacheNode =\n      existingCache.parallelRoutes.get(key)\n    if (existingParallelRoutesCacheNode) {\n      let parallelRouteCacheNode = new Map(existingParallelRoutesCacheNode)\n      parallelRouteCacheNode.delete(cacheKey)\n      newCache.parallelRoutes.set(key, parallelRouteCacheNode)\n    }\n  }\n}\n","import type { CacheNode } from '../../../shared/lib/app-router-context.shared-runtime'\nimport type { Segment } from '../../../server/app-render/types'\nimport { invalidateCacheByRouterState } from './invalidate-cache-by-router-state'\nimport { fillLazyItemsTillLeafWithHead } from './fill-lazy-items-till-leaf-with-head'\nimport { createRouterCacheKey } from './create-router-cache-key'\nimport type { PrefetchCacheEntry } from './router-reducer-types'\nimport { PAGE_SEGMENT_KEY } from '../../../shared/lib/segment'\nimport type { NormalizedFlightData } from '../../flight-data-helpers'\n\n/**\n * Common logic for filling cache with new sub tree data.\n */\nfunction fillCacheHelper(\n  navigatedAt: number,\n  newCache: CacheNode,\n  existingCache: CacheNode,\n  flightData: NormalizedFlightData,\n  prefetchEntry: PrefetchCacheEntry | undefined,\n  fillLazyItems: boolean\n): void {\n  const {\n    segmentPath,\n    seedData: cacheNodeSeedData,\n    tree: treePatch,\n    head,\n  } = flightData\n  let newCacheNode = newCache\n  let existingCacheNode = existingCache\n\n  for (let i = 0; i < segmentPath.length; i += 2) {\n    const parallelRouteKey: string = segmentPath[i]\n    const segment: Segment = segmentPath[i + 1]\n\n    // segmentPath is a repeating tuple of parallelRouteKey and segment\n    // we know we've hit the last entry we've reached our final pair\n    const isLastEntry = i === segmentPath.length - 2\n    const cacheKey = createRouterCacheKey(segment)\n\n    const existingChildSegmentMap =\n      existingCacheNode.parallelRoutes.get(parallelRouteKey)\n\n    if (!existingChildSegmentMap) {\n      // Bailout because the existing cache does not have the path to the leaf node\n      // Will trigger lazy fetch in layout-router because of missing segment\n      continue\n    }\n\n    let childSegmentMap = newCacheNode.parallelRoutes.get(parallelRouteKey)\n    if (!childSegmentMap || childSegmentMap === existingChildSegmentMap) {\n      childSegmentMap = new Map(existingChildSegmentMap)\n      newCacheNode.parallelRoutes.set(parallelRouteKey, childSegmentMap)\n    }\n\n    const existingChildCacheNode = existingChildSegmentMap.get(cacheKey)\n    let childCacheNode = childSegmentMap.get(cacheKey)\n\n    if (isLastEntry) {\n      if (\n        cacheNodeSeedData &&\n        (!childCacheNode ||\n          !childCacheNode.lazyData ||\n          childCacheNode === existingChildCacheNode)\n      ) {\n        const incomingSegment = cacheNodeSeedData[0]\n        const rsc = cacheNodeSeedData[1]\n        const loading = cacheNodeSeedData[3]\n\n        childCacheNode = {\n          lazyData: null,\n          // When `fillLazyItems` is false, we only want to fill the RSC data for the layout,\n          // not the page segment.\n          rsc:\n            fillLazyItems || incomingSegment !== PAGE_SEGMENT_KEY ? rsc : null,\n          prefetchRsc: null,\n          head: null,\n          prefetchHead: null,\n          loading,\n          parallelRoutes:\n            fillLazyItems && existingChildCacheNode\n              ? new Map(existingChildCacheNode.parallelRoutes)\n              : new Map(),\n          navigatedAt,\n        }\n\n        if (existingChildCacheNode && fillLazyItems) {\n          invalidateCacheByRouterState(\n            childCacheNode,\n            existingChildCacheNode,\n            treePatch\n          )\n        }\n        if (fillLazyItems) {\n          fillLazyItemsTillLeafWithHead(\n            navigatedAt,\n            childCacheNode,\n            existingChildCacheNode,\n            treePatch,\n            cacheNodeSeedData,\n            head,\n            prefetchEntry\n          )\n        }\n\n        childSegmentMap.set(cacheKey, childCacheNode)\n      }\n      continue\n    }\n\n    if (!childCacheNode || !existingChildCacheNode) {\n      // Bailout because the existing cache does not have the path to the leaf node\n      // Will trigger lazy fetch in layout-router because of missing segment\n      continue\n    }\n\n    if (childCacheNode === existingChildCacheNode) {\n      childCacheNode = {\n        lazyData: childCacheNode.lazyData,\n        rsc: childCacheNode.rsc,\n        prefetchRsc: childCacheNode.prefetchRsc,\n        head: childCacheNode.head,\n        prefetchHead: childCacheNode.prefetchHead,\n        parallelRoutes: new Map(childCacheNode.parallelRoutes),\n        loading: childCacheNode.loading,\n      } as CacheNode\n      childSegmentMap.set(cacheKey, childCacheNode)\n    }\n\n    // Move deeper into the cache nodes\n    newCacheNode = childCacheNode\n    existingCacheNode = existingChildCacheNode\n  }\n}\n\n/**\n * Fill cache with rsc based on flightDataPath\n */\nexport function fillCacheWithNewSubTreeData(\n  navigatedAt: number,\n  newCache: CacheNode,\n  existingCache: CacheNode,\n  flightData: NormalizedFlightData,\n  prefetchEntry?: PrefetchCacheEntry\n): void {\n  fillCacheHelper(\n    navigatedAt,\n    newCache,\n    existingCache,\n    flightData,\n    prefetchEntry,\n    true\n  )\n}\n\nexport function fillCacheWithNewSubTreeDataButOnlyLoading(\n  navigatedAt: number,\n  newCache: CacheNode,\n  existingCache: CacheNode,\n  flightData: NormalizedFlightData,\n  prefetchEntry?: PrefetchCacheEntry\n): void {\n  fillCacheHelper(\n    navigatedAt,\n    newCache,\n    existingCache,\n    flightData,\n    prefetchEntry,\n    false\n  )\n}\n","import type { CacheNode } from '../../../shared/lib/app-router-context.shared-runtime'\nimport { fillLazyItemsTillLeafWithHead } from './fill-lazy-items-till-leaf-with-head'\nimport { fillCacheWithNewSubTreeData } from './fill-cache-with-new-subtree-data'\nimport type { PrefetchCacheEntry } from './router-reducer-types'\nimport type { NormalizedFlightData } from '../../flight-data-helpers'\n\nexport function applyFlightData(\n  navigatedAt: number,\n  existingCache: CacheNode,\n  cache: CacheNode,\n  flightData: NormalizedFlightData,\n  prefetchEntry?: PrefetchCacheEntry\n): boolean {\n  // The one before last item is the router state tree patch\n  const { tree: treePatch, seedData, head, isRootRender } = flightData\n\n  // Handles case where prefetch only returns the router tree patch without rendered components.\n  if (seedData === null) {\n    return false\n  }\n\n  if (isRootRender) {\n    const rsc = seedData[1]\n    const loading = seedData[3]\n    cache.loading = loading\n    cache.rsc = rsc\n    // This is a PPR-only field. When PPR is enabled, we shouldn't hit\n    // this path during a navigation, but until PPR is fully implemented\n    // yet it's possible the existing node does have a non-null\n    // `prefetchRsc`. As an incremental step, we'll just de-opt to the\n    // old behavior — no PPR value.\n    cache.prefetchRsc = null\n    fillLazyItemsTillLeafWithHead(\n      navigatedAt,\n      cache,\n      existingCache,\n      treePatch,\n      seedData,\n      head,\n      prefetchEntry\n    )\n  } else {\n    // Copy rsc for the root node of the cache.\n    cache.rsc = existingCache.rsc\n    // This is a PPR-only field. Unlike the previous branch, since we're\n    // just cloning the existing cache node, we might as well keep the\n    // PPR value, if it exists.\n    cache.prefetchRsc = existingCache.prefetchRsc\n    cache.parallelRoutes = new Map(existingCache.parallelRoutes)\n    cache.loading = existingCache.loading\n    // Create a copy of the existing cache with the rsc applied.\n    fillCacheWithNewSubTreeData(\n      navigatedAt,\n      cache,\n      existingCache,\n      flightData,\n      prefetchEntry\n    )\n  }\n\n  return true\n}\n","import type { FlightRouterState } from '../../../server/app-render/types'\nimport type { CacheNode } from '../../../shared/lib/app-router-context.shared-runtime'\nimport type { AppRouterState } from './router-reducer-types'\nimport { applyFlightData } from './apply-flight-data'\nimport { fetchServerResponse } from './fetch-server-response'\nimport { PAGE_SEGMENT_KEY } from '../../../shared/lib/segment'\n\ninterface RefreshInactiveParallelSegments {\n  navigatedAt: number\n  state: AppRouterState\n  updatedTree: FlightRouterState\n  updatedCache: CacheNode\n  includeNextUrl: boolean\n  canonicalUrl: string\n}\n\n/**\n * Refreshes inactive segments that are still in the current FlightRouterState.\n * A segment is considered \"inactive\" when the server response indicates it didn't match to a page component.\n * This happens during a soft-navigation, where the server will want to patch in the segment\n * with the \"default\" component, but we explicitly ignore the server in this case\n * and keep the existing state for that segment. New data for inactive segments are inherently\n * not part of the server response when we patch the tree, because they were associated with a response\n * from an earlier navigation/request. For each segment, once it becomes \"active\", we encode the URL that provided\n * the data for it. This function traverses parallel routes looking for these markers so that it can re-fetch\n * and patch the new data into the tree.\n */\nexport async function refreshInactiveParallelSegments(\n  options: RefreshInactiveParallelSegments\n) {\n  const fetchedSegments = new Set<string>()\n  await refreshInactiveParallelSegmentsImpl({\n    ...options,\n    rootTree: options.updatedTree,\n    fetchedSegments,\n  })\n}\n\nasync function refreshInactiveParallelSegmentsImpl({\n  navigatedAt,\n  state,\n  updatedTree,\n  updatedCache,\n  includeNextUrl,\n  fetchedSegments,\n  rootTree = updatedTree,\n  canonicalUrl,\n}: RefreshInactiveParallelSegments & {\n  fetchedSegments: Set<string>\n  rootTree: FlightRouterState\n}) {\n  const [, parallelRoutes, refetchPath, refetchMarker] = updatedTree\n  const fetchPromises = []\n\n  if (\n    refetchPath &&\n    refetchPath !== canonicalUrl &&\n    refetchMarker === 'refresh' &&\n    // it's possible for the tree to contain multiple segments that contain data at the same URL\n    // we keep track of them so we can dedupe the requests\n    !fetchedSegments.has(refetchPath)\n  ) {\n    fetchedSegments.add(refetchPath) // Mark this URL as fetched\n\n    // Eagerly kick off the fetch for the refetch path & the parallel routes. This should be fine to do as they each operate\n    // independently on their own cache nodes, and `applyFlightData` will copy anything it doesn't care about from the existing cache.\n    const fetchPromise = fetchServerResponse(\n      new URL(refetchPath, location.origin),\n      {\n        // refetch from the root of the updated tree, otherwise it will be scoped to the current segment\n        // and might not contain the data we need to patch in interception route data (such as dynamic params from a previous segment)\n        flightRouterState: [rootTree[0], rootTree[1], rootTree[2], 'refetch'],\n        nextUrl: includeNextUrl ? state.nextUrl : null,\n      }\n    ).then(({ flightData }) => {\n      if (typeof flightData !== 'string') {\n        for (const flightDataPath of flightData) {\n          // we only pass the new cache as this function is called after clearing the router cache\n          // and filling in the new page data from the server. Meaning the existing cache is actually the cache that's\n          // just been created & has been written to, but hasn't been \"committed\" yet.\n          applyFlightData(\n            navigatedAt,\n            updatedCache,\n            updatedCache,\n            flightDataPath\n          )\n        }\n      } else {\n        // When flightData is a string, it suggests that the server response should have triggered an MPA navigation\n        // I'm not 100% sure of this decision, but it seems unlikely that we'd want to introduce a redirect side effect\n        // when refreshing on-screen data, so handling this has been ommitted.\n      }\n    })\n\n    fetchPromises.push(fetchPromise)\n  }\n\n  for (const key in parallelRoutes) {\n    const parallelFetchPromise = refreshInactiveParallelSegmentsImpl({\n      navigatedAt,\n      state,\n      updatedTree: parallelRoutes[key],\n      updatedCache,\n      includeNextUrl,\n      fetchedSegments,\n      rootTree,\n      canonicalUrl,\n    })\n\n    fetchPromises.push(parallelFetchPromise)\n  }\n\n  await Promise.all(fetchPromises)\n}\n\n/**\n * Walks the current parallel segments to determine if they are \"active\".\n * An active parallel route will have a `__PAGE__` segment in the FlightRouterState.\n * As opposed to a `__DEFAULT__` segment, which means there was no match for that parallel route.\n * We add a special marker here so that we know how to refresh its data when the router is revalidated.\n */\nexport function addRefreshMarkerToActiveParallelSegments(\n  tree: FlightRouterState,\n  path: string\n) {\n  const [segment, parallelRoutes, , refetchMarker] = tree\n  // a page segment might also contain concatenated search params, so we do a partial match on the key\n  if (segment.includes(PAGE_SEGMENT_KEY) && refetchMarker !== 'refresh') {\n    tree[2] = path\n    tree[3] = 'refresh'\n  }\n\n  for (const key in parallelRoutes) {\n    addRefreshMarkerToActiveParallelSegments(parallelRoutes[key], path)\n  }\n}\n","import type {\n  FlightRouterState,\n  FlightSegmentPath,\n} from '../../../server/app-render/types'\nimport { DEFAULT_SEGMENT_KEY } from '../../../shared/lib/segment'\nimport { getNextFlightSegmentPath } from '../../flight-data-helpers'\nimport { matchSegment } from '../match-segments'\nimport { addRefreshMarkerToActiveParallelSegments } from './refetch-inactive-parallel-segments'\n\n/**\n * Deep merge of the two router states. Parallel route keys are preserved if the patch doesn't have them.\n */\nfunction applyPatch(\n  initialTree: FlightRouterState,\n  patchTree: FlightRouterState\n): FlightRouterState {\n  const [initialSegment, initialParallelRoutes] = initialTree\n  const [patchSegment, patchParallelRoutes] = patchTree\n\n  // if the applied patch segment is __DEFAULT__ then it can be ignored in favor of the initial tree\n  // this is because the __DEFAULT__ segment is used as a placeholder on navigation\n  if (\n    patchSegment === DEFAULT_SEGMENT_KEY &&\n    initialSegment !== DEFAULT_SEGMENT_KEY\n  ) {\n    return initialTree\n  }\n\n  if (matchSegment(initialSegment, patchSegment)) {\n    const newParallelRoutes: FlightRouterState[1] = {}\n    for (const key in initialParallelRoutes) {\n      const isInPatchTreeParallelRoutes =\n        typeof patchParallelRoutes[key] !== 'undefined'\n      if (isInPatchTreeParallelRoutes) {\n        newParallelRoutes[key] = applyPatch(\n          initialParallelRoutes[key],\n          patchParallelRoutes[key]\n        )\n      } else {\n        newParallelRoutes[key] = initialParallelRoutes[key]\n      }\n    }\n\n    for (const key in patchParallelRoutes) {\n      if (newParallelRoutes[key]) {\n        continue\n      }\n\n      newParallelRoutes[key] = patchParallelRoutes[key]\n    }\n\n    const tree: FlightRouterState = [initialSegment, newParallelRoutes]\n\n    // Copy over the existing tree\n    if (initialTree[2]) {\n      tree[2] = initialTree[2]\n    }\n\n    if (initialTree[3]) {\n      tree[3] = initialTree[3]\n    }\n\n    if (initialTree[4]) {\n      tree[4] = initialTree[4]\n    }\n\n    return tree\n  }\n\n  return patchTree\n}\n\n/**\n * Apply the router state from the Flight response, but skip patching default segments.\n * Useful for patching the router cache when navigating, where we persist the existing default segment if there isn't a new one.\n * Creates a new router state tree.\n */\nexport function applyRouterStatePatchToTree(\n  flightSegmentPath: FlightSegmentPath,\n  flightRouterState: FlightRouterState,\n  treePatch: FlightRouterState,\n  path: string\n): FlightRouterState | null {\n  const [segment, parallelRoutes, url, refetch, isRootLayout] =\n    flightRouterState\n\n  // Root refresh\n  if (flightSegmentPath.length === 1) {\n    const tree: FlightRouterState = applyPatch(flightRouterState, treePatch)\n\n    addRefreshMarkerToActiveParallelSegments(tree, path)\n\n    return tree\n  }\n\n  const [currentSegment, parallelRouteKey] = flightSegmentPath\n\n  // Tree path returned from the server should always match up with the current tree in the browser\n  if (!matchSegment(currentSegment, segment)) {\n    return null\n  }\n\n  const lastSegment = flightSegmentPath.length === 2\n\n  let parallelRoutePatch\n  if (lastSegment) {\n    parallelRoutePatch = applyPatch(parallelRoutes[parallelRouteKey], treePatch)\n  } else {\n    parallelRoutePatch = applyRouterStatePatchToTree(\n      getNextFlightSegmentPath(flightSegmentPath),\n      parallelRoutes[parallelRouteKey],\n      treePatch,\n      path\n    )\n\n    if (parallelRoutePatch === null) {\n      return null\n    }\n  }\n\n  const tree: FlightRouterState = [\n    flightSegmentPath[0],\n    {\n      ...parallelRoutes,\n      [parallelRouteKey]: parallelRoutePatch,\n    },\n    url,\n    refetch,\n  ]\n\n  // Current segment is the root layout\n  if (isRootLayout) {\n    tree[4] = true\n  }\n\n  addRefreshMarkerToActiveParallelSegments(tree, path)\n\n  return tree\n}\n","import type {\n  FlightRouterState,\n  FlightDataPath,\n  Segment,\n} from '../../../server/app-render/types'\nimport { getNextFlightSegmentPath } from '../../flight-data-helpers'\nimport { matchSegment } from '../match-segments'\n\n// TODO-APP: flightSegmentPath will be empty in case of static response, needs to be handled.\nexport function shouldHardNavigate(\n  flightSegmentPath: FlightDataPath,\n  flightRouterState: FlightRouterState\n): boolean {\n  const [segment, parallelRoutes] = flightRouterState\n  // TODO-APP: Check if `as` can be replaced.\n  const [currentSegment, parallelRouteKey] = flightSegmentPath as [\n    Segment,\n    string,\n  ]\n\n  // Check if current segment matches the existing segment.\n  if (!matchSegment(currentSegment, segment)) {\n    // If dynamic parameter in tree doesn't match up with segment path a hard navigation is triggered.\n    if (Array.isArray(currentSegment)) {\n      return true\n    }\n\n    // If the existing segment did not match soft navigation is triggered.\n    return false\n  }\n  const lastSegment = flightSegmentPath.length <= 2\n\n  if (lastSegment) {\n    return false\n  }\n\n  return shouldHardNavigate(\n    getNextFlightSegmentPath(flightSegmentPath),\n    parallelRoutes[parallelRouteKey]\n  )\n}\n","import type { FlightRouterState } from '../../../server/app-render/types'\n\nexport function isNavigatingToNewRootLayout(\n  currentTree: FlightRouterState,\n  nextTree: FlightRouterState\n): boolean {\n  // Compare segments\n  const currentTreeSegment = currentTree[0]\n  const nextTreeSegment = nextTree[0]\n\n  // If any segment is different before we find the root layout, the root layout has changed.\n  // E.g. /same/(group1)/layout.js -> /same/(group2)/layout.js\n  // First segment is 'same' for both, keep looking. (group1) changed to (group2) before the root layout was found, it must have changed.\n  if (Array.isArray(currentTreeSegment) && Array.isArray(nextTreeSegment)) {\n    // Compare dynamic param name and type but ignore the value, different values would not affect the current root layout\n    // /[name] - /slug1 and /slug2, both values (slug1 & slug2) still has the same layout /[name]/layout.js\n    if (\n      currentTreeSegment[0] !== nextTreeSegment[0] ||\n      currentTreeSegment[2] !== nextTreeSegment[2]\n    ) {\n      return true\n    }\n  } else if (currentTreeSegment !== nextTreeSegment) {\n    return true\n  }\n\n  // Current tree root layout found\n  if (currentTree[4]) {\n    // If the next tree doesn't have the root layout flag, it must have changed.\n    return !nextTree[4]\n  }\n  // Current tree didn't have its root layout here, must have changed.\n  if (nextTree[4]) {\n    return true\n  }\n  // We can't assume it's `parallelRoutes.children` here in case the root layout is `app/@something/layout.js`\n  // But it's not possible to be more than one parallelRoutes before the root layout is found\n  // TODO-APP: change to traverse all parallel routes\n  const currentTreeChild = Object.values(currentTree[1])[0]\n  const nextTreeChild = Object.values(nextTree[1])[0]\n  if (!currentTreeChild || !nextTreeChild) return true\n  return isNavigatingToNewRootLayout(currentTreeChild, nextTreeChild)\n}\n","/**\n * For a given page path, this function ensures that there is a leading slash.\n * If there is not a leading slash, one is added, otherwise it is noop.\n */\nexport function ensureLeadingSlash(path: string) {\n  return path.startsWith('/') ? path : `/${path}`\n}\n","import { ensureLeadingSlash } from '../../page-path/ensure-leading-slash'\nimport { isGroupSegment } from '../../segment'\n\n/**\n * Normalizes an app route so it represents the actual request path. Essentially\n * performing the following transformations:\n *\n * - `/(dashboard)/user/[id]/page` to `/user/[id]`\n * - `/(dashboard)/account/page` to `/account`\n * - `/user/[id]/page` to `/user/[id]`\n * - `/account/page` to `/account`\n * - `/page` to `/`\n * - `/(dashboard)/user/[id]/route` to `/user/[id]`\n * - `/(dashboard)/account/route` to `/account`\n * - `/user/[id]/route` to `/user/[id]`\n * - `/account/route` to `/account`\n * - `/route` to `/`\n * - `/` to `/`\n *\n * @param route the app route to normalize\n * @returns the normalized pathname\n */\nexport function normalizeAppPath(route: string) {\n  return ensureLeadingSlash(\n    route.split('/').reduce((pathname, segment, index, segments) => {\n      // Empty segments are ignored.\n      if (!segment) {\n        return pathname\n      }\n\n      // Groups are ignored.\n      if (isGroupSegment(segment)) {\n        return pathname\n      }\n\n      // Parallel segments are ignored.\n      if (segment[0] === '@') {\n        return pathname\n      }\n\n      // The last segment (if it's a leaf) should be ignored.\n      if (\n        (segment === 'page' || segment === 'route') &&\n        index === segments.length - 1\n      ) {\n        return pathname\n      }\n\n      return `${pathname}/${segment}`\n    }, '')\n  )\n}\n\n/**\n * Strips the `.rsc` extension if it's in the pathname.\n * Since this function is used on full urls it checks `?` for searchParams handling.\n */\nexport function normalizeRscURL(url: string) {\n  return url.replace(\n    /\\.rsc($|\\?)/,\n    // $1 ensures `?` is preserved\n    '$1'\n  )\n}\n","import { normalizeAppPath } from './app-paths'\n\n// order matters here, the first match will be used\nexport const INTERCEPTION_ROUTE_MARKERS = [\n  '(..)(..)',\n  '(.)',\n  '(..)',\n  '(...)',\n] as const\n\nexport function isInterceptionRouteAppPath(path: string): boolean {\n  // TODO-APP: add more serious validation\n  return (\n    path\n      .split('/')\n      .find((segment) =>\n        INTERCEPTION_ROUTE_MARKERS.find((m) => segment.startsWith(m))\n      ) !== undefined\n  )\n}\n\nexport function extractInterceptionRouteInformation(path: string) {\n  let interceptingRoute: string | undefined,\n    marker: (typeof INTERCEPTION_ROUTE_MARKERS)[number] | undefined,\n    interceptedRoute: string | undefined\n\n  for (const segment of path.split('/')) {\n    marker = INTERCEPTION_ROUTE_MARKERS.find((m) => segment.startsWith(m))\n    if (marker) {\n      ;[interceptingRoute, interceptedRoute] = path.split(marker, 2)\n      break\n    }\n  }\n\n  if (!interceptingRoute || !marker || !interceptedRoute) {\n    throw new Error(\n      `Invalid interception route: ${path}. Must be in the format /<intercepting route>/(..|...|..)(..)/<intercepted route>`\n    )\n  }\n\n  interceptingRoute = normalizeAppPath(interceptingRoute) // normalize the path, e.g. /(blog)/feed -> /feed\n\n  switch (marker) {\n    case '(.)':\n      // (.) indicates that we should match with sibling routes, so we just need to append the intercepted route to the intercepting route\n      if (interceptingRoute === '/') {\n        interceptedRoute = `/${interceptedRoute}`\n      } else {\n        interceptedRoute = interceptingRoute + '/' + interceptedRoute\n      }\n      break\n    case '(..)':\n      // (..) indicates that we should match at one level up, so we need to remove the last segment of the intercepting route\n      if (interceptingRoute === '/') {\n        throw new Error(\n          `Invalid interception route: ${path}. Cannot use (..) marker at the root level, use (.) instead.`\n        )\n      }\n      interceptedRoute = interceptingRoute\n        .split('/')\n        .slice(0, -1)\n        .concat(interceptedRoute)\n        .join('/')\n      break\n    case '(...)':\n      // (...) will match the route segment in the root directory, so we need to use the root directory to prepend the intercepted route\n      interceptedRoute = '/' + interceptedRoute\n      break\n    case '(..)(..)':\n      // (..)(..) indicates that we should match at two levels up, so we need to remove the last two segments of the intercepting route\n\n      const splitInterceptingRoute = interceptingRoute.split('/')\n      if (splitInterceptingRoute.length <= 2) {\n        throw new Error(\n          `Invalid interception route: ${path}. Cannot use (..)(..) marker at the root level or one level up.`\n        )\n      }\n\n      interceptedRoute = splitInterceptingRoute\n        .slice(0, -2)\n        .concat(interceptedRoute)\n        .join('/')\n      break\n    default:\n      throw new Error('Invariant: unexpected marker')\n  }\n\n  return { interceptingRoute, interceptedRoute }\n}\n","import type {\n  FlightRouterState,\n  Segment,\n} from '../../../server/app-render/types'\nimport { INTERCEPTION_ROUTE_MARKERS } from '../../../shared/lib/router/utils/interception-routes'\nimport type { Params } from '../../../server/request/params'\nimport {\n  isGroupSegment,\n  DEFAULT_SEGMENT_KEY,\n  PAGE_SEGMENT_KEY,\n} from '../../../shared/lib/segment'\nimport { matchSegment } from '../match-segments'\n\nconst removeLeadingSlash = (segment: string): string => {\n  return segment[0] === '/' ? segment.slice(1) : segment\n}\n\nconst segmentToPathname = (segment: Segment): string => {\n  if (typeof segment === 'string') {\n    // 'children' is not a valid path -- it's technically a parallel route that corresponds with the current segment's page\n    // if we don't skip it, then the computed pathname might be something like `/children` which doesn't make sense.\n    if (segment === 'children') return ''\n\n    return segment\n  }\n\n  return segment[1]\n}\n\nfunction normalizeSegments(segments: string[]): string {\n  return (\n    segments.reduce((acc, segment) => {\n      segment = removeLeadingSlash(segment)\n      if (segment === '' || isGroupSegment(segment)) {\n        return acc\n      }\n\n      return `${acc}/${segment}`\n    }, '') || '/'\n  )\n}\n\nexport function extractPathFromFlightRouterState(\n  flightRouterState: FlightRouterState\n): string | undefined {\n  const segment = Array.isArray(flightRouterState[0])\n    ? flightRouterState[0][1]\n    : flightRouterState[0]\n\n  if (\n    segment === DEFAULT_SEGMENT_KEY ||\n    INTERCEPTION_ROUTE_MARKERS.some((m) => segment.startsWith(m))\n  )\n    return undefined\n\n  if (segment.startsWith(PAGE_SEGMENT_KEY)) return ''\n\n  const segments = [segmentToPathname(segment)]\n  const parallelRoutes = flightRouterState[1] ?? {}\n\n  const childrenPath = parallelRoutes.children\n    ? extractPathFromFlightRouterState(parallelRoutes.children)\n    : undefined\n\n  if (childrenPath !== undefined) {\n    segments.push(childrenPath)\n  } else {\n    for (const [key, value] of Object.entries(parallelRoutes)) {\n      if (key === 'children') continue\n\n      const childPath = extractPathFromFlightRouterState(value)\n\n      if (childPath !== undefined) {\n        segments.push(childPath)\n      }\n    }\n  }\n\n  return normalizeSegments(segments)\n}\n\nfunction computeChangedPathImpl(\n  treeA: FlightRouterState,\n  treeB: FlightRouterState\n): string | null {\n  const [segmentA, parallelRoutesA] = treeA\n  const [segmentB, parallelRoutesB] = treeB\n\n  const normalizedSegmentA = segmentToPathname(segmentA)\n  const normalizedSegmentB = segmentToPathname(segmentB)\n\n  if (\n    INTERCEPTION_ROUTE_MARKERS.some(\n      (m) =>\n        normalizedSegmentA.startsWith(m) || normalizedSegmentB.startsWith(m)\n    )\n  ) {\n    return ''\n  }\n\n  if (!matchSegment(segmentA, segmentB)) {\n    // once we find where the tree changed, we compute the rest of the path by traversing the tree\n    return extractPathFromFlightRouterState(treeB) ?? ''\n  }\n\n  for (const parallelRouterKey in parallelRoutesA) {\n    if (parallelRoutesB[parallelRouterKey]) {\n      const changedPath = computeChangedPathImpl(\n        parallelRoutesA[parallelRouterKey],\n        parallelRoutesB[parallelRouterKey]\n      )\n      if (changedPath !== null) {\n        return `${segmentToPathname(segmentB)}/${changedPath}`\n      }\n    }\n  }\n\n  return null\n}\n\nexport function computeChangedPath(\n  treeA: FlightRouterState,\n  treeB: FlightRouterState\n): string | null {\n  const changedPath = computeChangedPathImpl(treeA, treeB)\n\n  if (changedPath == null || changedPath === '/') {\n    return changedPath\n  }\n\n  // lightweight normalization to remove route groups\n  return normalizeSegments(changedPath.split('/'))\n}\n\n/**\n * Recursively extracts dynamic parameters from FlightRouterState.\n */\nexport function getSelectedParams(\n  currentTree: FlightRouterState,\n  params: Params = {}\n): Params {\n  const parallelRoutes = currentTree[1]\n\n  for (const parallelRoute of Object.values(parallelRoutes)) {\n    const segment = parallelRoute[0]\n    const isDynamicParameter = Array.isArray(segment)\n    const segmentValue = isDynamicParameter ? segment[1] : segment\n    if (!segmentValue || segmentValue.startsWith(PAGE_SEGMENT_KEY)) continue\n\n    // Ensure catchAll and optional catchall are turned into an array\n    const isCatchAll =\n      isDynamicParameter && (segment[2] === 'c' || segment[2] === 'oc')\n\n    if (isCatchAll) {\n      params[segment[0]] = segment[1].split('/')\n    } else if (isDynamicParameter) {\n      params[segment[0]] = segment[1]\n    }\n\n    params = getSelectedParams(parallelRoute, params)\n  }\n\n  return params\n}\n","import { computeChangedPath } from './compute-changed-path'\nimport type {\n  Mutable,\n  ReadonlyReducerState,\n  ReducerState,\n} from './router-reducer-types'\n\nfunction isNotUndefined<T>(value: T): value is Exclude<T, undefined> {\n  return typeof value !== 'undefined'\n}\n\nexport function handleMutable(\n  state: ReadonlyReducerState,\n  mutable: Mutable\n): ReducerState {\n  // shouldScroll is true by default, can override to false.\n  const shouldScroll = mutable.shouldScroll ?? true\n\n  let nextUrl = state.nextUrl\n\n  if (isNotUndefined(mutable.patchedTree)) {\n    // If we received a patched tree, we need to compute the changed path.\n    const changedPath = computeChangedPath(state.tree, mutable.patchedTree)\n    if (changedPath) {\n      // If the tree changed, we need to update the nextUrl\n      nextUrl = changedPath\n    } else if (!nextUrl) {\n      // if the tree ends up being the same (ie, no changed path), and we don't have a nextUrl, then we should use the canonicalUrl\n      nextUrl = state.canonicalUrl\n    }\n    // otherwise this will be a no-op and continue to use the existing nextUrl\n  }\n\n  return {\n    // Set href.\n    canonicalUrl: isNotUndefined(mutable.canonicalUrl)\n      ? mutable.canonicalUrl === state.canonicalUrl\n        ? state.canonicalUrl\n        : mutable.canonicalUrl\n      : state.canonicalUrl,\n    pushRef: {\n      pendingPush: isNotUndefined(mutable.pendingPush)\n        ? mutable.pendingPush\n        : state.pushRef.pendingPush,\n      mpaNavigation: isNotUndefined(mutable.mpaNavigation)\n        ? mutable.mpaNavigation\n        : state.pushRef.mpaNavigation,\n      preserveCustomHistoryState: isNotUndefined(\n        mutable.preserveCustomHistoryState\n      )\n        ? mutable.preserveCustomHistoryState\n        : state.pushRef.preserveCustomHistoryState,\n    },\n    // All navigation requires scroll and focus management to trigger.\n    focusAndScrollRef: {\n      apply: shouldScroll\n        ? isNotUndefined(mutable?.scrollableSegments)\n          ? true\n          : state.focusAndScrollRef.apply\n        : // If shouldScroll is false then we should not apply scroll and focus management.\n          false,\n      onlyHashChange: mutable.onlyHashChange || false,\n      hashFragment: shouldScroll\n        ? // Empty hash should trigger default behavior of scrolling layout into view.\n          // #top is handled in layout-router.\n          mutable.hashFragment && mutable.hashFragment !== ''\n          ? // Remove leading # and decode hash to make non-latin hashes work.\n            decodeURIComponent(mutable.hashFragment.slice(1))\n          : state.focusAndScrollRef.hashFragment\n        : // If shouldScroll is false then we should not apply scroll and focus management.\n          null,\n      segmentPaths: shouldScroll\n        ? mutable?.scrollableSegments ?? state.focusAndScrollRef.segmentPaths\n        : // If shouldScroll is false then we should not apply scroll and focus management.\n          [],\n    },\n    // Apply cache.\n    cache: mutable.cache ? mutable.cache : state.cache,\n    prefetchCache: mutable.prefetchCache\n      ? mutable.prefetchCache\n      : state.prefetchCache,\n    // Apply patched router state.\n    tree: isNotUndefined(mutable.patchedTree)\n      ? mutable.patchedTree\n      : state.tree,\n    nextUrl,\n  }\n}\n","\"use strict\";\n\nfunction _class_private_field_loose_base(receiver, privateKey) {\n    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n        throw new TypeError(\"attempted to use private field on non-instance\");\n    }\n\n    return receiver;\n}\nexports._ = _class_private_field_loose_base;\n","\"use strict\";\n\nvar id = 0;\n\nfunction _class_private_field_loose_key(name) {\n    return \"__private_\" + id++ + \"_\" + name;\n}\nexports._ = _class_private_field_loose_key;\n","/*\n    This is a simple promise queue that allows you to limit the number of concurrent promises\n    that are running at any given time. It's used to limit the number of concurrent\n    prefetch requests that are being made to the server but could be used for other\n    things as well.\n*/\nexport class PromiseQueue {\n  #maxConcurrency: number\n  #runningCount: number\n  #queue: Array<{\n    promiseFn: Promise<any>\n    task: () => void\n  }>\n\n  constructor(maxConcurrency = 5) {\n    this.#maxConcurrency = maxConcurrency\n    this.#runningCount = 0\n    this.#queue = []\n  }\n\n  enqueue<T>(promiseFn: () => Promise<T>): Promise<T> {\n    let taskResolve: (value: T | PromiseLike<T>) => void\n    let taskReject: (reason?: any) => void\n\n    const taskPromise = new Promise((resolve, reject) => {\n      taskResolve = resolve\n      taskReject = reject\n    }) as Promise<T>\n\n    const task = async () => {\n      try {\n        this.#runningCount++\n        const result = await promiseFn()\n        taskResolve(result)\n      } catch (error) {\n        taskReject(error)\n      } finally {\n        this.#runningCount--\n        this.#processNext()\n      }\n    }\n\n    const enqueueResult = { promiseFn: taskPromise, task }\n    // wonder if we should take a LIFO approach here\n    this.#queue.push(enqueueResult)\n    this.#processNext()\n\n    return taskPromise\n  }\n\n  bump(promiseFn: Promise<any>) {\n    const index = this.#queue.findIndex((item) => item.promiseFn === promiseFn)\n\n    if (index > -1) {\n      const bumpedItem = this.#queue.splice(index, 1)[0]\n      this.#queue.unshift(bumpedItem)\n      this.#processNext(true)\n    }\n  }\n\n  #processNext(forced = false) {\n    if (\n      (this.#runningCount < this.#maxConcurrency || forced) &&\n      this.#queue.length > 0\n    ) {\n      this.#queue.shift()?.task()\n    }\n  }\n}\n","import {\n  fetchServerResponse,\n  type FetchServerResponseResult,\n} from './fetch-server-response'\nimport {\n  PrefetchCacheEntryStatus,\n  type PrefetchCacheEntry,\n  PrefetchKind,\n  type ReadonlyReducerState,\n} from './router-reducer-types'\nimport { prefetchQueue } from './reducers/prefetch-reducer'\n\nconst INTERCEPTION_CACHE_KEY_MARKER = '%'\n\nexport type AliasedPrefetchCacheEntry = PrefetchCacheEntry & {\n  /** This is a special property that indicates a prefetch entry associated with a different URL\n   * was returned rather than the requested URL. This signals to the router that it should only\n   * apply the part that doesn't depend on searchParams (specifically the loading state).\n   */\n  aliased?: boolean\n}\n\n/**\n * Creates a cache key for the router prefetch cache\n *\n * @param url - The URL being navigated to\n * @param nextUrl - an internal URL, primarily used for handling rewrites. Defaults to '/'.\n * @return The generated prefetch cache key.\n */\nfunction createPrefetchCacheKeyImpl(\n  url: URL,\n  includeSearchParams: boolean,\n  prefix?: string | null\n) {\n  // Initially we only use the pathname as the cache key. We don't want to include\n  // search params so that multiple URLs with the same search parameter can re-use\n  // loading states.\n  let pathnameFromUrl = url.pathname\n\n  // RSC responses can differ based on search params, specifically in the case where we aren't\n  // returning a partial response (ie with `PrefetchKind.AUTO`).\n  // In the auto case, since loading.js & layout.js won't have access to search params,\n  // we can safely re-use that cache entry. But for full prefetches, we should not\n  // re-use the cache entry as the response may differ.\n  if (includeSearchParams) {\n    // if we have a full prefetch, we can include the search param in the key,\n    // as we'll be getting back a full response. The server might have read the search\n    // params when generating the full response.\n    pathnameFromUrl += url.search\n  }\n\n  if (prefix) {\n    return `${prefix}${INTERCEPTION_CACHE_KEY_MARKER}${pathnameFromUrl}`\n  }\n\n  return pathnameFromUrl\n}\n\nfunction createPrefetchCacheKey(\n  url: URL,\n  kind: PrefetchKind | undefined,\n  nextUrl?: string | null\n) {\n  return createPrefetchCacheKeyImpl(url, kind === PrefetchKind.FULL, nextUrl)\n}\n\nfunction getExistingCacheEntry(\n  url: URL,\n  kind: PrefetchKind = PrefetchKind.TEMPORARY,\n  nextUrl: string | null,\n  prefetchCache: Map<string, PrefetchCacheEntry>,\n  allowAliasing: boolean\n): AliasedPrefetchCacheEntry | undefined {\n  // We first check if there's a more specific interception route prefetch entry\n  // This is because when we detect a prefetch that corresponds with an interception route, we prefix it with nextUrl (see `createPrefetchCacheKey`)\n  // to avoid conflicts with other pages that may have the same URL but render different things depending on the `Next-URL` header.\n  for (const maybeNextUrl of [nextUrl, null]) {\n    const cacheKeyWithParams = createPrefetchCacheKeyImpl(\n      url,\n      true,\n      maybeNextUrl\n    )\n    const cacheKeyWithoutParams = createPrefetchCacheKeyImpl(\n      url,\n      false,\n      maybeNextUrl\n    )\n\n    // First, we check if we have a cache entry that exactly matches the URL\n    const cacheKeyToUse = url.search\n      ? cacheKeyWithParams\n      : cacheKeyWithoutParams\n\n    const existingEntry = prefetchCache.get(cacheKeyToUse)\n    if (existingEntry && allowAliasing) {\n      // We know we're returning an aliased entry when the pathname matches but the search params don't,\n      const isAliased =\n        existingEntry.url.pathname === url.pathname &&\n        existingEntry.url.search !== url.search\n\n      if (isAliased) {\n        return {\n          ...existingEntry,\n          aliased: true,\n        }\n      }\n\n      return existingEntry\n    }\n\n    // If the request contains search params, and we're not doing a full prefetch, we can return the\n    // param-less entry if it exists.\n    // This is technically covered by the check at the bottom of this function, which iterates over cache entries,\n    // but lets us arrive there quicker in the param-full case.\n    const entryWithoutParams = prefetchCache.get(cacheKeyWithoutParams)\n    if (\n      process.env.NODE_ENV !== 'development' &&\n      allowAliasing &&\n      url.search &&\n      kind !== PrefetchKind.FULL &&\n      entryWithoutParams &&\n      // We shouldn't return the aliased entry if it was relocated to a new cache key.\n      // Since it's rewritten, it could respond with a completely different loading state.\n      !entryWithoutParams.key.includes(INTERCEPTION_CACHE_KEY_MARKER)\n    ) {\n      return { ...entryWithoutParams, aliased: true }\n    }\n  }\n\n  // If we've gotten to this point, we didn't find a specific cache entry that matched\n  // the request URL.\n  // We attempt a partial match by checking if there's a cache entry with the same pathname.\n  // Regardless of what we find, since it doesn't correspond with the requested URL, we'll mark it \"aliased\".\n  // This will signal to the router that it should only apply the loading state on the prefetched data.\n  if (\n    process.env.NODE_ENV !== 'development' &&\n    kind !== PrefetchKind.FULL &&\n    allowAliasing\n  ) {\n    for (const cacheEntry of prefetchCache.values()) {\n      if (\n        cacheEntry.url.pathname === url.pathname &&\n        // We shouldn't return the aliased entry if it was relocated to a new cache key.\n        // Since it's rewritten, it could respond with a completely different loading state.\n        !cacheEntry.key.includes(INTERCEPTION_CACHE_KEY_MARKER)\n      ) {\n        return { ...cacheEntry, aliased: true }\n      }\n    }\n  }\n\n  return undefined\n}\n\n/**\n * Returns a prefetch cache entry if one exists. Otherwise creates a new one and enqueues a fetch request\n * to retrieve the prefetch data from the server.\n */\nexport function getOrCreatePrefetchCacheEntry({\n  url,\n  nextUrl,\n  tree,\n  prefetchCache,\n  kind,\n  allowAliasing = true,\n}: Pick<ReadonlyReducerState, 'nextUrl' | 'prefetchCache' | 'tree'> & {\n  url: URL\n  kind?: PrefetchKind\n  allowAliasing: boolean\n}): AliasedPrefetchCacheEntry {\n  const existingCacheEntry = getExistingCacheEntry(\n    url,\n    kind,\n    nextUrl,\n    prefetchCache,\n    allowAliasing\n  )\n\n  if (existingCacheEntry) {\n    // Grab the latest status of the cache entry and update it\n    existingCacheEntry.status = getPrefetchEntryCacheStatus(existingCacheEntry)\n\n    // when `kind` is provided, an explicit prefetch was requested.\n    // if the requested prefetch is \"full\" and the current cache entry wasn't, we want to re-prefetch with the new intent\n    const switchedToFullPrefetch =\n      existingCacheEntry.kind !== PrefetchKind.FULL &&\n      kind === PrefetchKind.FULL\n\n    if (switchedToFullPrefetch) {\n      // If we switched to a full prefetch, validate that the existing cache entry contained partial data.\n      // It's possible that the cache entry was seeded with full data but has a cache type of \"auto\" (ie when cache entries\n      // are seeded but without a prefetch intent)\n      existingCacheEntry.data.then((prefetchResponse) => {\n        const isFullPrefetch =\n          Array.isArray(prefetchResponse.flightData) &&\n          prefetchResponse.flightData.some((flightData) => {\n            // If we started rendering from the root and we returned RSC data (seedData), we already had a full prefetch.\n            return flightData.isRootRender && flightData.seedData !== null\n          })\n\n        if (!isFullPrefetch) {\n          return createLazyPrefetchEntry({\n            tree,\n            url,\n            nextUrl,\n            prefetchCache,\n            // If we didn't get an explicit prefetch kind, we want to set a temporary kind\n            // rather than assuming the same intent as the previous entry, to be consistent with how we\n            // lazily create prefetch entries when intent is left unspecified.\n            kind: kind ?? PrefetchKind.TEMPORARY,\n          })\n        }\n      })\n    }\n\n    // If the existing cache entry was marked as temporary, it means it was lazily created when attempting to get an entry,\n    // where we didn't have the prefetch intent. Now that we have the intent (in `kind`), we want to update the entry to the more accurate kind.\n    if (kind && existingCacheEntry.kind === PrefetchKind.TEMPORARY) {\n      existingCacheEntry.kind = kind\n    }\n\n    // We've determined that the existing entry we found is still valid, so we return it.\n    return existingCacheEntry\n  }\n\n  // If we didn't return an entry, create a new one.\n  return createLazyPrefetchEntry({\n    tree,\n    url,\n    nextUrl,\n    prefetchCache,\n    kind: kind || PrefetchKind.TEMPORARY,\n  })\n}\n\n/*\n * Used to take an existing cache entry and prefix it with the nextUrl, if it exists.\n * This ensures that we don't have conflicting cache entries for the same URL (as is the case with route interception).\n */\nfunction prefixExistingPrefetchCacheEntry({\n  url,\n  nextUrl,\n  prefetchCache,\n  existingCacheKey,\n}: Pick<ReadonlyReducerState, 'nextUrl' | 'prefetchCache'> & {\n  url: URL\n  existingCacheKey: string\n}) {\n  const existingCacheEntry = prefetchCache.get(existingCacheKey)\n  if (!existingCacheEntry) {\n    // no-op -- there wasn't an entry to move\n    return\n  }\n\n  const newCacheKey = createPrefetchCacheKey(\n    url,\n    existingCacheEntry.kind,\n    nextUrl\n  )\n  prefetchCache.set(newCacheKey, { ...existingCacheEntry, key: newCacheKey })\n  prefetchCache.delete(existingCacheKey)\n\n  return newCacheKey\n}\n\n/**\n * Use to seed the prefetch cache with data that has already been fetched.\n */\nexport function createSeededPrefetchCacheEntry({\n  nextUrl,\n  tree,\n  prefetchCache,\n  url,\n  data,\n  kind,\n}: Pick<ReadonlyReducerState, 'nextUrl' | 'tree' | 'prefetchCache'> & {\n  url: URL\n  data: FetchServerResponseResult\n  kind: PrefetchKind\n}) {\n  // The initial cache entry technically includes full data, but it isn't explicitly prefetched -- we just seed the\n  // prefetch cache so that we can skip an extra prefetch request later, since we already have the data.\n  // if the prefetch corresponds with an interception route, we use the nextUrl to prefix the cache key\n  const prefetchCacheKey = data.couldBeIntercepted\n    ? createPrefetchCacheKey(url, kind, nextUrl)\n    : createPrefetchCacheKey(url, kind)\n\n  const prefetchEntry = {\n    treeAtTimeOfPrefetch: tree,\n    data: Promise.resolve(data),\n    kind,\n    prefetchTime: Date.now(),\n    lastUsedTime: Date.now(),\n    staleTime: -1,\n    key: prefetchCacheKey,\n    status: PrefetchCacheEntryStatus.fresh,\n    url,\n  } satisfies PrefetchCacheEntry\n\n  prefetchCache.set(prefetchCacheKey, prefetchEntry)\n\n  return prefetchEntry\n}\n\n/**\n * Creates a prefetch entry entry and enqueues a fetch request to retrieve the data.\n */\nfunction createLazyPrefetchEntry({\n  url,\n  kind,\n  tree,\n  nextUrl,\n  prefetchCache,\n}: Pick<ReadonlyReducerState, 'nextUrl' | 'tree' | 'prefetchCache'> & {\n  url: URL\n  kind: PrefetchKind\n}): PrefetchCacheEntry {\n  const prefetchCacheKey = createPrefetchCacheKey(url, kind)\n\n  // initiates the fetch request for the prefetch and attaches a listener\n  // to the promise to update the prefetch cache entry when the promise resolves (if necessary)\n  const data = prefetchQueue.enqueue(() =>\n    fetchServerResponse(url, {\n      flightRouterState: tree,\n      nextUrl,\n      prefetchKind: kind,\n    }).then((prefetchResponse) => {\n      // TODO: `fetchServerResponse` should be more tighly coupled to these prefetch cache operations\n      // to avoid drift between this cache key prefixing logic\n      // (which is currently directly influenced by the server response)\n      let newCacheKey\n\n      if (prefetchResponse.couldBeIntercepted) {\n        // Determine if we need to prefix the cache key with the nextUrl\n        newCacheKey = prefixExistingPrefetchCacheEntry({\n          url,\n          existingCacheKey: prefetchCacheKey,\n          nextUrl,\n          prefetchCache,\n        })\n      }\n\n      // If the prefetch was a cache hit, we want to update the existing cache entry to reflect that it was a full prefetch.\n      // This is because we know that a static response will contain the full RSC payload, and can be updated to respect the `static`\n      // staleTime.\n      if (prefetchResponse.prerendered) {\n        const existingCacheEntry = prefetchCache.get(\n          // if we prefixed the cache key due to route interception, we want to use the new key. Otherwise we use the original key\n          newCacheKey ?? prefetchCacheKey\n        )\n        if (existingCacheEntry) {\n          existingCacheEntry.kind = PrefetchKind.FULL\n          if (prefetchResponse.staleTime !== -1) {\n            // This is the stale time that was collected by the server during\n            // static generation. Use this in place of the default stale time.\n            existingCacheEntry.staleTime = prefetchResponse.staleTime\n          }\n        }\n      }\n\n      return prefetchResponse\n    })\n  )\n\n  const prefetchEntry = {\n    treeAtTimeOfPrefetch: tree,\n    data,\n    kind,\n    prefetchTime: Date.now(),\n    lastUsedTime: null,\n    staleTime: -1,\n    key: prefetchCacheKey,\n    status: PrefetchCacheEntryStatus.fresh,\n    url,\n  }\n\n  prefetchCache.set(prefetchCacheKey, prefetchEntry)\n\n  return prefetchEntry\n}\n\nexport function prunePrefetchCache(\n  prefetchCache: ReadonlyReducerState['prefetchCache']\n) {\n  for (const [href, prefetchCacheEntry] of prefetchCache) {\n    if (\n      getPrefetchEntryCacheStatus(prefetchCacheEntry) ===\n      PrefetchCacheEntryStatus.expired\n    ) {\n      prefetchCache.delete(href)\n    }\n  }\n}\n\n// These values are set by `define-env-plugin` (based on `nextConfig.experimental.staleTimes`)\n// and default to 5 minutes (static) / 0 seconds (dynamic)\nexport const DYNAMIC_STALETIME_MS =\n  Number(process.env.__NEXT_CLIENT_ROUTER_DYNAMIC_STALETIME) * 1000\n\nexport const STATIC_STALETIME_MS =\n  Number(process.env.__NEXT_CLIENT_ROUTER_STATIC_STALETIME) * 1000\n\nfunction getPrefetchEntryCacheStatus({\n  kind,\n  prefetchTime,\n  lastUsedTime,\n  staleTime,\n}: PrefetchCacheEntry): PrefetchCacheEntryStatus {\n  if (staleTime !== -1) {\n    // `staleTime` is the value sent by the server during static generation.\n    // When this is available, it takes precedence over any of the heuristics\n    // that follow.\n    //\n    // TODO: When PPR is enabled, the server will *always* return a stale time\n    // when prefetching. We should never use a prefetch entry that hasn't yet\n    // received data from the server. So the only two cases should be 1) we use\n    // the server-generated stale time 2) the unresolved entry is discarded.\n    return Date.now() < prefetchTime + staleTime\n      ? PrefetchCacheEntryStatus.fresh\n      : PrefetchCacheEntryStatus.stale\n  }\n\n  // We will re-use the cache entry data for up to the `dynamic` staletime window.\n  if (Date.now() < (lastUsedTime ?? prefetchTime) + DYNAMIC_STALETIME_MS) {\n    return lastUsedTime\n      ? PrefetchCacheEntryStatus.reusable\n      : PrefetchCacheEntryStatus.fresh\n  }\n\n  // For \"auto\" prefetching, we'll re-use only the loading boundary for up to `static` staletime window.\n  // A stale entry will only re-use the `loading` boundary, not the full data.\n  // This will trigger a \"lazy fetch\" for the full data.\n  if (kind === PrefetchKind.AUTO) {\n    if (Date.now() < prefetchTime + STATIC_STALETIME_MS) {\n      return PrefetchCacheEntryStatus.stale\n    }\n  }\n\n  // for \"full\" prefetching, we'll re-use the cache entry data for up to `static` staletime window.\n  if (kind === PrefetchKind.FULL) {\n    if (Date.now() < prefetchTime + STATIC_STALETIME_MS) {\n      return PrefetchCacheEntryStatus.reusable\n    }\n  }\n\n  return PrefetchCacheEntryStatus.expired\n}\n","import type {\n  PrefetchAction,\n  ReducerState,\n  ReadonlyReducerState,\n} from '../router-reducer-types'\nimport { PromiseQueue } from '../../promise-queue'\nimport {\n  getOrCreatePrefetchCacheEntry,\n  prunePrefetchCache,\n} from '../prefetch-cache-utils'\nexport const prefetchQueue = new PromiseQueue(5)\n\nexport const prefetchReducer = process.env.__NEXT_CLIENT_SEGMENT_CACHE\n  ? identityReducerWhenSegmentCacheIsEnabled\n  : prefetchReducerImpl\n\nfunction identityReducerWhenSegmentCacheIsEnabled<T>(state: T): T {\n  // Unlike the old implementation, the Segment Cache doesn't store its data in\n  // the router reducer state.\n  //\n  // This shouldn't be reachable because we wrap the prefetch API in a check,\n  // too, which prevents the action from being dispatched. But it's here for\n  // clarity + code elimination.\n  return state\n}\n\nfunction prefetchReducerImpl(\n  state: ReadonlyReducerState,\n  action: PrefetchAction\n): ReducerState {\n  // let's prune the prefetch cache before we do anything else\n  prunePrefetchCache(state.prefetchCache)\n\n  const { url } = action\n\n  getOrCreatePrefetchCacheEntry({\n    url,\n    nextUrl: state.nextUrl,\n    prefetchCache: state.prefetchCache,\n    kind: action.kind,\n    tree: state.tree,\n    allowAliasing: true,\n  })\n\n  return state\n}\n","// This regex contains the bots that we need to do a blocking render for and can't safely stream the response\n// due to how they parse the DOM. For example, they might explicitly check for metadata in the `head` tag, so we can't stream metadata tags after the `head` was sent.\nexport const HTML_LIMITED_BOT_UA_RE =\n  /Mediapartners-Google|Slurp|DuckDuckBot|baiduspider|yandex|sogou|bitlybot|tumblr|vkShare|quora link preview|redditbot|ia_archiver|Bingbot|BingPreview|applebot|facebookexternalhit|facebookcatalog|Twitterbot|LinkedInBot|Slackbot|Discordbot|WhatsApp|SkypeUriPreview|Yeti/i\n","import { HTML_LIMITED_BOT_UA_RE } from './html-bots'\n\n// Bot crawler that will spin up a headless browser and execute JS\nconst HEADLESS_BROWSER_BOT_UA_RE =\n  /Googlebot|Google-PageRenderer|AdsBot-Google|googleweblight|Storebot-Google/i\n\nexport const HTML_LIMITED_BOT_UA_RE_STRING = HTML_LIMITED_BOT_UA_RE.source\n\nexport { HTML_LIMITED_BOT_UA_RE }\n\nfunction isDomBotUA(userAgent: string) {\n  return HEADLESS_BROWSER_BOT_UA_RE.test(userAgent)\n}\n\nfunction isHtmlLimitedBotUA(userAgent: string) {\n  return HTML_LIMITED_BOT_UA_RE.test(userAgent)\n}\n\nexport function isBot(userAgent: string): boolean {\n  return isDomBotUA(userAgent) || isHtmlLimitedBotUA(userAgent)\n}\n\nexport function getBotType(userAgent: string): 'dom' | 'html' | undefined {\n  if (isDomBotUA(userAgent)) {\n    return 'dom'\n  }\n  if (isHtmlLimitedBotUA(userAgent)) {\n    return 'html'\n  }\n  return undefined\n}\n","import { useEffect, useRef, useState } from 'react'\nimport { createPortal } from 'react-dom'\nimport type { FlightRouterState } from '../../server/app-render/types'\n\nconst ANNOUNCER_TYPE = 'next-route-announcer'\nconst ANNOUNCER_ID = '__next-route-announcer__'\n\nfunction getAnnouncerNode() {\n  const existingAnnouncer = document.getElementsByName(ANNOUNCER_TYPE)[0]\n  if (existingAnnouncer?.shadowRoot?.childNodes[0]) {\n    return existingAnnouncer.shadowRoot.childNodes[0] as HTMLElement\n  } else {\n    const container = document.createElement(ANNOUNCER_TYPE)\n    container.style.cssText = 'position:absolute'\n    const announcer = document.createElement('div')\n    announcer.ariaLive = 'assertive'\n    announcer.id = ANNOUNCER_ID\n    announcer.role = 'alert'\n    announcer.style.cssText =\n      'position:absolute;border:0;height:1px;margin:-1px;padding:0;width:1px;clip:rect(0 0 0 0);overflow:hidden;white-space:nowrap;word-wrap:normal'\n\n    // Use shadow DOM here to avoid any potential CSS bleed\n    const shadow = container.attachShadow({ mode: 'open' })\n    shadow.appendChild(announcer)\n    document.body.appendChild(container)\n    return announcer\n  }\n}\n\nexport function AppRouterAnnouncer({ tree }: { tree: FlightRouterState }) {\n  const [portalNode, setPortalNode] = useState<HTMLElement | null>(null)\n\n  useEffect(() => {\n    const announcer = getAnnouncerNode()\n    setPortalNode(announcer)\n    return () => {\n      const container = document.getElementsByTagName(ANNOUNCER_TYPE)[0]\n      if (container?.isConnected) {\n        document.body.removeChild(container)\n      }\n    }\n  }, [])\n\n  const [routeAnnouncement, setRouteAnnouncement] = useState('')\n  const previousTitle = useRef<string | undefined>(undefined)\n\n  useEffect(() => {\n    let currentTitle = ''\n    if (document.title) {\n      currentTitle = document.title\n    } else {\n      const pageHeader = document.querySelector('h1')\n      if (pageHeader) {\n        currentTitle = pageHeader.innerText || pageHeader.textContent || ''\n      }\n    }\n\n    // Only announce the title change, but not for the first load because screen\n    // readers do that automatically.\n    if (\n      previousTitle.current !== undefined &&\n      previousTitle.current !== currentTitle\n    ) {\n      setRouteAnnouncement(currentTitle)\n    }\n    previousTitle.current = currentTitle\n  }, [tree])\n\n  return portalNode ? createPortal(routeAnnouncement, portalNode) : null\n}\n","'use client'\nimport React, { useEffect } from 'react'\nimport type { AppRouterInstance } from '../../shared/lib/app-router-context.shared-runtime'\nimport { useRouter } from './navigation'\nimport { getRedirectTypeFromError, getURLFromRedirectError } from './redirect'\nimport { RedirectType, isRedirectError } from './redirect-error'\n\ninterface RedirectBoundaryProps {\n  router: AppRouterInstance\n  children: React.ReactNode\n}\n\nfunction HandleRedirect({\n  redirect,\n  reset,\n  redirectType,\n}: {\n  redirect: string\n  redirectType: RedirectType\n  reset: () => void\n}) {\n  const router = useRouter()\n\n  useEffect(() => {\n    React.startTransition(() => {\n      if (redirectType === RedirectType.push) {\n        router.push(redirect, {})\n      } else {\n        router.replace(redirect, {})\n      }\n      reset()\n    })\n  }, [redirect, redirectType, reset, router])\n\n  return null\n}\n\nexport class RedirectErrorBoundary extends React.Component<\n  RedirectBoundaryProps,\n  { redirect: string | null; redirectType: RedirectType | null }\n> {\n  constructor(props: RedirectBoundaryProps) {\n    super(props)\n    this.state = { redirect: null, redirectType: null }\n  }\n\n  static getDerivedStateFromError(error: any) {\n    if (isRedirectError(error)) {\n      const url = getURLFromRedirectError(error)\n      const redirectType = getRedirectTypeFromError(error)\n      return { redirect: url, redirectType }\n    }\n    // Re-throw if error is not for redirect\n    throw error\n  }\n\n  // Explicit type is needed to avoid the generated `.d.ts` having a wide return type that could be specific to the `@types/react` version.\n  render(): React.ReactNode {\n    const { redirect, redirectType } = this.state\n    if (redirect !== null && redirectType !== null) {\n      return (\n        <HandleRedirect\n          redirect={redirect}\n          redirectType={redirectType}\n          reset={() => this.setState({ redirect: null })}\n        />\n      )\n    }\n\n    return this.props.children\n  }\n}\n\nexport function RedirectBoundary({ children }: { children: React.ReactNode }) {\n  const router = useRouter()\n  return (\n    <RedirectErrorBoundary router={router}>{children}</RedirectErrorBoundary>\n  )\n}\n","import type { FlightRouterState } from '../../../../server/app-render/types'\nimport type { CacheNode } from '../../../../shared/lib/app-router-context.shared-runtime'\nimport { createRouterCacheKey } from '../create-router-cache-key'\n\nexport function findHeadInCache(\n  cache: CacheNode,\n  parallelRoutes: FlightRouterState[1]\n): [CacheNode, string] | null {\n  return findHeadInCacheImpl(cache, parallelRoutes, '')\n}\n\nfunction findHeadInCacheImpl(\n  cache: CacheNode,\n  parallelRoutes: FlightRouterState[1],\n  keyPrefix: string\n): [CacheNode, string] | null {\n  const isLastItem = Object.keys(parallelRoutes).length === 0\n  if (isLastItem) {\n    // Returns the entire Cache Node of the segment whose head we will render.\n    return [cache, keyPrefix]\n  }\n\n  // First try the 'children' parallel route if it exists\n  // when starting from the \"root\", this corresponds with the main page component\n  if (parallelRoutes.children) {\n    const [segment, childParallelRoutes] = parallelRoutes.children\n    const childSegmentMap = cache.parallelRoutes.get('children')\n    if (childSegmentMap) {\n      const cacheKey = createRouterCacheKey(segment)\n      const cacheNode = childSegmentMap.get(cacheKey)\n      if (cacheNode) {\n        const item = findHeadInCacheImpl(\n          cacheNode,\n          childParallelRoutes,\n          keyPrefix + '/' + cacheKey\n        )\n        if (item) return item\n      }\n    }\n  }\n\n  // if we didn't find metadata in the page slot, check the other parallel routes\n  for (const key in parallelRoutes) {\n    if (key === 'children') continue // already checked above\n\n    const [segment, childParallelRoutes] = parallelRoutes[key]\n    const childSegmentMap = cache.parallelRoutes.get(key)\n    if (!childSegmentMap) {\n      continue\n    }\n\n    const cacheKey = createRouterCacheKey(segment)\n\n    const cacheNode = childSegmentMap.get(cacheKey)\n    if (!cacheNode) {\n      continue\n    }\n\n    const item = findHeadInCacheImpl(\n      cacheNode,\n      childParallelRoutes,\n      keyPrefix + '/' + cacheKey\n    )\n    if (item) {\n      return item\n    }\n  }\n\n  return null\n}\n","/**\n * Create a \"Thenable\" that does not resolve. This is used to suspend indefinitely when data is not available yet.\n */\nexport const unresolvedThenable = {\n  then: () => {},\n} as PromiseLike<void>\n","import { parsePath } from './parse-path'\n\n/**\n * Checks if a given path starts with a given prefix. It ensures it matches\n * exactly without containing extra chars. e.g. prefix /docs should replace\n * for /docs, /docs/, /docs/a but not /docsss\n * @param path The path to check.\n * @param prefix The prefix to check against.\n */\nexport function pathHasPrefix(path: string, prefix: string) {\n  if (typeof path !== 'string') {\n    return false\n  }\n\n  const { pathname } = parsePath(path)\n  return pathname === prefix || pathname.startsWith(prefix + '/')\n}\n","import { pathHasPrefix } from '../shared/lib/router/utils/path-has-prefix'\n\nconst basePath = (process.env.__NEXT_ROUTER_BASEPATH as string) || ''\n\nexport function hasBasePath(path: string): boolean {\n  return pathHasPrefix(path, basePath)\n}\n","import { hasBasePath } from './has-base-path'\n\nconst basePath = (process.env.__NEXT_ROUTER_BASEPATH as string) || ''\n\nexport function removeBasePath(path: string): string {\n  if (process.env.__NEXT_MANUAL_CLIENT_BASE_PATH) {\n    if (!hasBasePath(path)) {\n      return path\n    }\n  }\n\n  // Can't trim the basePath if it has zero length!\n  if (basePath.length === 0) return path\n\n  path = path.slice(basePath.length)\n  if (!path.startsWith('/')) path = `/${path}`\n  return path\n}\n","'use client'\n\nimport React, {\n  use,\n  useEffect,\n  useMemo,\n  startTransition,\n  useInsertionEffect,\n  useDeferredValue,\n} from 'react'\nimport {\n  AppRouterContext,\n  LayoutRouterContext,\n  GlobalLayoutRouterContext,\n} from '../../shared/lib/app-router-context.shared-runtime'\nimport type { CacheNode } from '../../shared/lib/app-router-context.shared-runtime'\nimport { ACTION_RESTORE } from './router-reducer/router-reducer-types'\nimport type { AppRouterState } from './router-reducer/router-reducer-types'\nimport { createHrefFromUrl } from './router-reducer/create-href-from-url'\nimport {\n  SearchParamsContext,\n  PathnameContext,\n  PathParamsContext,\n} from '../../shared/lib/hooks-client-context.shared-runtime'\nimport { dispatchAppRouterAction, useActionQueue } from './use-action-queue'\nimport {\n  default as DefaultGlobalError,\n  ErrorBoundary,\n  type GlobalErrorComponent,\n} from './error-boundary'\nimport { isBot } from '../../shared/lib/router/utils/is-bot'\nimport { addBasePath } from '../add-base-path'\nimport { AppRouterAnnouncer } from './app-router-announcer'\nimport { RedirectBoundary } from './redirect-boundary'\nimport { findHeadInCache } from './router-reducer/reducers/find-head-in-cache'\nimport { unresolvedThenable } from './unresolved-thenable'\nimport { removeBasePath } from '../remove-base-path'\nimport { hasBasePath } from '../has-base-path'\nimport { getSelectedParams } from './router-reducer/compute-changed-path'\nimport type { FlightRouterState } from '../../server/app-render/types'\nimport { useNavFailureHandler } from './nav-failure-handler'\nimport {\n  dispatchTraverseAction,\n  publicAppRouterInstance,\n  type AppRouterActionQueue,\n} from './app-router-instance'\nimport { getRedirectTypeFromError, getURLFromRedirectError } from './redirect'\nimport { isRedirectError, RedirectType } from './redirect-error'\nimport { pingVisibleLinks } from './links'\n\nconst globalMutable: {\n  pendingMpaPath?: string\n} = {}\n\nexport function isExternalURL(url: URL) {\n  return url.origin !== window.location.origin\n}\n\n/**\n * Given a link href, constructs the URL that should be prefetched. Returns null\n * in cases where prefetching should be disabled, like external URLs, or\n * during development.\n * @param href The href passed to <Link>, router.prefetch(), or similar\n * @returns A URL object to prefetch, or null if prefetching should be disabled\n */\nexport function createPrefetchURL(href: string): URL | null {\n  // Don't prefetch for bots as they don't navigate.\n  if (isBot(window.navigator.userAgent)) {\n    return null\n  }\n\n  let url: URL\n  try {\n    url = new URL(addBasePath(href), window.location.href)\n  } catch (_) {\n    // TODO: Does this need to throw or can we just console.error instead? Does\n    // anyone rely on this throwing? (Seems unlikely.)\n    throw new Error(\n      `Cannot prefetch '${href}' because it cannot be converted to a URL.`\n    )\n  }\n\n  // Don't prefetch during development (improves compilation performance)\n  if (process.env.NODE_ENV === 'development') {\n    return null\n  }\n\n  // External urls can't be prefetched in the same way.\n  if (isExternalURL(url)) {\n    return null\n  }\n\n  return url\n}\n\nfunction HistoryUpdater({\n  appRouterState,\n}: {\n  appRouterState: AppRouterState\n}) {\n  useInsertionEffect(() => {\n    if (process.env.__NEXT_APP_NAV_FAIL_HANDLING) {\n      // clear pending URL as navigation is no longer\n      // in flight\n      window.next.__pendingUrl = undefined\n    }\n\n    const { tree, pushRef, canonicalUrl } = appRouterState\n    const historyState = {\n      ...(pushRef.preserveCustomHistoryState ? window.history.state : {}),\n      // Identifier is shortened intentionally.\n      // __NA is used to identify if the history entry can be handled by the app-router.\n      // __N is used to identify if the history entry can be handled by the old router.\n      __NA: true,\n      __PRIVATE_NEXTJS_INTERNALS_TREE: tree,\n    }\n    if (\n      pushRef.pendingPush &&\n      // Skip pushing an additional history entry if the canonicalUrl is the same as the current url.\n      // This mirrors the browser behavior for normal navigation.\n      createHrefFromUrl(new URL(window.location.href)) !== canonicalUrl\n    ) {\n      // This intentionally mutates React state, pushRef is overwritten to ensure additional push/replace calls do not trigger an additional history entry.\n      pushRef.pendingPush = false\n      window.history.pushState(historyState, '', canonicalUrl)\n    } else {\n      window.history.replaceState(historyState, '', canonicalUrl)\n    }\n  }, [appRouterState])\n\n  useEffect(() => {\n    // The Next-Url and the base tree may affect the result of a prefetch\n    // task. Re-prefetch all visible links with the updated values. In most\n    // cases, this will not result in any new network requests, only if\n    // the prefetch result actually varies on one of these inputs.\n    if (process.env.__NEXT_CLIENT_SEGMENT_CACHE) {\n      pingVisibleLinks(appRouterState.nextUrl, appRouterState.tree)\n    }\n  }, [appRouterState.nextUrl, appRouterState.tree])\n\n  return null\n}\n\nexport function createEmptyCacheNode(): CacheNode {\n  return {\n    lazyData: null,\n    rsc: null,\n    prefetchRsc: null,\n    head: null,\n    prefetchHead: null,\n    parallelRoutes: new Map(),\n    loading: null,\n    navigatedAt: -1,\n  }\n}\n\nfunction copyNextJsInternalHistoryState(data: any) {\n  if (data == null) data = {}\n  const currentState = window.history.state\n  const __NA = currentState?.__NA\n  if (__NA) {\n    data.__NA = __NA\n  }\n  const __PRIVATE_NEXTJS_INTERNALS_TREE =\n    currentState?.__PRIVATE_NEXTJS_INTERNALS_TREE\n  if (__PRIVATE_NEXTJS_INTERNALS_TREE) {\n    data.__PRIVATE_NEXTJS_INTERNALS_TREE = __PRIVATE_NEXTJS_INTERNALS_TREE\n  }\n\n  return data\n}\n\nfunction Head({\n  headCacheNode,\n}: {\n  headCacheNode: CacheNode | null\n}): React.ReactNode {\n  // If this segment has a `prefetchHead`, it's the statically prefetched data.\n  // We should use that on initial render instead of `head`. Then we'll switch\n  // to `head` when the dynamic response streams in.\n  const head = headCacheNode !== null ? headCacheNode.head : null\n  const prefetchHead =\n    headCacheNode !== null ? headCacheNode.prefetchHead : null\n\n  // If no prefetch data is available, then we go straight to rendering `head`.\n  const resolvedPrefetchRsc = prefetchHead !== null ? prefetchHead : head\n\n  // We use `useDeferredValue` to handle switching between the prefetched and\n  // final values. The second argument is returned on initial render, then it\n  // re-renders with the first argument.\n  return useDeferredValue(head, resolvedPrefetchRsc)\n}\n\n/**\n * The global router that wraps the application components.\n */\nfunction Router({\n  actionQueue,\n  assetPrefix,\n  globalError,\n}: {\n  actionQueue: AppRouterActionQueue\n  assetPrefix: string\n  globalError: [GlobalErrorComponent, React.ReactNode]\n}) {\n  const state = useActionQueue(actionQueue)\n  const { canonicalUrl } = state\n  // Add memoized pathname/query for useSearchParams and usePathname.\n  const { searchParams, pathname } = useMemo(() => {\n    const url = new URL(\n      canonicalUrl,\n      typeof window === 'undefined' ? 'http://n' : window.location.href\n    )\n\n    return {\n      // This is turned into a readonly class in `useSearchParams`\n      searchParams: url.searchParams,\n      pathname: hasBasePath(url.pathname)\n        ? removeBasePath(url.pathname)\n        : url.pathname,\n    }\n  }, [canonicalUrl])\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const { cache, prefetchCache, tree } = state\n\n    // This hook is in a conditional but that is ok because `process.env.NODE_ENV` never changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n      // Add `window.nd` for debugging purposes.\n      // This is not meant for use in applications as concurrent rendering will affect the cache/tree/router.\n      // @ts-ignore this is for debugging\n      window.nd = {\n        router: publicAppRouterInstance,\n        cache,\n        prefetchCache,\n        tree,\n      }\n    }, [cache, prefetchCache, tree])\n  }\n\n  useEffect(() => {\n    // If the app is restored from bfcache, it's possible that\n    // pushRef.mpaNavigation is true, which would mean that any re-render of this component\n    // would trigger the mpa navigation logic again from the lines below.\n    // This will restore the router to the initial state in the event that the app is restored from bfcache.\n    function handlePageShow(event: PageTransitionEvent) {\n      if (\n        !event.persisted ||\n        !window.history.state?.__PRIVATE_NEXTJS_INTERNALS_TREE\n      ) {\n        return\n      }\n\n      // Clear the pendingMpaPath value so that a subsequent MPA navigation to the same URL can be triggered.\n      // This is necessary because if the browser restored from bfcache, the pendingMpaPath would still be set to the value\n      // of the last MPA navigation.\n      globalMutable.pendingMpaPath = undefined\n\n      dispatchAppRouterAction({\n        type: ACTION_RESTORE,\n        url: new URL(window.location.href),\n        tree: window.history.state.__PRIVATE_NEXTJS_INTERNALS_TREE,\n      })\n    }\n\n    window.addEventListener('pageshow', handlePageShow)\n\n    return () => {\n      window.removeEventListener('pageshow', handlePageShow)\n    }\n  }, [])\n\n  useEffect(() => {\n    // Ensure that any redirect errors that bubble up outside of the RedirectBoundary\n    // are caught and handled by the router.\n    function handleUnhandledRedirect(\n      event: ErrorEvent | PromiseRejectionEvent\n    ) {\n      const error = 'reason' in event ? event.reason : event.error\n      if (isRedirectError(error)) {\n        event.preventDefault()\n        const url = getURLFromRedirectError(error)\n        const redirectType = getRedirectTypeFromError(error)\n        // TODO: This should access the router methods directly, rather than\n        // go through the public interface.\n        if (redirectType === RedirectType.push) {\n          publicAppRouterInstance.push(url, {})\n        } else {\n          publicAppRouterInstance.replace(url, {})\n        }\n      }\n    }\n    window.addEventListener('error', handleUnhandledRedirect)\n    window.addEventListener('unhandledrejection', handleUnhandledRedirect)\n\n    return () => {\n      window.removeEventListener('error', handleUnhandledRedirect)\n      window.removeEventListener('unhandledrejection', handleUnhandledRedirect)\n    }\n  }, [])\n\n  // When mpaNavigation flag is set do a hard navigation to the new url.\n  // Infinitely suspend because we don't actually want to rerender any child\n  // components with the new URL and any entangled state updates shouldn't\n  // commit either (eg: useTransition isPending should stay true until the page\n  // unloads).\n  //\n  // This is a side effect in render. Don't try this at home, kids. It's\n  // probably safe because we know this is a singleton component and it's never\n  // in <Offscreen>. At least I hope so. (It will run twice in dev strict mode,\n  // but that's... fine?)\n  const { pushRef } = state\n  if (pushRef.mpaNavigation) {\n    // if there's a re-render, we don't want to trigger another redirect if one is already in flight to the same URL\n    if (globalMutable.pendingMpaPath !== canonicalUrl) {\n      const location = window.location\n      if (pushRef.pendingPush) {\n        location.assign(canonicalUrl)\n      } else {\n        location.replace(canonicalUrl)\n      }\n\n      globalMutable.pendingMpaPath = canonicalUrl\n    }\n    // TODO-APP: Should we listen to navigateerror here to catch failed\n    // navigations somehow? And should we call window.stop() if a SPA navigation\n    // should interrupt an MPA one?\n    use(unresolvedThenable)\n  }\n\n  useEffect(() => {\n    const originalPushState = window.history.pushState.bind(window.history)\n    const originalReplaceState = window.history.replaceState.bind(\n      window.history\n    )\n\n    // Ensure the canonical URL in the Next.js Router is updated when the URL is changed so that `usePathname` and `useSearchParams` hold the pushed values.\n    const applyUrlFromHistoryPushReplace = (\n      url: string | URL | null | undefined\n    ) => {\n      const href = window.location.href\n      const tree: FlightRouterState | undefined =\n        window.history.state?.__PRIVATE_NEXTJS_INTERNALS_TREE\n\n      startTransition(() => {\n        dispatchAppRouterAction({\n          type: ACTION_RESTORE,\n          url: new URL(url ?? href, href),\n          tree,\n        })\n      })\n    }\n\n    /**\n     * Patch pushState to ensure external changes to the history are reflected in the Next.js Router.\n     * Ensures Next.js internal history state is copied to the new history entry.\n     * Ensures usePathname and useSearchParams hold the newly provided url.\n     */\n    window.history.pushState = function pushState(\n      data: any,\n      _unused: string,\n      url?: string | URL | null\n    ): void {\n      // Avoid a loop when Next.js internals trigger pushState/replaceState\n      if (data?.__NA || data?._N) {\n        return originalPushState(data, _unused, url)\n      }\n\n      data = copyNextJsInternalHistoryState(data)\n\n      if (url) {\n        applyUrlFromHistoryPushReplace(url)\n      }\n\n      return originalPushState(data, _unused, url)\n    }\n\n    /**\n     * Patch replaceState to ensure external changes to the history are reflected in the Next.js Router.\n     * Ensures Next.js internal history state is copied to the new history entry.\n     * Ensures usePathname and useSearchParams hold the newly provided url.\n     */\n    window.history.replaceState = function replaceState(\n      data: any,\n      _unused: string,\n      url?: string | URL | null\n    ): void {\n      // Avoid a loop when Next.js internals trigger pushState/replaceState\n      if (data?.__NA || data?._N) {\n        return originalReplaceState(data, _unused, url)\n      }\n      data = copyNextJsInternalHistoryState(data)\n\n      if (url) {\n        applyUrlFromHistoryPushReplace(url)\n      }\n      return originalReplaceState(data, _unused, url)\n    }\n\n    /**\n     * Handle popstate event, this is used to handle back/forward in the browser.\n     * By default dispatches ACTION_RESTORE, however if the history entry was not pushed/replaced by app-router it will reload the page.\n     * That case can happen when the old router injected the history entry.\n     */\n    const onPopState = (event: PopStateEvent) => {\n      if (!event.state) {\n        // TODO-APP: this case only happens when pushState/replaceState was called outside of Next.js. It should probably reload the page in this case.\n        return\n      }\n\n      // This case happens when the history entry was pushed by the `pages` router.\n      if (!event.state.__NA) {\n        window.location.reload()\n        return\n      }\n\n      // TODO-APP: Ideally the back button should not use startTransition as it should apply the updates synchronously\n      // Without startTransition works if the cache is there for this path\n      startTransition(() => {\n        dispatchTraverseAction(\n          window.location.href,\n          event.state.__PRIVATE_NEXTJS_INTERNALS_TREE\n        )\n      })\n    }\n\n    // Register popstate event to call onPopstate.\n    window.addEventListener('popstate', onPopState)\n    return () => {\n      window.history.pushState = originalPushState\n      window.history.replaceState = originalReplaceState\n      window.removeEventListener('popstate', onPopState)\n    }\n  }, [])\n\n  const { cache, tree, nextUrl, focusAndScrollRef } = state\n\n  const matchingHead = useMemo(() => {\n    return findHeadInCache(cache, tree[1])\n  }, [cache, tree])\n\n  // Add memoized pathParams for useParams.\n  const pathParams = useMemo(() => {\n    return getSelectedParams(tree)\n  }, [tree])\n\n  const layoutRouterContext = useMemo(() => {\n    return {\n      parentTree: tree,\n      parentCacheNode: cache,\n      parentSegmentPath: null,\n      // Root node always has `url`\n      // Provided in AppTreeContext to ensure it can be overwritten in layout-router\n      url: canonicalUrl,\n    }\n  }, [tree, cache, canonicalUrl])\n\n  const globalLayoutRouterContext = useMemo(() => {\n    return {\n      tree,\n      focusAndScrollRef,\n      nextUrl,\n    }\n  }, [tree, focusAndScrollRef, nextUrl])\n\n  let head\n  if (matchingHead !== null) {\n    // The head is wrapped in an extra component so we can use\n    // `useDeferredValue` to swap between the prefetched and final versions of\n    // the head. (This is what LayoutRouter does for segment data, too.)\n    //\n    // The `key` is used to remount the component whenever the head moves to\n    // a different segment.\n    const [headCacheNode, headKey] = matchingHead\n    head = <Head key={headKey} headCacheNode={headCacheNode} />\n  } else {\n    head = null\n  }\n\n  let content = (\n    <RedirectBoundary>\n      {head}\n      {cache.rsc}\n      <AppRouterAnnouncer tree={tree} />\n    </RedirectBoundary>\n  )\n\n  if (process.env.NODE_ENV !== 'production') {\n    // In development, we apply few error boundaries and hot-reloader:\n    // - DevRootHTTPAccessFallbackBoundary: avoid using navigation API like notFound() in root layout\n    // - HotReloader:\n    //  - hot-reload the app when the code changes\n    //  - render dev overlay\n    //  - catch runtime errors and display global-error when necessary\n    if (typeof window !== 'undefined') {\n      const { DevRootHTTPAccessFallbackBoundary } =\n        require('./dev-root-http-access-fallback-boundary') as typeof import('./dev-root-http-access-fallback-boundary')\n      content = (\n        <DevRootHTTPAccessFallbackBoundary>\n          {content}\n        </DevRootHTTPAccessFallbackBoundary>\n      )\n    }\n    const HotReloader: typeof import('./react-dev-overlay/app/hot-reloader-client').default =\n      require('./react-dev-overlay/app/hot-reloader-client').default\n\n    content = (\n      <HotReloader assetPrefix={assetPrefix} globalError={globalError}>\n        {content}\n      </HotReloader>\n    )\n  } else {\n    // In production, we only apply the user-customized global error boundary.\n    content = (\n      <ErrorBoundary\n        errorComponent={globalError[0]}\n        errorStyles={globalError[1]}\n      >\n        {content}\n      </ErrorBoundary>\n    )\n  }\n\n  return (\n    <>\n      <HistoryUpdater appRouterState={state} />\n      <RuntimeStyles />\n      <PathParamsContext.Provider value={pathParams}>\n        <PathnameContext.Provider value={pathname}>\n          <SearchParamsContext.Provider value={searchParams}>\n            <GlobalLayoutRouterContext.Provider\n              value={globalLayoutRouterContext}\n            >\n              {/* TODO: We should be able to remove this context. useRouter\n                  should import from app-router-instance instead. It's only\n                  necessary because useRouter is shared between Pages and\n                  App Router. We should fork that module, then remove this\n                  context provider. */}\n              <AppRouterContext.Provider value={publicAppRouterInstance}>\n                <LayoutRouterContext.Provider value={layoutRouterContext}>\n                  {content}\n                </LayoutRouterContext.Provider>\n              </AppRouterContext.Provider>\n            </GlobalLayoutRouterContext.Provider>\n          </SearchParamsContext.Provider>\n        </PathnameContext.Provider>\n      </PathParamsContext.Provider>\n    </>\n  )\n}\n\nexport default function AppRouter({\n  actionQueue,\n  globalErrorComponentAndStyles: [globalErrorComponent, globalErrorStyles],\n  assetPrefix,\n}: {\n  actionQueue: AppRouterActionQueue\n  globalErrorComponentAndStyles: [GlobalErrorComponent, React.ReactNode]\n  assetPrefix: string\n}) {\n  useNavFailureHandler()\n\n  return (\n    <ErrorBoundary\n      // At the very top level, use the default GlobalError component as the final fallback.\n      // When the app router itself fails, which means the framework itself fails, we show the default error.\n      errorComponent={DefaultGlobalError}\n    >\n      <Router\n        actionQueue={actionQueue}\n        assetPrefix={assetPrefix}\n        globalError={[globalErrorComponent, globalErrorStyles]}\n      />\n    </ErrorBoundary>\n  )\n}\n\nconst runtimeStyles = new Set<string>()\nlet runtimeStyleChanged = new Set<() => void>()\n\nglobalThis._N_E_STYLE_LOAD = function (href: string) {\n  let len = runtimeStyles.size\n  runtimeStyles.add(href)\n  if (runtimeStyles.size !== len) {\n    runtimeStyleChanged.forEach((cb) => cb())\n  }\n  // TODO figure out how to get a promise here\n  // But maybe it's not necessary as react would block rendering until it's loaded\n  return Promise.resolve()\n}\n\nfunction RuntimeStyles() {\n  const [, forceUpdate] = React.useState(0)\n  const renderedStylesSize = runtimeStyles.size\n  useEffect(() => {\n    const changed = () => forceUpdate((c) => c + 1)\n    runtimeStyleChanged.add(changed)\n    if (renderedStylesSize !== runtimeStyles.size) {\n      changed()\n    }\n    return () => {\n      runtimeStyleChanged.delete(changed)\n    }\n  }, [renderedStylesSize, forceUpdate])\n\n  const dplId = process.env.NEXT_DEPLOYMENT_ID\n    ? `?dpl=${process.env.NEXT_DEPLOYMENT_ID}`\n    : ''\n  return [...runtimeStyles].map((href, i) => (\n    <link\n      key={i}\n      rel=\"stylesheet\"\n      href={`${href}${dplId}`}\n      // @ts-ignore\n      precedence=\"next\"\n      // TODO figure out crossOrigin and nonce\n      // crossOrigin={TODO}\n      // nonce={TODO}\n    />\n  ))\n}\n","import type {\n  CacheNodeSeedData,\n  FlightRouterState,\n  FlightSegmentPath,\n  Segment,\n} from '../../../server/app-render/types'\nimport type {\n  CacheNode,\n  ChildSegmentMap,\n  HeadData,\n  LoadingModuleData,\n  ReadyCacheNode,\n} from '../../../shared/lib/app-router-context.shared-runtime'\nimport { DEFAULT_SEGMENT_KEY } from '../../../shared/lib/segment'\nimport { matchSegment } from '../match-segments'\nimport { createRouterCacheKey } from './create-router-cache-key'\nimport type { FetchServerResponseResult } from './fetch-server-response'\nimport { isNavigatingToNewRootLayout } from './is-navigating-to-new-root-layout'\nimport { DYNAMIC_STALETIME_MS } from './prefetch-cache-utils'\n\n// This is yet another tree type that is used to track pending promises that\n// need to be fulfilled once the dynamic data is received. The terminal nodes of\n// this tree represent the new Cache Node trees that were created during this\n// request. We can't use the Cache Node tree or Route State tree directly\n// because those include reused nodes, too. This tree is discarded as soon as\n// the navigation response is received.\ntype SPANavigationTask = {\n  // The router state that corresponds to the tree that this Task represents.\n  route: FlightRouterState\n  // The CacheNode that corresponds to the tree that this Task represents. If\n  // `children` is null (i.e. if this is a terminal task node), then `node`\n  // represents a brand new Cache Node tree, which way or may not need to be\n  // filled with dynamic data from the server.\n  node: CacheNode | null\n  // The tree sent to the server during the dynamic request. This is the\n  // same as `route`, except with the `refetch` marker set on dynamic segments.\n  // If all the segments are static, then this will be null, and no server\n  // request is required.\n  dynamicRequestTree: FlightRouterState | null\n  children: Map<string, SPANavigationTask> | null\n}\n\n// A special type used to bail out and trigger a full-page navigation.\ntype MPANavigationTask = {\n  // MPA tasks are distinguised from SPA tasks by having a null `route`.\n  route: null\n  node: null\n  dynamicRequestTree: null\n  children: null\n}\n\nconst MPA_NAVIGATION_TASK: MPANavigationTask = {\n  route: null,\n  node: null,\n  dynamicRequestTree: null,\n  children: null,\n}\n\nexport type Task = SPANavigationTask | MPANavigationTask\n\n// Creates a new Cache Node tree (i.e. copy-on-write) that represents the\n// optimistic result of a navigation, using both the current Cache Node tree and\n// data that was prefetched prior to navigation.\n//\n// At the moment we call this function, we haven't yet received the navigation\n// response from the server. It could send back something completely different\n// from the tree that was prefetched — due to rewrites, default routes, parallel\n// routes, etc.\n//\n// But in most cases, it will return the same tree that we prefetched, just with\n// the dynamic holes filled in. So we optimistically assume this will happen,\n// and accept that the real result could be arbitrarily different.\n//\n// We'll reuse anything that was already in the previous tree, since that's what\n// the server does.\n//\n// New segments (ones that don't appear in the old tree) are assigned an\n// unresolved promise. The data for these promises will be fulfilled later, when\n// the navigation response is received.\n//\n// The tree can be rendered immediately after it is created (that's why this is\n// a synchronous function). Any new trees that do not have prefetch data will\n// suspend during rendering, until the dynamic data streams in.\n//\n// Returns a Task object, which contains both the updated Cache Node and a path\n// to the pending subtrees that need to be resolved by the navigation response.\n//\n// A return value of `null` means there were no changes, and the previous tree\n// can be reused without initiating a server request.\nexport function startPPRNavigation(\n  navigatedAt: number,\n  oldCacheNode: CacheNode,\n  oldRouterState: FlightRouterState,\n  newRouterState: FlightRouterState,\n  prefetchData: CacheNodeSeedData | null,\n  prefetchHead: HeadData | null,\n  isPrefetchHeadPartial: boolean,\n  isSamePageNavigation: boolean,\n  scrollableSegmentsResult: Array<FlightSegmentPath>\n): Task | null {\n  const segmentPath: Array<FlightSegmentPath> = []\n  return updateCacheNodeOnNavigation(\n    navigatedAt,\n    oldCacheNode,\n    oldRouterState,\n    newRouterState,\n    false,\n    prefetchData,\n    prefetchHead,\n    isPrefetchHeadPartial,\n    isSamePageNavigation,\n    segmentPath,\n    scrollableSegmentsResult\n  )\n}\n\nfunction updateCacheNodeOnNavigation(\n  navigatedAt: number,\n  oldCacheNode: CacheNode,\n  oldRouterState: FlightRouterState,\n  newRouterState: FlightRouterState,\n  didFindRootLayout: boolean,\n  prefetchData: CacheNodeSeedData | null,\n  prefetchHead: HeadData | null,\n  isPrefetchHeadPartial: boolean,\n  isSamePageNavigation: boolean,\n  segmentPath: FlightSegmentPath,\n  scrollableSegmentsResult: Array<FlightSegmentPath>\n): Task | null {\n  // Diff the old and new trees to reuse the shared layouts.\n  const oldRouterStateChildren = oldRouterState[1]\n  const newRouterStateChildren = newRouterState[1]\n  const prefetchDataChildren = prefetchData !== null ? prefetchData[2] : null\n\n  if (!didFindRootLayout) {\n    // We're currently traversing the part of the tree that was also part of\n    // the previous route. If we discover a root layout, then we don't need to\n    // trigger an MPA navigation. See beginRenderingNewRouteTree for context.\n    const isRootLayout = newRouterState[4] === true\n    if (isRootLayout) {\n      // Found a matching root layout.\n      didFindRootLayout = true\n    }\n  }\n\n  const oldParallelRoutes = oldCacheNode.parallelRoutes\n\n  // Clone the current set of segment children, even if they aren't active in\n  // the new tree.\n  // TODO: We currently retain all the inactive segments indefinitely, until\n  // there's an explicit refresh, or a parent layout is lazily refreshed. We\n  // rely on this for popstate navigations, which update the Router State Tree\n  // but do not eagerly perform a data fetch, because they expect the segment\n  // data to already be in the Cache Node tree. For highly static sites that\n  // are mostly read-only, this may happen only rarely, causing memory to\n  // leak. We should figure out a better model for the lifetime of inactive\n  // segments, so we can maintain instant back/forward navigations without\n  // leaking memory indefinitely.\n  const prefetchParallelRoutes = new Map(oldParallelRoutes)\n\n  // As we diff the trees, we may sometimes modify (copy-on-write, not mutate)\n  // the Route Tree that was returned by the server — for example, in the case\n  // of default parallel routes, we preserve the currently active segment. To\n  // avoid mutating the original tree, we clone the router state children along\n  // the return path.\n  let patchedRouterStateChildren: {\n    [parallelRouteKey: string]: FlightRouterState\n  } = {}\n  let taskChildren = null\n\n  // Most navigations require a request to fetch additional data from the\n  // server, either because the data was not already prefetched, or because the\n  // target route contains dynamic data that cannot be prefetched.\n  //\n  // However, if the target route is fully static, and it's already completely\n  // loaded into the segment cache, then we can skip the server request.\n  //\n  // This starts off as `false`, and is set to `true` if any of the child\n  // routes requires a dynamic request.\n  let needsDynamicRequest = false\n  // As we traverse the children, we'll construct a FlightRouterState that can\n  // be sent to the server to request the dynamic data. If it turns out that\n  // nothing in the subtree is dynamic (i.e. needsDynamicRequest is false at the\n  // end), then this will be discarded.\n  // TODO: We can probably optimize the format of this data structure to only\n  // include paths that are dynamic. Instead of reusing the\n  // FlightRouterState type.\n  let dynamicRequestTreeChildren: {\n    [parallelRouteKey: string]: FlightRouterState\n  } = {}\n\n  for (let parallelRouteKey in newRouterStateChildren) {\n    const newRouterStateChild: FlightRouterState =\n      newRouterStateChildren[parallelRouteKey]\n    const oldRouterStateChild: FlightRouterState | void =\n      oldRouterStateChildren[parallelRouteKey]\n    const oldSegmentMapChild = oldParallelRoutes.get(parallelRouteKey)\n    const prefetchDataChild: CacheNodeSeedData | void | null =\n      prefetchDataChildren !== null\n        ? prefetchDataChildren[parallelRouteKey]\n        : null\n\n    const newSegmentChild = newRouterStateChild[0]\n    const newSegmentPathChild = segmentPath.concat([\n      parallelRouteKey,\n      newSegmentChild,\n    ])\n    const newSegmentKeyChild = createRouterCacheKey(newSegmentChild)\n\n    const oldSegmentChild =\n      oldRouterStateChild !== undefined ? oldRouterStateChild[0] : undefined\n\n    const oldCacheNodeChild =\n      oldSegmentMapChild !== undefined\n        ? oldSegmentMapChild.get(newSegmentKeyChild)\n        : undefined\n\n    let taskChild: Task | null\n    if (newSegmentChild === DEFAULT_SEGMENT_KEY) {\n      // This is another kind of leaf segment — a default route.\n      //\n      // Default routes have special behavior. When there's no matching segment\n      // for a parallel route, Next.js preserves the currently active segment\n      // during a client navigation — but not for initial render. The server\n      // leaves it to the client to account for this. So we need to handle\n      // it here.\n      if (oldRouterStateChild !== undefined) {\n        // Reuse the existing Router State for this segment. We spawn a \"task\"\n        // just to keep track of the updated router state; unlike most, it's\n        // already fulfilled and won't be affected by the dynamic response.\n        taskChild = spawnReusedTask(oldRouterStateChild)\n      } else {\n        // There's no currently active segment. Switch to the \"create\" path.\n        taskChild = beginRenderingNewRouteTree(\n          navigatedAt,\n          oldRouterStateChild,\n          newRouterStateChild,\n          oldCacheNodeChild,\n          didFindRootLayout,\n          prefetchDataChild !== undefined ? prefetchDataChild : null,\n          prefetchHead,\n          isPrefetchHeadPartial,\n          newSegmentPathChild,\n          scrollableSegmentsResult\n        )\n      }\n    } else if (\n      isSamePageNavigation &&\n      // Check if this is a page segment.\n      // TODO: We're not consistent about how we do this check. Some places\n      // check if the segment starts with PAGE_SEGMENT_KEY, but most seem to\n      // check if there any any children, which is why I'm doing it here. We\n      // should probably encode an empty children set as `null` though. Either\n      // way, we should update all the checks to be consistent.\n      Object.keys(newRouterStateChild[1]).length === 0\n    ) {\n      // We special case navigations to the exact same URL as the current\n      // location. It's a common UI pattern for apps to refresh when you click a\n      // link to the current page. So when this happens, we refresh the dynamic\n      // data in the page segments.\n      //\n      // Note that this does not apply if the any part of the hash or search\n      // query has changed. This might feel a bit weird but it makes more sense\n      // when you consider that the way to trigger this behavior is to click\n      // the same link multiple times.\n      //\n      // TODO: We should probably refresh the *entire* route when this case\n      // occurs, not just the page segments. Essentially treating it the same as\n      // a refresh() triggered by an action, which is the more explicit way of\n      // modeling the UI pattern described above.\n      //\n      // Also note that this only refreshes the dynamic data, not static/\n      // cached data. If the page segment is fully static and prefetched, the\n      // request is skipped. (This is also how refresh() works.)\n      taskChild = beginRenderingNewRouteTree(\n        navigatedAt,\n        oldRouterStateChild,\n        newRouterStateChild,\n        oldCacheNodeChild,\n        didFindRootLayout,\n        prefetchDataChild !== undefined ? prefetchDataChild : null,\n        prefetchHead,\n        isPrefetchHeadPartial,\n        newSegmentPathChild,\n        scrollableSegmentsResult\n      )\n    } else if (\n      oldRouterStateChild !== undefined &&\n      oldSegmentChild !== undefined &&\n      matchSegment(newSegmentChild, oldSegmentChild)\n    ) {\n      if (\n        oldCacheNodeChild !== undefined &&\n        oldRouterStateChild !== undefined\n      ) {\n        // This segment exists in both the old and new trees. Recursively update\n        // the children.\n        taskChild = updateCacheNodeOnNavigation(\n          navigatedAt,\n          oldCacheNodeChild,\n          oldRouterStateChild,\n          newRouterStateChild,\n          didFindRootLayout,\n          prefetchDataChild,\n          prefetchHead,\n          isPrefetchHeadPartial,\n          isSamePageNavigation,\n          newSegmentPathChild,\n          scrollableSegmentsResult\n        )\n      } else {\n        // There's no existing Cache Node for this segment. Switch to the\n        // \"create\" path.\n        taskChild = beginRenderingNewRouteTree(\n          navigatedAt,\n          oldRouterStateChild,\n          newRouterStateChild,\n          oldCacheNodeChild,\n          didFindRootLayout,\n          prefetchDataChild !== undefined ? prefetchDataChild : null,\n          prefetchHead,\n          isPrefetchHeadPartial,\n          newSegmentPathChild,\n          scrollableSegmentsResult\n        )\n      }\n    } else {\n      // This is a new tree. Switch to the \"create\" path.\n      taskChild = beginRenderingNewRouteTree(\n        navigatedAt,\n        oldRouterStateChild,\n        newRouterStateChild,\n        oldCacheNodeChild,\n        didFindRootLayout,\n        prefetchDataChild !== undefined ? prefetchDataChild : null,\n        prefetchHead,\n        isPrefetchHeadPartial,\n        newSegmentPathChild,\n        scrollableSegmentsResult\n      )\n    }\n\n    if (taskChild !== null) {\n      // Recursively propagate up the child tasks.\n\n      if (taskChild.route === null) {\n        // One of the child tasks discovered a change to the root layout.\n        // Immediately unwind from this recursive traversal.\n        return MPA_NAVIGATION_TASK\n      }\n\n      if (taskChildren === null) {\n        taskChildren = new Map()\n      }\n      taskChildren.set(parallelRouteKey, taskChild)\n      const newCacheNodeChild = taskChild.node\n      if (newCacheNodeChild !== null) {\n        const newSegmentMapChild: ChildSegmentMap = new Map(oldSegmentMapChild)\n        newSegmentMapChild.set(newSegmentKeyChild, newCacheNodeChild)\n        prefetchParallelRoutes.set(parallelRouteKey, newSegmentMapChild)\n      }\n\n      // The child tree's route state may be different from the prefetched\n      // route sent by the server. We need to clone it as we traverse back up\n      // the tree.\n      const taskChildRoute = taskChild.route\n      patchedRouterStateChildren[parallelRouteKey] = taskChildRoute\n\n      const dynamicRequestTreeChild = taskChild.dynamicRequestTree\n      if (dynamicRequestTreeChild !== null) {\n        // Something in the child tree is dynamic.\n        needsDynamicRequest = true\n        dynamicRequestTreeChildren[parallelRouteKey] = dynamicRequestTreeChild\n      } else {\n        dynamicRequestTreeChildren[parallelRouteKey] = taskChildRoute\n      }\n    } else {\n      // The child didn't change. We can use the prefetched router state.\n      patchedRouterStateChildren[parallelRouteKey] = newRouterStateChild\n      dynamicRequestTreeChildren[parallelRouteKey] = newRouterStateChild\n    }\n  }\n\n  if (taskChildren === null) {\n    // No new tasks were spawned.\n    return null\n  }\n\n  const newCacheNode: ReadyCacheNode = {\n    lazyData: null,\n    rsc: oldCacheNode.rsc,\n    // We intentionally aren't updating the prefetchRsc field, since this node\n    // is already part of the current tree, because it would be weird for\n    // prefetch data to be newer than the final data. It probably won't ever be\n    // observable anyway, but it could happen if the segment is unmounted then\n    // mounted again, because LayoutRouter will momentarily switch to rendering\n    // prefetchRsc, via useDeferredValue.\n    prefetchRsc: oldCacheNode.prefetchRsc,\n    head: oldCacheNode.head,\n    prefetchHead: oldCacheNode.prefetchHead,\n    loading: oldCacheNode.loading,\n\n    // Everything is cloned except for the children, which we computed above.\n    parallelRoutes: prefetchParallelRoutes,\n\n    navigatedAt,\n  }\n\n  return {\n    // Return a cloned copy of the router state with updated children.\n    route: patchRouterStateWithNewChildren(\n      newRouterState,\n      patchedRouterStateChildren\n    ),\n    node: newCacheNode,\n    dynamicRequestTree: needsDynamicRequest\n      ? patchRouterStateWithNewChildren(\n          newRouterState,\n          dynamicRequestTreeChildren\n        )\n      : null,\n    children: taskChildren,\n  }\n}\n\nfunction beginRenderingNewRouteTree(\n  navigatedAt: number,\n  oldRouterState: FlightRouterState | void,\n  newRouterState: FlightRouterState,\n  existingCacheNode: CacheNode | void,\n  didFindRootLayout: boolean,\n  prefetchData: CacheNodeSeedData | null,\n  possiblyPartialPrefetchHead: HeadData | null,\n  isPrefetchHeadPartial: boolean,\n  segmentPath: FlightSegmentPath,\n  scrollableSegmentsResult: Array<FlightSegmentPath>\n): Task {\n  if (!didFindRootLayout) {\n    // The route tree changed before we reached a layout. (The highest-level\n    // layout in a route tree is referred to as the \"root\" layout.) This could\n    // mean that we're navigating between two different root layouts. When this\n    // happens, we perform a full-page (MPA-style) navigation.\n    //\n    // However, the algorithm for deciding where to start rendering a route\n    // (i.e. the one performed in order to reach this function) is stricter\n    // than the one used to detect a change in the root layout. So just because\n    // we're re-rendering a segment outside of the root layout does not mean we\n    // should trigger a full-page navigation.\n    //\n    // Specifically, we handle dynamic parameters differently: two segments are\n    // considered the same even if their parameter values are different.\n    //\n    // Refer to isNavigatingToNewRootLayout for details.\n    //\n    // Note that we only have to perform this extra traversal if we didn't\n    // already discover a root layout in the part of the tree that is unchanged.\n    // In the common case, this branch is skipped completely.\n    if (\n      oldRouterState === undefined ||\n      isNavigatingToNewRootLayout(oldRouterState, newRouterState)\n    ) {\n      // The root layout changed. Perform a full-page navigation.\n      return MPA_NAVIGATION_TASK\n    }\n  }\n  return createCacheNodeOnNavigation(\n    navigatedAt,\n    newRouterState,\n    existingCacheNode,\n    prefetchData,\n    possiblyPartialPrefetchHead,\n    isPrefetchHeadPartial,\n    segmentPath,\n    scrollableSegmentsResult\n  )\n}\n\nfunction createCacheNodeOnNavigation(\n  navigatedAt: number,\n  routerState: FlightRouterState,\n  existingCacheNode: CacheNode | void,\n  prefetchData: CacheNodeSeedData | null,\n  possiblyPartialPrefetchHead: HeadData | null,\n  isPrefetchHeadPartial: boolean,\n  segmentPath: FlightSegmentPath,\n  scrollableSegmentsResult: Array<FlightSegmentPath>\n): SPANavigationTask {\n  // Same traversal as updateCacheNodeNavigation, but we switch to this path\n  // once we reach the part of the tree that was not in the previous route. We\n  // don't need to diff against the old tree, we just need to create a new one.\n\n  // The head is assigned to every leaf segment delivered by the server. Based\n  // on corresponding logic in fill-lazy-items-till-leaf-with-head.ts\n  const routerStateChildren = routerState[1]\n  const isLeafSegment = Object.keys(routerStateChildren).length === 0\n\n  // Even we're rendering inside the \"new\" part of the target tree, we may have\n  // a locally cached segment that we can reuse. This may come from either 1)\n  // the CacheNode tree, which lives in React state and is populated by previous\n  // navigations; or 2) the prefetch cache, which is a separate cache that is\n  // populated by prefetches.\n  let rsc: React.ReactNode\n  let loading: LoadingModuleData | Promise<LoadingModuleData>\n  let head: HeadData | null\n  let cacheNodeNavigatedAt: number\n  if (\n    existingCacheNode !== undefined &&\n    // DYNAMIC_STALETIME_MS defaults to 0, but it can be increased using\n    // the experimental.staleTimes.dynamic config. When set, we'll avoid\n    // refetching dynamic data if it was fetched within the given threshold.\n    existingCacheNode.navigatedAt + DYNAMIC_STALETIME_MS > navigatedAt\n  ) {\n    // We have an existing CacheNode for this segment, and it's not stale. We\n    // should reuse it rather than request a new one.\n    rsc = existingCacheNode.rsc\n    loading = existingCacheNode.loading\n    head = existingCacheNode.head\n\n    // Don't update the navigatedAt timestamp, since we're reusing stale data.\n    cacheNodeNavigatedAt = existingCacheNode.navigatedAt\n  } else if (prefetchData !== null) {\n    // There's no existing CacheNode for this segment, but we do have prefetch\n    // data. If the prefetch data is fully static (i.e. does not contain any\n    // dynamic holes), we don't need to request it from the server.\n    rsc = prefetchData[1]\n    loading = prefetchData[3]\n    head = isLeafSegment ? possiblyPartialPrefetchHead : null\n    // Even though we're accessing the data from the prefetch cache, this is\n    // conceptually a new segment, not a reused one. So we should update the\n    // navigatedAt timestamp.\n    cacheNodeNavigatedAt = navigatedAt\n    const isPrefetchRscPartial = prefetchData[4]\n    if (\n      // Check if the segment data is partial\n      isPrefetchRscPartial ||\n      // Check if the head is partial (only relevant if this is a leaf segment)\n      (isPrefetchHeadPartial && isLeafSegment)\n    ) {\n      // We only have partial data from this segment. Like missing segments, we\n      // must request the full data from the server.\n      return spawnPendingTask(\n        navigatedAt,\n        routerState,\n        prefetchData,\n        possiblyPartialPrefetchHead,\n        isPrefetchHeadPartial,\n        segmentPath,\n        scrollableSegmentsResult\n      )\n    } else {\n      // The prefetch data is fully static, so we can omit it from the\n      // navigation request.\n    }\n  } else {\n    // There's no prefetch for this segment. Everything from this point will be\n    // requested from the server, even if there are static children below it.\n    // Create a terminal task node that will later be fulfilled by\n    // server response.\n    return spawnPendingTask(\n      navigatedAt,\n      routerState,\n      null,\n      possiblyPartialPrefetchHead,\n      isPrefetchHeadPartial,\n      segmentPath,\n      scrollableSegmentsResult\n    )\n  }\n\n  // We already have a full segment we can render, so we don't need to request a\n  // new one from the server. Keep traversing down the tree until we reach\n  // something that requires a dynamic request.\n  const prefetchDataChildren = prefetchData !== null ? prefetchData[2] : null\n  const taskChildren = new Map()\n  const existingCacheNodeChildren =\n    existingCacheNode !== undefined ? existingCacheNode.parallelRoutes : null\n  const cacheNodeChildren = new Map(existingCacheNodeChildren)\n  let dynamicRequestTreeChildren: {\n    [parallelRouteKey: string]: FlightRouterState\n  } = {}\n  let needsDynamicRequest = false\n  if (isLeafSegment) {\n    // The segment path of every leaf segment (i.e. page) is collected into\n    // a result array. This is used by the LayoutRouter to scroll to ensure that\n    // new pages are visible after a navigation.\n    // TODO: We should use a string to represent the segment path instead of\n    // an array. We already use a string representation for the path when\n    // accessing the Segment Cache, so we can use the same one.\n    scrollableSegmentsResult.push(segmentPath)\n  } else {\n    for (let parallelRouteKey in routerStateChildren) {\n      const routerStateChild: FlightRouterState =\n        routerStateChildren[parallelRouteKey]\n      const prefetchDataChild: CacheNodeSeedData | void | null =\n        prefetchDataChildren !== null\n          ? prefetchDataChildren[parallelRouteKey]\n          : null\n      const existingSegmentMapChild =\n        existingCacheNodeChildren !== null\n          ? existingCacheNodeChildren.get(parallelRouteKey)\n          : undefined\n      const segmentChild = routerStateChild[0]\n      const segmentPathChild = segmentPath.concat([\n        parallelRouteKey,\n        segmentChild,\n      ])\n      const segmentKeyChild = createRouterCacheKey(segmentChild)\n\n      const existingCacheNodeChild =\n        existingSegmentMapChild !== undefined\n          ? existingSegmentMapChild.get(segmentKeyChild)\n          : undefined\n\n      const taskChild = createCacheNodeOnNavigation(\n        navigatedAt,\n        routerStateChild,\n        existingCacheNodeChild,\n        prefetchDataChild,\n        possiblyPartialPrefetchHead,\n        isPrefetchHeadPartial,\n        segmentPathChild,\n        scrollableSegmentsResult\n      )\n      taskChildren.set(parallelRouteKey, taskChild)\n      const dynamicRequestTreeChild = taskChild.dynamicRequestTree\n      if (dynamicRequestTreeChild !== null) {\n        // Something in the child tree is dynamic.\n        needsDynamicRequest = true\n        dynamicRequestTreeChildren[parallelRouteKey] = dynamicRequestTreeChild\n      } else {\n        dynamicRequestTreeChildren[parallelRouteKey] = routerStateChild\n      }\n      const newCacheNodeChild = taskChild.node\n      if (newCacheNodeChild !== null) {\n        const newSegmentMapChild: ChildSegmentMap = new Map()\n        newSegmentMapChild.set(segmentKeyChild, newCacheNodeChild)\n        cacheNodeChildren.set(parallelRouteKey, newSegmentMapChild)\n      }\n    }\n  }\n\n  return {\n    // Since we're inside a new route tree, unlike the\n    // `updateCacheNodeOnNavigation` path, the router state on the children\n    // tasks is always the same as the router state we pass in. So we don't need\n    // to clone/modify it.\n    route: routerState,\n    node: {\n      lazyData: null,\n      // Since this segment is already full, we don't need to use the\n      // `prefetchRsc` field.\n      rsc,\n      prefetchRsc: null,\n      head,\n      prefetchHead: null,\n      loading,\n      parallelRoutes: cacheNodeChildren,\n      navigatedAt: cacheNodeNavigatedAt,\n    },\n    dynamicRequestTree: needsDynamicRequest\n      ? patchRouterStateWithNewChildren(routerState, dynamicRequestTreeChildren)\n      : null,\n    children: taskChildren,\n  }\n}\n\nfunction patchRouterStateWithNewChildren(\n  baseRouterState: FlightRouterState,\n  newChildren: { [parallelRouteKey: string]: FlightRouterState }\n): FlightRouterState {\n  const clone: FlightRouterState = [baseRouterState[0], newChildren]\n  // Based on equivalent logic in apply-router-state-patch-to-tree, but should\n  // confirm whether we need to copy all of these fields. Not sure the server\n  // ever sends, e.g. the refetch marker.\n  if (2 in baseRouterState) {\n    clone[2] = baseRouterState[2]\n  }\n  if (3 in baseRouterState) {\n    clone[3] = baseRouterState[3]\n  }\n  if (4 in baseRouterState) {\n    clone[4] = baseRouterState[4]\n  }\n  return clone\n}\n\nfunction spawnPendingTask(\n  navigatedAt: number,\n  routerState: FlightRouterState,\n  prefetchData: CacheNodeSeedData | null,\n  prefetchHead: HeadData | null,\n  isPrefetchHeadPartial: boolean,\n  segmentPath: FlightSegmentPath,\n  scrollableSegmentsResult: Array<FlightSegmentPath>\n): SPANavigationTask {\n  // Create a task that will later be fulfilled by data from the server.\n\n  // Clone the prefetched route tree and the `refetch` marker to it. We'll send\n  // this to the server so it knows where to start rendering.\n  const dynamicRequestTree = patchRouterStateWithNewChildren(\n    routerState,\n    routerState[1]\n  )\n  dynamicRequestTree[3] = 'refetch'\n\n  const newTask: Task = {\n    route: routerState,\n\n    // Corresponds to the part of the route that will be rendered on the server.\n    node: createPendingCacheNode(\n      navigatedAt,\n      routerState,\n      prefetchData,\n      prefetchHead,\n      isPrefetchHeadPartial,\n      segmentPath,\n      scrollableSegmentsResult\n    ),\n    // Because this is non-null, and it gets propagated up through the parent\n    // tasks, the root task will know that it needs to perform a server request.\n    dynamicRequestTree,\n    children: null,\n  }\n  return newTask\n}\n\nfunction spawnReusedTask(reusedRouterState: FlightRouterState): Task {\n  // Create a task that reuses an existing segment, e.g. when reusing\n  // the current active segment in place of a default route.\n  return {\n    route: reusedRouterState,\n    node: null,\n    dynamicRequestTree: null,\n    children: null,\n  }\n}\n\n// Writes a dynamic server response into the tree created by\n// updateCacheNodeOnNavigation. All pending promises that were spawned by the\n// navigation will be resolved, either with dynamic data from the server, or\n// `null` to indicate that the data is missing.\n//\n// A `null` value will trigger a lazy fetch during render, which will then patch\n// up the tree using the same mechanism as the non-PPR implementation\n// (serverPatchReducer).\n//\n// Usually, the server will respond with exactly the subset of data that we're\n// waiting for — everything below the nearest shared layout. But technically,\n// the server can return anything it wants.\n//\n// This does _not_ create a new tree; it modifies the existing one in place.\n// Which means it must follow the Suspense rules of cache safety.\nexport function listenForDynamicRequest(\n  task: SPANavigationTask,\n  responsePromise: Promise<FetchServerResponseResult>\n) {\n  responsePromise.then(\n    ({ flightData }: FetchServerResponseResult) => {\n      if (typeof flightData === 'string') {\n        // Happens when navigating to page in `pages` from `app`. We shouldn't\n        // get here because should have already handled this during\n        // the prefetch.\n        return\n      }\n      for (const normalizedFlightData of flightData) {\n        const {\n          segmentPath,\n          tree: serverRouterState,\n          seedData: dynamicData,\n          head: dynamicHead,\n        } = normalizedFlightData\n\n        if (!dynamicData) {\n          // This shouldn't happen. PPR should always send back a response.\n          // However, `FlightDataPath` is a shared type and the pre-PPR handling of\n          // this might return null.\n          continue\n        }\n\n        writeDynamicDataIntoPendingTask(\n          task,\n          segmentPath,\n          serverRouterState,\n          dynamicData,\n          dynamicHead\n        )\n      }\n\n      // Now that we've exhausted all the data we received from the server, if\n      // there are any remaining pending tasks in the tree, abort them now.\n      // If there's any missing data, it will trigger a lazy fetch.\n      abortTask(task, null)\n    },\n    (error: any) => {\n      // This will trigger an error during render\n      abortTask(task, error)\n    }\n  )\n}\n\nfunction writeDynamicDataIntoPendingTask(\n  rootTask: SPANavigationTask,\n  segmentPath: FlightSegmentPath,\n  serverRouterState: FlightRouterState,\n  dynamicData: CacheNodeSeedData,\n  dynamicHead: HeadData\n) {\n  // The data sent by the server represents only a subtree of the app. We need\n  // to find the part of the task tree that matches the server response, and\n  // fulfill it using the dynamic data.\n  //\n  // segmentPath represents the parent path of subtree. It's a repeating pattern\n  // of parallel route key and segment:\n  //\n  //   [string, Segment, string, Segment, string, Segment, ...]\n  //\n  // Iterate through the path and finish any tasks that match this payload.\n  let task = rootTask\n  for (let i = 0; i < segmentPath.length; i += 2) {\n    const parallelRouteKey: string = segmentPath[i]\n    const segment: Segment = segmentPath[i + 1]\n    const taskChildren = task.children\n    if (taskChildren !== null) {\n      const taskChild = taskChildren.get(parallelRouteKey)\n      if (taskChild !== undefined) {\n        const taskSegment = taskChild.route[0]\n        if (matchSegment(segment, taskSegment)) {\n          // Found a match for this task. Keep traversing down the task tree.\n          task = taskChild\n          continue\n        }\n      }\n    }\n    // We didn't find a child task that matches the server data. Exit. We won't\n    // abort the task, though, because a different FlightDataPath may be able to\n    // fulfill it (see loop in listenForDynamicRequest). We only abort tasks\n    // once we've run out of data.\n    return\n  }\n\n  finishTaskUsingDynamicDataPayload(\n    task,\n    serverRouterState,\n    dynamicData,\n    dynamicHead\n  )\n}\n\nfunction finishTaskUsingDynamicDataPayload(\n  task: SPANavigationTask,\n  serverRouterState: FlightRouterState,\n  dynamicData: CacheNodeSeedData,\n  dynamicHead: HeadData\n) {\n  if (task.dynamicRequestTree === null) {\n    // Everything in this subtree is already complete. Bail out.\n    return\n  }\n\n  // dynamicData may represent a larger subtree than the task. Before we can\n  // finish the task, we need to line them up.\n  const taskChildren = task.children\n  const taskNode = task.node\n  if (taskChildren === null) {\n    // We've reached the leaf node of the pending task. The server data tree\n    // lines up the pending Cache Node tree. We can now switch to the\n    // normal algorithm.\n    if (taskNode !== null) {\n      finishPendingCacheNode(\n        taskNode,\n        task.route,\n        serverRouterState,\n        dynamicData,\n        dynamicHead\n      )\n      // Set this to null to indicate that this task is now complete.\n      task.dynamicRequestTree = null\n    }\n    return\n  }\n  // The server returned more data than we need to finish the task. Skip over\n  // the extra segments until we reach the leaf task node.\n  const serverChildren = serverRouterState[1]\n  const dynamicDataChildren = dynamicData[2]\n\n  for (const parallelRouteKey in serverRouterState) {\n    const serverRouterStateChild: FlightRouterState =\n      serverChildren[parallelRouteKey]\n    const dynamicDataChild: CacheNodeSeedData | null | void =\n      dynamicDataChildren[parallelRouteKey]\n\n    const taskChild = taskChildren.get(parallelRouteKey)\n    if (taskChild !== undefined) {\n      const taskSegment = taskChild.route[0]\n      if (\n        matchSegment(serverRouterStateChild[0], taskSegment) &&\n        dynamicDataChild !== null &&\n        dynamicDataChild !== undefined\n      ) {\n        // Found a match for this task. Keep traversing down the task tree.\n        return finishTaskUsingDynamicDataPayload(\n          taskChild,\n          serverRouterStateChild,\n          dynamicDataChild,\n          dynamicHead\n        )\n      }\n    }\n    // We didn't find a child task that matches the server data. We won't abort\n    // the task, though, because a different FlightDataPath may be able to\n    // fulfill it (see loop in listenForDynamicRequest). We only abort tasks\n    // once we've run out of data.\n  }\n}\n\nfunction createPendingCacheNode(\n  navigatedAt: number,\n  routerState: FlightRouterState,\n  prefetchData: CacheNodeSeedData | null,\n  prefetchHead: HeadData | null,\n  isPrefetchHeadPartial: boolean,\n  segmentPath: FlightSegmentPath,\n  scrollableSegmentsResult: Array<FlightSegmentPath>\n): ReadyCacheNode {\n  const routerStateChildren = routerState[1]\n  const prefetchDataChildren = prefetchData !== null ? prefetchData[2] : null\n\n  const parallelRoutes = new Map()\n  for (let parallelRouteKey in routerStateChildren) {\n    const routerStateChild: FlightRouterState =\n      routerStateChildren[parallelRouteKey]\n    const prefetchDataChild: CacheNodeSeedData | null | void =\n      prefetchDataChildren !== null\n        ? prefetchDataChildren[parallelRouteKey]\n        : null\n\n    const segmentChild = routerStateChild[0]\n    const segmentPathChild = segmentPath.concat([\n      parallelRouteKey,\n      segmentChild,\n    ])\n    const segmentKeyChild = createRouterCacheKey(segmentChild)\n\n    const newCacheNodeChild = createPendingCacheNode(\n      navigatedAt,\n      routerStateChild,\n      prefetchDataChild === undefined ? null : prefetchDataChild,\n      prefetchHead,\n      isPrefetchHeadPartial,\n      segmentPathChild,\n      scrollableSegmentsResult\n    )\n\n    const newSegmentMapChild: ChildSegmentMap = new Map()\n    newSegmentMapChild.set(segmentKeyChild, newCacheNodeChild)\n    parallelRoutes.set(parallelRouteKey, newSegmentMapChild)\n  }\n\n  // The head is assigned to every leaf segment delivered by the server. Based\n  // on corresponding logic in fill-lazy-items-till-leaf-with-head.ts\n  const isLeafSegment = parallelRoutes.size === 0\n\n  if (isLeafSegment) {\n    // The segment path of every leaf segment (i.e. page) is collected into\n    // a result array. This is used by the LayoutRouter to scroll to ensure that\n    // new pages are visible after a navigation.\n    // TODO: We should use a string to represent the segment path instead of\n    // an array. We already use a string representation for the path when\n    // accessing the Segment Cache, so we can use the same one.\n    scrollableSegmentsResult.push(segmentPath)\n  }\n\n  const maybePrefetchRsc = prefetchData !== null ? prefetchData[1] : null\n  const maybePrefetchLoading = prefetchData !== null ? prefetchData[3] : null\n  return {\n    lazyData: null,\n    parallelRoutes: parallelRoutes,\n\n    prefetchRsc: maybePrefetchRsc !== undefined ? maybePrefetchRsc : null,\n    prefetchHead: isLeafSegment ? prefetchHead : [null, null],\n\n    // TODO: Technically, a loading boundary could contain dynamic data. We must\n    // have separate `loading` and `prefetchLoading` fields to handle this, like\n    // we do for the segment data and head.\n    loading: maybePrefetchLoading !== undefined ? maybePrefetchLoading : null,\n\n    // Create a deferred promise. This will be fulfilled once the dynamic\n    // response is received from the server.\n    rsc: createDeferredRsc() as React.ReactNode,\n    head: isLeafSegment ? (createDeferredRsc() as React.ReactNode) : null,\n\n    navigatedAt,\n  }\n}\n\nfunction finishPendingCacheNode(\n  cacheNode: CacheNode,\n  taskState: FlightRouterState,\n  serverState: FlightRouterState,\n  dynamicData: CacheNodeSeedData,\n  dynamicHead: HeadData\n): void {\n  // Writes a dynamic response into an existing Cache Node tree. This does _not_\n  // create a new tree, it updates the existing tree in-place. So it must follow\n  // the Suspense rules of cache safety — it can resolve pending promises, but\n  // it cannot overwrite existing data. It can add segments to the tree (because\n  // a missing segment will cause the layout router to suspend).\n  // but it cannot delete them.\n  //\n  // We must resolve every promise in the tree, or else it will suspend\n  // indefinitely. If we did not receive data for a segment, we will resolve its\n  // data promise to `null` to trigger a lazy fetch during render.\n  const taskStateChildren = taskState[1]\n  const serverStateChildren = serverState[1]\n  const dataChildren = dynamicData[2]\n\n  // The router state that we traverse the tree with (taskState) is the same one\n  // that we used to construct the pending Cache Node tree. That way we're sure\n  // to resolve all the pending promises.\n  const parallelRoutes = cacheNode.parallelRoutes\n  for (let parallelRouteKey in taskStateChildren) {\n    const taskStateChild: FlightRouterState =\n      taskStateChildren[parallelRouteKey]\n    const serverStateChild: FlightRouterState | void =\n      serverStateChildren[parallelRouteKey]\n    const dataChild: CacheNodeSeedData | null | void =\n      dataChildren[parallelRouteKey]\n\n    const segmentMapChild = parallelRoutes.get(parallelRouteKey)\n    const taskSegmentChild = taskStateChild[0]\n    const taskSegmentKeyChild = createRouterCacheKey(taskSegmentChild)\n\n    const cacheNodeChild =\n      segmentMapChild !== undefined\n        ? segmentMapChild.get(taskSegmentKeyChild)\n        : undefined\n\n    if (cacheNodeChild !== undefined) {\n      if (\n        serverStateChild !== undefined &&\n        matchSegment(taskSegmentChild, serverStateChild[0])\n      ) {\n        if (dataChild !== undefined && dataChild !== null) {\n          // This is the happy path. Recursively update all the children.\n          finishPendingCacheNode(\n            cacheNodeChild,\n            taskStateChild,\n            serverStateChild,\n            dataChild,\n            dynamicHead\n          )\n        } else {\n          // The server never returned data for this segment. Trigger a lazy\n          // fetch during render. This shouldn't happen because the Route Tree\n          // and the Seed Data tree sent by the server should always be the same\n          // shape when part of the same server response.\n          abortPendingCacheNode(taskStateChild, cacheNodeChild, null)\n        }\n      } else {\n        // The server never returned data for this segment. Trigger a lazy\n        // fetch during render.\n        abortPendingCacheNode(taskStateChild, cacheNodeChild, null)\n      }\n    } else {\n      // The server response matches what was expected to receive, but there's\n      // no matching Cache Node in the task tree. This is a bug in the\n      // implementation because we should have created a node for every\n      // segment in the tree that's associated with this task.\n    }\n  }\n\n  // Use the dynamic data from the server to fulfill the deferred RSC promise\n  // on the Cache Node.\n  const rsc = cacheNode.rsc\n  const dynamicSegmentData = dynamicData[1]\n  if (rsc === null) {\n    // This is a lazy cache node. We can overwrite it. This is only safe\n    // because we know that the LayoutRouter suspends if `rsc` is `null`.\n    cacheNode.rsc = dynamicSegmentData\n  } else if (isDeferredRsc(rsc)) {\n    // This is a deferred RSC promise. We can fulfill it with the data we just\n    // received from the server. If it was already resolved by a different\n    // navigation, then this does nothing because we can't overwrite data.\n    rsc.resolve(dynamicSegmentData)\n  } else {\n    // This is not a deferred RSC promise, nor is it empty, so it must have\n    // been populated by a different navigation. We must not overwrite it.\n  }\n\n  // Check if this is a leaf segment. If so, it will have a `head` property with\n  // a pending promise that needs to be resolved with the dynamic head from\n  // the server.\n  const head = cacheNode.head\n  if (isDeferredRsc(head)) {\n    head.resolve(dynamicHead)\n  }\n}\n\nexport function abortTask(task: SPANavigationTask, error: any): void {\n  const cacheNode = task.node\n  if (cacheNode === null) {\n    // This indicates the task is already complete.\n    return\n  }\n\n  const taskChildren = task.children\n  if (taskChildren === null) {\n    // Reached the leaf task node. This is the root of a pending cache\n    // node tree.\n    abortPendingCacheNode(task.route, cacheNode, error)\n  } else {\n    // This is an intermediate task node. Keep traversing until we reach a\n    // task node with no children. That will be the root of the cache node tree\n    // that needs to be resolved.\n    for (const taskChild of taskChildren.values()) {\n      abortTask(taskChild, error)\n    }\n  }\n\n  // Set this to null to indicate that this task is now complete.\n  task.dynamicRequestTree = null\n}\n\nfunction abortPendingCacheNode(\n  routerState: FlightRouterState,\n  cacheNode: CacheNode,\n  error: any\n): void {\n  // For every pending segment in the tree, resolve its `rsc` promise to `null`\n  // to trigger a lazy fetch during render.\n  //\n  // Or, if an error object is provided, it will error instead.\n  const routerStateChildren = routerState[1]\n  const parallelRoutes = cacheNode.parallelRoutes\n  for (let parallelRouteKey in routerStateChildren) {\n    const routerStateChild: FlightRouterState =\n      routerStateChildren[parallelRouteKey]\n    const segmentMapChild = parallelRoutes.get(parallelRouteKey)\n    if (segmentMapChild === undefined) {\n      // This shouldn't happen because we're traversing the same tree that was\n      // used to construct the cache nodes in the first place.\n      continue\n    }\n    const segmentChild = routerStateChild[0]\n    const segmentKeyChild = createRouterCacheKey(segmentChild)\n    const cacheNodeChild = segmentMapChild.get(segmentKeyChild)\n    if (cacheNodeChild !== undefined) {\n      abortPendingCacheNode(routerStateChild, cacheNodeChild, error)\n    } else {\n      // This shouldn't happen because we're traversing the same tree that was\n      // used to construct the cache nodes in the first place.\n    }\n  }\n  const rsc = cacheNode.rsc\n  if (isDeferredRsc(rsc)) {\n    if (error === null) {\n      // This will trigger a lazy fetch during render.\n      rsc.resolve(null)\n    } else {\n      // This will trigger an error during rendering.\n      rsc.reject(error)\n    }\n  }\n\n  // Check if this is a leaf segment. If so, it will have a `head` property with\n  // a pending promise that needs to be resolved. If an error was provided, we\n  // will not resolve it with an error, since this is rendered at the root of\n  // the app. We want the segment to error, not the entire app.\n  const head = cacheNode.head\n  if (isDeferredRsc(head)) {\n    head.resolve(null)\n  }\n}\n\nexport function updateCacheNodeOnPopstateRestoration(\n  oldCacheNode: CacheNode,\n  routerState: FlightRouterState\n): ReadyCacheNode {\n  // A popstate navigation reads data from the local cache. It does not issue\n  // new network requests (unless the cache entries have been evicted). So, we\n  // update the cache to drop the prefetch data for any segment whose dynamic\n  // data was already received. This prevents an unnecessary flash back to PPR\n  // state during a back/forward navigation.\n  //\n  // This function clones the entire cache node tree and sets the `prefetchRsc`\n  // field to `null` to prevent it from being rendered. We can't mutate the node\n  // in place because this is a concurrent data structure.\n\n  const routerStateChildren = routerState[1]\n  const oldParallelRoutes = oldCacheNode.parallelRoutes\n  const newParallelRoutes = new Map(oldParallelRoutes)\n  for (let parallelRouteKey in routerStateChildren) {\n    const routerStateChild: FlightRouterState =\n      routerStateChildren[parallelRouteKey]\n    const segmentChild = routerStateChild[0]\n    const segmentKeyChild = createRouterCacheKey(segmentChild)\n    const oldSegmentMapChild = oldParallelRoutes.get(parallelRouteKey)\n    if (oldSegmentMapChild !== undefined) {\n      const oldCacheNodeChild = oldSegmentMapChild.get(segmentKeyChild)\n      if (oldCacheNodeChild !== undefined) {\n        const newCacheNodeChild = updateCacheNodeOnPopstateRestoration(\n          oldCacheNodeChild,\n          routerStateChild\n        )\n        const newSegmentMapChild = new Map(oldSegmentMapChild)\n        newSegmentMapChild.set(segmentKeyChild, newCacheNodeChild)\n        newParallelRoutes.set(parallelRouteKey, newSegmentMapChild)\n      }\n    }\n  }\n\n  // Only show prefetched data if the dynamic data is still pending.\n  //\n  // Tehnically, what we're actually checking is whether the dynamic network\n  // response was received. But since it's a streaming response, this does not\n  // mean that all the dynamic data has fully streamed in. It just means that\n  // _some_ of the dynamic data was received. But as a heuristic, we assume that\n  // the rest dynamic data will stream in quickly, so it's still better to skip\n  // the prefetch state.\n  const rsc = oldCacheNode.rsc\n  const shouldUsePrefetch = isDeferredRsc(rsc) && rsc.status === 'pending'\n\n  return {\n    lazyData: null,\n    rsc,\n    head: oldCacheNode.head,\n\n    prefetchHead: shouldUsePrefetch ? oldCacheNode.prefetchHead : [null, null],\n    prefetchRsc: shouldUsePrefetch ? oldCacheNode.prefetchRsc : null,\n    loading: oldCacheNode.loading,\n\n    // These are the cloned children we computed above\n    parallelRoutes: newParallelRoutes,\n\n    navigatedAt: oldCacheNode.navigatedAt,\n  }\n}\n\nconst DEFERRED = Symbol()\n\ntype PendingDeferredRsc = Promise<React.ReactNode> & {\n  status: 'pending'\n  resolve: (value: React.ReactNode) => void\n  reject: (error: any) => void\n  tag: Symbol\n}\n\ntype FulfilledDeferredRsc = Promise<React.ReactNode> & {\n  status: 'fulfilled'\n  value: React.ReactNode\n  resolve: (value: React.ReactNode) => void\n  reject: (error: any) => void\n  tag: Symbol\n}\n\ntype RejectedDeferredRsc = Promise<React.ReactNode> & {\n  status: 'rejected'\n  reason: any\n  resolve: (value: React.ReactNode) => void\n  reject: (error: any) => void\n  tag: Symbol\n}\n\ntype DeferredRsc =\n  | PendingDeferredRsc\n  | FulfilledDeferredRsc\n  | RejectedDeferredRsc\n\n// This type exists to distinguish a DeferredRsc from a Flight promise. It's a\n// compromise to avoid adding an extra field on every Cache Node, which would be\n// awkward because the pre-PPR parts of codebase would need to account for it,\n// too. We can remove it once type Cache Node type is more settled.\nfunction isDeferredRsc(value: any): value is DeferredRsc {\n  return value && value.tag === DEFERRED\n}\n\nfunction createDeferredRsc(): PendingDeferredRsc {\n  let resolve: any\n  let reject: any\n  const pendingRsc = new Promise<React.ReactNode>((res, rej) => {\n    resolve = res\n    reject = rej\n  }) as PendingDeferredRsc\n  pendingRsc.status = 'pending'\n  pendingRsc.resolve = (value: React.ReactNode) => {\n    if (pendingRsc.status === 'pending') {\n      const fulfilledRsc: FulfilledDeferredRsc = pendingRsc as any\n      fulfilledRsc.status = 'fulfilled'\n      fulfilledRsc.value = value\n      resolve(value)\n    }\n  }\n  pendingRsc.reject = (error: any) => {\n    if (pendingRsc.status === 'pending') {\n      const rejectedRsc: RejectedDeferredRsc = pendingRsc as any\n      rejectedRsc.status = 'rejected'\n      rejectedRsc.reason = error\n      reject(error)\n    }\n  }\n  pendingRsc.tag = DEFERRED\n  return pendingRsc\n}\n","import type { FlightSegmentPath } from '../../../server/app-render/types'\nimport type { CacheNode } from '../../../shared/lib/app-router-context.shared-runtime'\nimport { getNextFlightSegmentPath } from '../../flight-data-helpers'\nimport { createRouterCacheKey } from './create-router-cache-key'\n\n/**\n * This will clear the CacheNode data for a particular segment path. This will cause a lazy-fetch in layout router to fill in new data.\n */\nexport function clearCacheNodeDataForSegmentPath(\n  newCache: CacheNode,\n  existingCache: CacheNode,\n  flightSegmentPath: FlightSegmentPath\n): void {\n  const isLastEntry = flightSegmentPath.length <= 2\n\n  const [parallelRouteKey, segment] = flightSegmentPath\n  const cacheKey = createRouterCacheKey(segment)\n\n  const existingChildSegmentMap =\n    existingCache.parallelRoutes.get(parallelRouteKey)\n\n  let childSegmentMap = newCache.parallelRoutes.get(parallelRouteKey)\n\n  if (!childSegmentMap || childSegmentMap === existingChildSegmentMap) {\n    childSegmentMap = new Map(existingChildSegmentMap)\n    newCache.parallelRoutes.set(parallelRouteKey, childSegmentMap)\n  }\n\n  const existingChildCacheNode = existingChildSegmentMap?.get(cacheKey)\n  let childCacheNode = childSegmentMap.get(cacheKey)\n\n  // In case of last segment start off the fetch at this level and don't copy further down.\n  if (isLastEntry) {\n    if (\n      !childCacheNode ||\n      !childCacheNode.lazyData ||\n      childCacheNode === existingChildCacheNode\n    ) {\n      childSegmentMap.set(cacheKey, {\n        lazyData: null,\n        rsc: null,\n        prefetchRsc: null,\n        head: null,\n        prefetchHead: null,\n        parallelRoutes: new Map(),\n        loading: null,\n        navigatedAt: -1,\n      })\n    }\n    return\n  }\n\n  if (!childCacheNode || !existingChildCacheNode) {\n    // Start fetch in the place where the existing cache doesn't have the data yet.\n    if (!childCacheNode) {\n      childSegmentMap.set(cacheKey, {\n        lazyData: null,\n        rsc: null,\n        prefetchRsc: null,\n        head: null,\n        prefetchHead: null,\n        parallelRoutes: new Map(),\n        loading: null,\n        navigatedAt: -1,\n      })\n    }\n    return\n  }\n\n  if (childCacheNode === existingChildCacheNode) {\n    childCacheNode = {\n      lazyData: childCacheNode.lazyData,\n      rsc: childCacheNode.rsc,\n      prefetchRsc: childCacheNode.prefetchRsc,\n      head: childCacheNode.head,\n      prefetchHead: childCacheNode.prefetchHead,\n      parallelRoutes: new Map(childCacheNode.parallelRoutes),\n      loading: childCacheNode.loading,\n    } as CacheNode\n    childSegmentMap.set(cacheKey, childCacheNode)\n  }\n\n  return clearCacheNodeDataForSegmentPath(\n    childCacheNode,\n    existingChildCacheNode,\n    getNextFlightSegmentPath(flightSegmentPath)\n  )\n}\n","import type {\n  CacheNodeSeedData,\n  FlightRouterState,\n} from '../../../server/app-render/types'\nimport type { CacheNode } from '../../../shared/lib/app-router-context.shared-runtime'\nimport {\n  addSearchParamsIfPageSegment,\n  PAGE_SEGMENT_KEY,\n} from '../../../shared/lib/segment'\nimport type { NormalizedFlightData } from '../../flight-data-helpers'\nimport { createEmptyCacheNode } from '../app-router'\nimport { applyRouterStatePatchToTree } from './apply-router-state-patch-to-tree'\nimport { createHrefFromUrl } from './create-href-from-url'\nimport { createRouterCacheKey } from './create-router-cache-key'\nimport { fillCacheWithNewSubTreeDataButOnlyLoading } from './fill-cache-with-new-subtree-data'\nimport { handleMutable } from './handle-mutable'\nimport type { Mutable, ReadonlyReducerState } from './router-reducer-types'\n\n/**\n * This is a stop-gap until per-segment caching is implemented. It leverages the `aliased` flag that is added\n * to prefetch entries when it's determined that the loading state from that entry should be used for this navigation.\n * This function takes the aliased entry and only applies the loading state to the updated cache node.\n * We should remove this once per-segment fetching is implemented as ideally the prefetch cache will contain a\n * more granular segment map and so the router will be able to simply re-use the loading segment for the new navigation.\n */\nexport function handleAliasedPrefetchEntry(\n  navigatedAt: number,\n  state: ReadonlyReducerState,\n  flightData: string | NormalizedFlightData[],\n  url: URL,\n  mutable: Mutable\n) {\n  let currentTree = state.tree\n  let currentCache = state.cache\n  const href = createHrefFromUrl(url)\n  let applied\n\n  if (typeof flightData === 'string') {\n    return false\n  }\n\n  for (const normalizedFlightData of flightData) {\n    // If the segment doesn't have a loading component, we don't need to do anything.\n    if (!hasLoadingComponentInSeedData(normalizedFlightData.seedData)) {\n      continue\n    }\n\n    let treePatch = normalizedFlightData.tree\n    // Segments are keyed by searchParams (e.g. __PAGE__?{\"foo\":\"bar\"}). We might return a less specific, param-less entry,\n    // so we ensure that the final tree contains the correct searchParams (reflected in the URL) are provided in the updated FlightRouterState tree.\n    // We only do this on the first read, as otherwise we'd be overwriting the searchParams that may have already been set\n    treePatch = addSearchParamsToPageSegments(\n      treePatch,\n      Object.fromEntries(url.searchParams)\n    )\n\n    const { seedData, isRootRender, pathToSegment } = normalizedFlightData\n    // TODO-APP: remove ''\n    const flightSegmentPathWithLeadingEmpty = ['', ...pathToSegment]\n\n    // Segments are keyed by searchParams (e.g. __PAGE__?{\"foo\":\"bar\"}). We might return a less specific, param-less entry,\n    // so we ensure that the final tree contains the correct searchParams (reflected in the URL) are provided in the updated FlightRouterState tree.\n    // We only do this on the first read, as otherwise we'd be overwriting the searchParams that may have already been set\n    treePatch = addSearchParamsToPageSegments(\n      treePatch,\n      Object.fromEntries(url.searchParams)\n    )\n\n    let newTree = applyRouterStatePatchToTree(\n      flightSegmentPathWithLeadingEmpty,\n      currentTree,\n      treePatch,\n      href\n    )\n\n    const newCache = createEmptyCacheNode()\n\n    // The prefetch cache entry was aliased -- this signals that we only fill in the cache with the\n    // loading state and not the actual parallel route seed data.\n    if (isRootRender && seedData) {\n      // Fill in the cache with the new loading / rsc data\n      const rsc = seedData[1]\n      const loading = seedData[3]\n      newCache.loading = loading\n      newCache.rsc = rsc\n\n      // Construct a new tree and apply the aliased loading state for each parallel route\n      fillNewTreeWithOnlyLoadingSegments(\n        navigatedAt,\n        newCache,\n        currentCache,\n        treePatch,\n        seedData\n      )\n    } else {\n      // Copy rsc for the root node of the cache.\n      newCache.rsc = currentCache.rsc\n      newCache.prefetchRsc = currentCache.prefetchRsc\n      newCache.loading = currentCache.loading\n      newCache.parallelRoutes = new Map(currentCache.parallelRoutes)\n\n      // copy the loading state only into the leaf node (the part that changed)\n      fillCacheWithNewSubTreeDataButOnlyLoading(\n        navigatedAt,\n        newCache,\n        currentCache,\n        normalizedFlightData\n      )\n    }\n\n    // If we don't have an updated tree, there's no reason to update the cache, as the tree\n    // dictates what cache nodes to render.\n    if (newTree) {\n      currentTree = newTree\n      currentCache = newCache\n      applied = true\n    }\n  }\n\n  if (!applied) {\n    return false\n  }\n\n  mutable.patchedTree = currentTree\n  mutable.cache = currentCache\n  mutable.canonicalUrl = href\n  mutable.hashFragment = url.hash\n\n  return handleMutable(state, mutable)\n}\n\nfunction hasLoadingComponentInSeedData(seedData: CacheNodeSeedData | null) {\n  if (!seedData) return false\n\n  const parallelRoutes = seedData[2]\n  const loading = seedData[3]\n\n  if (loading) {\n    return true\n  }\n\n  for (const key in parallelRoutes) {\n    if (hasLoadingComponentInSeedData(parallelRoutes[key])) {\n      return true\n    }\n  }\n\n  return false\n}\n\nfunction fillNewTreeWithOnlyLoadingSegments(\n  navigatedAt: number,\n  newCache: CacheNode,\n  existingCache: CacheNode,\n  routerState: FlightRouterState,\n  cacheNodeSeedData: CacheNodeSeedData | null\n) {\n  const isLastSegment = Object.keys(routerState[1]).length === 0\n  if (isLastSegment) {\n    return\n  }\n\n  for (const key in routerState[1]) {\n    const parallelRouteState = routerState[1][key]\n    const segmentForParallelRoute = parallelRouteState[0]\n    const cacheKey = createRouterCacheKey(segmentForParallelRoute)\n\n    const parallelSeedData =\n      cacheNodeSeedData !== null && cacheNodeSeedData[2][key] !== undefined\n        ? cacheNodeSeedData[2][key]\n        : null\n\n    let newCacheNode: CacheNode\n    if (parallelSeedData !== null) {\n      // New data was sent from the server.\n      const rsc = parallelSeedData[1]\n      const loading = parallelSeedData[3]\n      newCacheNode = {\n        lazyData: null,\n        // copy the layout but null the page segment as that's not meant to be used\n        rsc: segmentForParallelRoute.includes(PAGE_SEGMENT_KEY) ? null : rsc,\n        prefetchRsc: null,\n        head: null,\n        prefetchHead: null,\n        parallelRoutes: new Map(),\n        loading,\n        navigatedAt,\n      }\n    } else {\n      // No data available for this node. This will trigger a lazy fetch\n      // during render.\n      newCacheNode = {\n        lazyData: null,\n        rsc: null,\n        prefetchRsc: null,\n        head: null,\n        prefetchHead: null,\n        parallelRoutes: new Map(),\n        loading: null,\n        navigatedAt: -1,\n      }\n    }\n\n    const existingParallelRoutes = newCache.parallelRoutes.get(key)\n    if (existingParallelRoutes) {\n      existingParallelRoutes.set(cacheKey, newCacheNode)\n    } else {\n      newCache.parallelRoutes.set(key, new Map([[cacheKey, newCacheNode]]))\n    }\n\n    fillNewTreeWithOnlyLoadingSegments(\n      navigatedAt,\n      newCacheNode,\n      existingCache,\n      parallelRouteState,\n      parallelSeedData\n    )\n  }\n}\n\n/**\n * Add search params to the page segments in the flight router state\n * Page segments that are associated with search params have a page segment key\n * followed by a query string. This function will add those params to the page segment.\n * This is useful if we return an aliased prefetch entry (ie, won't have search params)\n * but the canonical router URL has search params.\n */\nexport function addSearchParamsToPageSegments(\n  flightRouterState: FlightRouterState,\n  searchParams: Record<string, string | string[] | undefined>\n): FlightRouterState {\n  const [segment, parallelRoutes, ...rest] = flightRouterState\n\n  // If it's a page segment, modify the segment by adding search params\n  if (segment.includes(PAGE_SEGMENT_KEY)) {\n    const newSegment = addSearchParamsIfPageSegment(segment, searchParams)\n    return [newSegment, parallelRoutes, ...rest]\n  }\n\n  // Otherwise, recurse through the parallel routes and return a new tree\n  const updatedParallelRoutes: { [key: string]: FlightRouterState } = {}\n\n  for (const [key, parallelRoute] of Object.entries(parallelRoutes)) {\n    updatedParallelRoutes[key] = addSearchParamsToPageSegments(\n      parallelRoute,\n      searchParams\n    )\n  }\n\n  return [segment, updatedParallelRoutes, ...rest]\n}\n","/**\n * Entry point to the Segment Cache implementation.\n *\n * All code related to the Segment Cache lives `segment-cache-impl` directory.\n * Callers access it through this indirection.\n *\n * This is to ensure the code is dead code eliminated from the bundle if the\n * flag is disabled.\n *\n * TODO: This is super tedious. Since experimental flags are an essential part\n * of our workflow, we should establish a better pattern for dead code\n * elimination. Ideally it would be done at the bundler level, like how React's\n * build process works. In the React repo, you don't even need to add any extra\n * configuration per experiment — if the code is not reachable, it gets stripped\n * from the build automatically by Rollup. Or, shorter term, we could stub out\n * experimental modules at build time by updating the build config, i.e. a more\n * automated version of what I'm doing manually in this file.\n */\n\nexport type { NavigationResult } from './segment-cache-impl/navigation'\nexport type { PrefetchTask } from './segment-cache-impl/scheduler'\n\nconst notEnabled: any = () => {\n  throw new Error(\n    'Segment Cache experiment is not enabled. This is a bug in Next.js.'\n  )\n}\n\nexport const prefetch: typeof import('./segment-cache-impl/prefetch').prefetch =\n  process.env.__NEXT_CLIENT_SEGMENT_CACHE\n    ? function (...args) {\n        return require('./segment-cache-impl/prefetch').prefetch(...args)\n      }\n    : notEnabled\n\nexport const navigate: typeof import('./segment-cache-impl/navigation').navigate =\n  process.env.__NEXT_CLIENT_SEGMENT_CACHE\n    ? function (...args) {\n        return require('./segment-cache-impl/navigation').navigate(...args)\n      }\n    : notEnabled\n\nexport const revalidateEntireCache: typeof import('./segment-cache-impl/cache').revalidateEntireCache =\n  process.env.__NEXT_CLIENT_SEGMENT_CACHE\n    ? function (...args) {\n        return require('./segment-cache-impl/cache').revalidateEntireCache(\n          ...args\n        )\n      }\n    : notEnabled\n\nexport const getCurrentCacheVersion: typeof import('./segment-cache-impl/cache').getCurrentCacheVersion =\n  process.env.__NEXT_CLIENT_SEGMENT_CACHE\n    ? function (...args) {\n        return require('./segment-cache-impl/cache').getCurrentCacheVersion(\n          ...args\n        )\n      }\n    : notEnabled\n\nexport const schedulePrefetchTask: typeof import('./segment-cache-impl/scheduler').schedulePrefetchTask =\n  process.env.__NEXT_CLIENT_SEGMENT_CACHE\n    ? function (...args) {\n        return require('./segment-cache-impl/scheduler').schedulePrefetchTask(\n          ...args\n        )\n      }\n    : notEnabled\n\nexport const cancelPrefetchTask: typeof import('./segment-cache-impl/scheduler').cancelPrefetchTask =\n  process.env.__NEXT_CLIENT_SEGMENT_CACHE\n    ? function (...args) {\n        return require('./segment-cache-impl/scheduler').cancelPrefetchTask(\n          ...args\n        )\n      }\n    : notEnabled\n\nexport const reschedulePrefetchTask: typeof import('./segment-cache-impl/scheduler').reschedulePrefetchTask =\n  process.env.__NEXT_CLIENT_SEGMENT_CACHE\n    ? function (...args) {\n        return require('./segment-cache-impl/scheduler').reschedulePrefetchTask(\n          ...args\n        )\n      }\n    : notEnabled\n\nexport const createCacheKey: typeof import('./segment-cache-impl/cache-key').createCacheKey =\n  process.env.__NEXT_CLIENT_SEGMENT_CACHE\n    ? function (...args) {\n        return require('./segment-cache-impl/cache-key').createCacheKey(...args)\n      }\n    : notEnabled\n\n/**\n * Below are public constants. They're small enough that we don't need to\n * DCE them.\n */\n\nexport const enum NavigationResultTag {\n  MPA,\n  Success,\n  NoOp,\n  Async,\n}\n\n/**\n * The priority of the prefetch task. Higher numbers are higher priority.\n */\nexport const enum PrefetchPriority {\n  /**\n   * Assigned to any visible link that was hovered/touched at some point. This\n   * is not removed on mouse exit, because a link that was momentarily\n   * hovered is more likely to to be interacted with than one that was not.\n   */\n  Intent = 2,\n  /**\n   * The default priority for prefetch tasks.\n   */\n  Default = 1,\n  /**\n   * Assigned to tasks when they spawn non-blocking background work, like\n   * revalidating a partially cached entry to see if more data is available.\n   */\n  Background = 0,\n}\n","import type { CacheNode } from '../../../../shared/lib/app-router-context.shared-runtime'\nimport type {\n  FlightRouterState,\n  FlightSegmentPath,\n} from '../../../../server/app-render/types'\nimport { fetchServerResponse } from '../fetch-server-response'\nimport { createHrefFromUrl } from '../create-href-from-url'\nimport { invalidateCacheBelowFlightSegmentPath } from '../invalidate-cache-below-flight-segmentpath'\nimport { applyRouterStatePatchToTree } from '../apply-router-state-patch-to-tree'\nimport { shouldHardNavigate } from '../should-hard-navigate'\nimport { isNavigatingToNewRootLayout } from '../is-navigating-to-new-root-layout'\nimport {\n  PrefetchCacheEntryStatus,\n  type Mutable,\n  type NavigateAction,\n  type ReadonlyReducerState,\n  type ReducerState,\n} from '../router-reducer-types'\nimport { handleMutable } from '../handle-mutable'\nimport { applyFlightData } from '../apply-flight-data'\nimport { prefetchQueue } from './prefetch-reducer'\nimport { createEmptyCacheNode } from '../../app-router'\nimport { DEFAULT_SEGMENT_KEY } from '../../../../shared/lib/segment'\nimport { listenForDynamicRequest, startPPRNavigation } from '../ppr-navigations'\nimport {\n  getOrCreatePrefetchCacheEntry,\n  prunePrefetchCache,\n} from '../prefetch-cache-utils'\nimport { clearCacheNodeDataForSegmentPath } from '../clear-cache-node-data-for-segment-path'\nimport { handleAliasedPrefetchEntry } from '../aliased-prefetch-navigations'\nimport {\n  navigate as navigateUsingSegmentCache,\n  NavigationResultTag,\n  type NavigationResult,\n} from '../../segment-cache'\n\nexport function handleExternalUrl(\n  state: ReadonlyReducerState,\n  mutable: Mutable,\n  url: string,\n  pendingPush: boolean\n) {\n  mutable.mpaNavigation = true\n  mutable.canonicalUrl = url\n  mutable.pendingPush = pendingPush\n  mutable.scrollableSegments = undefined\n\n  return handleMutable(state, mutable)\n}\n\nfunction generateSegmentsFromPatch(\n  flightRouterPatch: FlightRouterState\n): FlightSegmentPath[] {\n  const segments: FlightSegmentPath[] = []\n  const [segment, parallelRoutes] = flightRouterPatch\n\n  if (Object.keys(parallelRoutes).length === 0) {\n    return [[segment]]\n  }\n\n  for (const [parallelRouteKey, parallelRoute] of Object.entries(\n    parallelRoutes\n  )) {\n    for (const childSegment of generateSegmentsFromPatch(parallelRoute)) {\n      // If the segment is empty, it means we are at the root of the tree\n      if (segment === '') {\n        segments.push([parallelRouteKey, ...childSegment])\n      } else {\n        segments.push([segment, parallelRouteKey, ...childSegment])\n      }\n    }\n  }\n\n  return segments\n}\n\nfunction triggerLazyFetchForLeafSegments(\n  newCache: CacheNode,\n  currentCache: CacheNode,\n  flightSegmentPath: FlightSegmentPath,\n  treePatch: FlightRouterState\n) {\n  let appliedPatch = false\n\n  newCache.rsc = currentCache.rsc\n  newCache.prefetchRsc = currentCache.prefetchRsc\n  newCache.loading = currentCache.loading\n  newCache.parallelRoutes = new Map(currentCache.parallelRoutes)\n\n  const segmentPathsToFill = generateSegmentsFromPatch(treePatch).map(\n    (segment) => [...flightSegmentPath, ...segment]\n  )\n\n  for (const segmentPaths of segmentPathsToFill) {\n    clearCacheNodeDataForSegmentPath(newCache, currentCache, segmentPaths)\n\n    appliedPatch = true\n  }\n\n  return appliedPatch\n}\n\nfunction handleNavigationResult(\n  url: URL,\n  state: ReadonlyReducerState,\n  mutable: Mutable,\n  pendingPush: boolean,\n  result: NavigationResult\n): ReducerState {\n  switch (result.tag) {\n    case NavigationResultTag.MPA: {\n      // Perform an MPA navigation.\n      const newUrl = result.data\n      return handleExternalUrl(state, mutable, newUrl, pendingPush)\n    }\n    case NavigationResultTag.NoOp: {\n      // The server responded with no change to the current page. However, if\n      // the URL changed, we still need to update that.\n      const newCanonicalUrl = result.data.canonicalUrl\n      mutable.canonicalUrl = newCanonicalUrl\n\n      // Check if the only thing that changed was the hash fragment.\n      const oldUrl = new URL(state.canonicalUrl, url)\n      const onlyHashChange =\n        // We don't need to compare the origins, because client-driven\n        // navigations are always same-origin.\n        url.pathname === oldUrl.pathname &&\n        url.search === oldUrl.search &&\n        url.hash !== oldUrl.hash\n      if (onlyHashChange) {\n        // The only updated part of the URL is the hash.\n        mutable.onlyHashChange = true\n        mutable.shouldScroll = result.data.shouldScroll\n        mutable.hashFragment = url.hash\n        // Setting this to an empty array triggers a scroll for all new and\n        // updated segments. See `ScrollAndFocusHandler` for more details.\n        mutable.scrollableSegments = []\n      }\n\n      return handleMutable(state, mutable)\n    }\n    case NavigationResultTag.Success: {\n      // Received a new result.\n      mutable.cache = result.data.cacheNode\n      mutable.patchedTree = result.data.flightRouterState\n      mutable.canonicalUrl = result.data.canonicalUrl\n      mutable.scrollableSegments = result.data.scrollableSegments\n      mutable.shouldScroll = result.data.shouldScroll\n      mutable.hashFragment = result.data.hash\n      return handleMutable(state, mutable)\n    }\n    case NavigationResultTag.Async: {\n      return result.data.then(\n        (asyncResult) =>\n          handleNavigationResult(url, state, mutable, pendingPush, asyncResult),\n        // If the navigation failed, return the current state.\n        // TODO: This matches the current behavior but we need to do something\n        // better here if the network fails.\n        () => {\n          return state\n        }\n      )\n    }\n    default: {\n      result satisfies never\n      return state\n    }\n  }\n}\n\nexport function navigateReducer(\n  state: ReadonlyReducerState,\n  action: NavigateAction\n): ReducerState {\n  const { url, isExternalUrl, navigateType, shouldScroll, allowAliasing } =\n    action\n  const mutable: Mutable = {}\n  const { hash } = url\n  const href = createHrefFromUrl(url)\n  const pendingPush = navigateType === 'push'\n  // we want to prune the prefetch cache on every navigation to avoid it growing too large\n  prunePrefetchCache(state.prefetchCache)\n\n  mutable.preserveCustomHistoryState = false\n  mutable.pendingPush = pendingPush\n\n  if (isExternalUrl) {\n    return handleExternalUrl(state, mutable, url.toString(), pendingPush)\n  }\n\n  // Handles case where `<meta http-equiv=\"refresh\">` tag is present,\n  // which will trigger an MPA navigation.\n  if (document.getElementById('__next-page-redirect')) {\n    return handleExternalUrl(state, mutable, href, pendingPush)\n  }\n\n  if (process.env.__NEXT_CLIENT_SEGMENT_CACHE) {\n    // (Very Early Experimental Feature) Segment Cache\n    //\n    // Bypass the normal prefetch cache and use the new per-segment cache\n    // implementation instead. This is only supported if PPR is enabled, too.\n    //\n    // Temporary glue code between the router reducer and the new navigation\n    // implementation. Eventually we'll rewrite the router reducer to a\n    // state machine.\n    const result = navigateUsingSegmentCache(\n      url,\n      state.cache,\n      state.tree,\n      state.nextUrl,\n      shouldScroll\n    )\n    return handleNavigationResult(url, state, mutable, pendingPush, result)\n  }\n\n  const prefetchValues = getOrCreatePrefetchCacheEntry({\n    url,\n    nextUrl: state.nextUrl,\n    tree: state.tree,\n    prefetchCache: state.prefetchCache,\n    allowAliasing,\n  })\n  const { treeAtTimeOfPrefetch, data } = prefetchValues\n\n  prefetchQueue.bump(data)\n\n  return data.then(\n    ({ flightData, canonicalUrl: canonicalUrlOverride, postponed }) => {\n      const navigatedAt = Date.now()\n\n      let isFirstRead = false\n      // we only want to mark this once\n      if (!prefetchValues.lastUsedTime) {\n        // important: we should only mark the cache node as dirty after we unsuspend from the call above\n        prefetchValues.lastUsedTime = navigatedAt\n        isFirstRead = true\n      }\n\n      if (prefetchValues.aliased) {\n        const result = handleAliasedPrefetchEntry(\n          navigatedAt,\n          state,\n          flightData,\n          url,\n          mutable\n        )\n\n        // We didn't return new router state because we didn't apply the aliased entry for some reason.\n        // We'll re-invoke the navigation handler but ensure that we don't attempt to use the aliased entry. This\n        // will create an on-demand prefetch entry.\n        if (result === false) {\n          return navigateReducer(state, { ...action, allowAliasing: false })\n        }\n\n        return result\n      }\n\n      // Handle case when navigating to page in `pages` from `app`\n      if (typeof flightData === 'string') {\n        return handleExternalUrl(state, mutable, flightData, pendingPush)\n      }\n\n      const updatedCanonicalUrl = canonicalUrlOverride\n        ? createHrefFromUrl(canonicalUrlOverride)\n        : href\n\n      const onlyHashChange =\n        !!hash &&\n        state.canonicalUrl.split('#', 1)[0] ===\n          updatedCanonicalUrl.split('#', 1)[0]\n\n      // If only the hash has changed, the server hasn't sent us any new data. We can just update\n      // the mutable properties responsible for URL and scroll handling and return early.\n      if (onlyHashChange) {\n        mutable.onlyHashChange = true\n        mutable.canonicalUrl = updatedCanonicalUrl\n        mutable.shouldScroll = shouldScroll\n        mutable.hashFragment = hash\n        mutable.scrollableSegments = []\n        return handleMutable(state, mutable)\n      }\n\n      let currentTree = state.tree\n      let currentCache = state.cache\n      let scrollableSegments: FlightSegmentPath[] = []\n      for (const normalizedFlightData of flightData) {\n        const {\n          pathToSegment: flightSegmentPath,\n          seedData,\n          head,\n          isHeadPartial,\n          isRootRender,\n        } = normalizedFlightData\n        let treePatch = normalizedFlightData.tree\n\n        // TODO-APP: remove ''\n        const flightSegmentPathWithLeadingEmpty = ['', ...flightSegmentPath]\n\n        // Create new tree based on the flightSegmentPath and router state patch\n        let newTree = applyRouterStatePatchToTree(\n          // TODO-APP: remove ''\n          flightSegmentPathWithLeadingEmpty,\n          currentTree,\n          treePatch,\n          href\n        )\n\n        // If the tree patch can't be applied to the current tree then we use the tree at time of prefetch\n        // TODO-APP: This should instead fill in the missing pieces in `currentTree` with the data from `treeAtTimeOfPrefetch`, then apply the patch.\n        if (newTree === null) {\n          newTree = applyRouterStatePatchToTree(\n            // TODO-APP: remove ''\n            flightSegmentPathWithLeadingEmpty,\n            treeAtTimeOfPrefetch,\n            treePatch,\n            href\n          )\n        }\n\n        if (newTree !== null) {\n          if (\n            // This is just a paranoid check. When a route is PPRed, the server\n            // will send back a static response that's rendered from\n            // the root. If for some reason it doesn't, we fall back to the\n            // non-PPR implementation.\n            // TODO: We should get rid of the else branch and do all navigations\n            // via startPPRNavigation. The current structure is just\n            // an incremental step.\n            seedData &&\n            isRootRender &&\n            postponed\n          ) {\n            const task = startPPRNavigation(\n              navigatedAt,\n              currentCache,\n              currentTree,\n              treePatch,\n              seedData,\n              head,\n              isHeadPartial,\n              false,\n              scrollableSegments\n            )\n\n            if (task !== null) {\n              if (task.route === null) {\n                // Detected a change to the root layout. Perform an full-\n                // page navigation.\n                return handleExternalUrl(state, mutable, href, pendingPush)\n              }\n              // Use the tree computed by startPPRNavigation instead\n              // of the one computed by applyRouterStatePatchToTree.\n              // TODO: We should remove applyRouterStatePatchToTree\n              // from the PPR path entirely.\n              const patchedRouterState: FlightRouterState = task.route\n              newTree = patchedRouterState\n\n              const newCache = task.node\n              if (newCache !== null) {\n                // We've created a new Cache Node tree that contains a prefetched\n                // version of the next page. This can be rendered instantly.\n                mutable.cache = newCache\n              }\n              const dynamicRequestTree = task.dynamicRequestTree\n              if (dynamicRequestTree !== null) {\n                // The prefetched tree has dynamic holes in it. We initiate a\n                // dynamic request to fill them in.\n                //\n                // Do not block on the result. We'll immediately render the Cache\n                // Node tree and suspend on the dynamic parts. When the request\n                // comes in, we'll fill in missing data and ping React to\n                // re-render. Unlike the lazy fetching model in the non-PPR\n                // implementation, this is modeled as a single React update +\n                // streaming, rather than multiple top-level updates. (However,\n                // even in the new model, we'll still need to sometimes update the\n                // root multiple times per navigation, like if the server sends us\n                // a different response than we expected. For now, we revert back\n                // to the lazy fetching mechanism in that case.)\n                const dynamicRequest = fetchServerResponse(url, {\n                  flightRouterState: dynamicRequestTree,\n                  nextUrl: state.nextUrl,\n                })\n\n                listenForDynamicRequest(task, dynamicRequest)\n                // We store the dynamic request on the `lazyData` property of the CacheNode\n                // because we're not going to await the dynamic request here. Since we're not blocking\n                // on the dynamic request, `layout-router` will\n                // task.node.lazyData = dynamicRequest\n              } else {\n                // The prefetched tree does not contain dynamic holes — it's\n                // fully static. We can skip the dynamic request.\n              }\n            } else {\n              // Nothing changed, so reuse the old cache.\n              // TODO: What if the head changed but not any of the segment data?\n              // Is that possible? If so, we should clone the whole tree and\n              // update the head.\n              newTree = treePatch\n            }\n          } else {\n            // The static response does not include any dynamic holes, so\n            // there's no need to do a second request.\n            // TODO: As an incremental step this just reverts back to the\n            // non-PPR implementation. We can simplify this branch further,\n            // given that PPR prefetches are always static and return the whole\n            // tree. Or in the meantime we could factor it out into a\n            // separate function.\n\n            if (isNavigatingToNewRootLayout(currentTree, newTree)) {\n              return handleExternalUrl(state, mutable, href, pendingPush)\n            }\n\n            const cache: CacheNode = createEmptyCacheNode()\n            let applied = false\n\n            if (\n              prefetchValues.status === PrefetchCacheEntryStatus.stale &&\n              !isFirstRead\n            ) {\n              // When we have a stale prefetch entry, we only want to re-use the loading state of the route we're navigating to, to support instant loading navigations\n              // this will trigger a lazy fetch for the actual page data by nulling the `rsc` and `prefetchRsc` values for page data,\n              // while copying over the `loading` for the segment that contains the page data.\n              // We only do this on subsequent reads, as otherwise there'd be no loading data to re-use.\n\n              // We skip this branch if only the hash fragment has changed, as we don't want to trigger a lazy fetch in that case\n              applied = triggerLazyFetchForLeafSegments(\n                cache,\n                currentCache,\n                flightSegmentPath,\n                treePatch\n              )\n              // since we re-used the stale cache's loading state & refreshed the data,\n              // update the `lastUsedTime` so that it can continue to be re-used for the next 30s\n              prefetchValues.lastUsedTime = navigatedAt\n            } else {\n              applied = applyFlightData(\n                navigatedAt,\n                currentCache,\n                cache,\n                normalizedFlightData,\n                prefetchValues\n              )\n            }\n\n            const hardNavigate = shouldHardNavigate(\n              // TODO-APP: remove ''\n              flightSegmentPathWithLeadingEmpty,\n              currentTree\n            )\n\n            if (hardNavigate) {\n              // Copy rsc for the root node of the cache.\n              cache.rsc = currentCache.rsc\n              cache.prefetchRsc = currentCache.prefetchRsc\n\n              invalidateCacheBelowFlightSegmentPath(\n                cache,\n                currentCache,\n                flightSegmentPath\n              )\n              // Ensure the existing cache value is used when the cache was not invalidated.\n              mutable.cache = cache\n            } else if (applied) {\n              mutable.cache = cache\n              // If we applied the cache, we update the \"current cache\" value so any other\n              // segments in the FlightDataPath will be able to reference the updated cache.\n              currentCache = cache\n            }\n\n            for (const subSegment of generateSegmentsFromPatch(treePatch)) {\n              const scrollableSegmentPath = [\n                ...flightSegmentPath,\n                ...subSegment,\n              ]\n              // Filter out the __DEFAULT__ paths as they shouldn't be scrolled to in this case.\n              if (\n                scrollableSegmentPath[scrollableSegmentPath.length - 1] !==\n                DEFAULT_SEGMENT_KEY\n              ) {\n                scrollableSegments.push(scrollableSegmentPath)\n              }\n            }\n          }\n\n          currentTree = newTree\n        }\n      }\n\n      mutable.patchedTree = currentTree\n      mutable.canonicalUrl = updatedCanonicalUrl\n      mutable.scrollableSegments = scrollableSegments\n      mutable.hashFragment = hash\n      mutable.shouldScroll = shouldScroll\n\n      return handleMutable(state, mutable)\n    },\n    () => state\n  )\n}\n","import { createHrefFromUrl } from '../create-href-from-url'\nimport { applyRouterStatePatchToTree } from '../apply-router-state-patch-to-tree'\nimport { isNavigatingToNewRootLayout } from '../is-navigating-to-new-root-layout'\nimport type {\n  ServerPatchAction,\n  ReducerState,\n  ReadonlyReducerState,\n  Mutable,\n} from '../router-reducer-types'\nimport { handleExternalUrl } from './navigate-reducer'\nimport { applyFlightData } from '../apply-flight-data'\nimport { handleMutable } from '../handle-mutable'\nimport type { CacheNode } from '../../../../shared/lib/app-router-context.shared-runtime'\nimport { createEmptyCacheNode } from '../../app-router'\n\nexport function serverPatchReducer(\n  state: ReadonlyReducerState,\n  action: ServerPatchAction\n): ReducerState {\n  const {\n    serverResponse: { flightData, canonicalUrl: canonicalUrlOverride },\n    navigatedAt,\n  } = action\n\n  const mutable: Mutable = {}\n\n  mutable.preserveCustomHistoryState = false\n\n  // Handle case when navigating to page in `pages` from `app`\n  if (typeof flightData === 'string') {\n    return handleExternalUrl(\n      state,\n      mutable,\n      flightData,\n      state.pushRef.pendingPush\n    )\n  }\n\n  let currentTree = state.tree\n  let currentCache = state.cache\n\n  for (const normalizedFlightData of flightData) {\n    const { segmentPath: flightSegmentPath, tree: treePatch } =\n      normalizedFlightData\n\n    const newTree = applyRouterStatePatchToTree(\n      // TODO-APP: remove ''\n      ['', ...flightSegmentPath],\n      currentTree,\n      treePatch,\n      state.canonicalUrl\n    )\n\n    // `applyRouterStatePatchToTree` returns `null` when it determined that the server response is not applicable to the current tree.\n    // In other words, the server responded with a tree that doesn't match what the client is currently rendering.\n    // This can happen if the server patch action took longer to resolve than a subsequent navigation which would have changed the tree.\n    // Previously this case triggered an MPA navigation but it should be safe to simply discard the server response rather than forcing\n    // the entire page to reload.\n    if (newTree === null) {\n      return state\n    }\n\n    if (isNavigatingToNewRootLayout(currentTree, newTree)) {\n      return handleExternalUrl(\n        state,\n        mutable,\n        state.canonicalUrl,\n        state.pushRef.pendingPush\n      )\n    }\n\n    const canonicalUrlOverrideHref = canonicalUrlOverride\n      ? createHrefFromUrl(canonicalUrlOverride)\n      : undefined\n\n    if (canonicalUrlOverrideHref) {\n      mutable.canonicalUrl = canonicalUrlOverrideHref\n    }\n\n    const cache: CacheNode = createEmptyCacheNode()\n    applyFlightData(navigatedAt, currentCache, cache, normalizedFlightData)\n\n    mutable.patchedTree = newTree\n    mutable.cache = cache\n\n    currentCache = cache\n    currentTree = newTree\n  }\n\n  return handleMutable(state, mutable)\n}\n","import { createHrefFromUrl } from '../create-href-from-url'\nimport type {\n  ReadonlyReducerState,\n  ReducerState,\n  RestoreAction,\n} from '../router-reducer-types'\nimport { extractPathFromFlightRouterState } from '../compute-changed-path'\nimport { updateCacheNodeOnPopstateRestoration } from '../ppr-navigations'\n\nexport function restoreReducer(\n  state: ReadonlyReducerState,\n  action: RestoreAction\n): ReducerState {\n  const { url, tree } = action\n  const href = createHrefFromUrl(url)\n  // This action is used to restore the router state from the history state.\n  // However, it's possible that the history state no longer contains the `FlightRouterState`.\n  // We will copy over the internal state on pushState/replaceState events, but if a history entry\n  // occurred before hydration, or if the user navigated to a hash using a regular anchor link,\n  // the history state will not contain the `FlightRouterState`.\n  // In this case, we'll continue to use the existing tree so the router doesn't get into an invalid state.\n  const treeToRestore = tree || state.tree\n\n  const oldCache = state.cache\n  const newCache = process.env.__NEXT_PPR\n    ? // When PPR is enabled, we update the cache to drop the prefetch\n      // data for any segment whose dynamic data was already received. This\n      // prevents an unnecessary flash back to PPR state during a\n      // back/forward navigation.\n      updateCacheNodeOnPopstateRestoration(oldCache, treeToRestore)\n    : oldCache\n\n  return {\n    // Set canonical url\n    canonicalUrl: href,\n    pushRef: {\n      pendingPush: false,\n      mpaNavigation: false,\n      // Ensures that the custom history state that was set is preserved when applying this update.\n      preserveCustomHistoryState: true,\n    },\n    focusAndScrollRef: state.focusAndScrollRef,\n    cache: newCache,\n    prefetchCache: state.prefetchCache,\n    // Restore provided tree\n    tree: treeToRestore,\n    nextUrl: extractPathFromFlightRouterState(treeToRestore) ?? url.pathname,\n  }\n}\n","import type { FlightRouterState } from '../../../server/app-render/types'\nimport { handleExternalUrl } from './reducers/navigate-reducer'\nimport type {\n  ReadonlyReducerState,\n  ReducerActions,\n} from './router-reducer-types'\n\n/**\n * Handles the case where the client router attempted to patch the tree but, due to a mismatch, the patch failed.\n * This will perform an MPA navigation to return the router to a valid state.\n */\nexport function handleSegmentMismatch(\n  state: ReadonlyReducerState,\n  action: ReducerActions,\n  treePatch: FlightRouterState\n) {\n  if (process.env.NODE_ENV === 'development') {\n    console.warn(\n      'Performing hard navigation because your application experienced an unrecoverable error. If this keeps occurring, please file a Next.js issue.\\n\\n' +\n        'Reason: Segment mismatch\\n' +\n        `Last Action: ${action.type}\\n\\n` +\n        `Current Tree: ${JSON.stringify(state.tree)}\\n\\n` +\n        `Tree Patch Payload: ${JSON.stringify(treePatch)}`\n    )\n  }\n\n  return handleExternalUrl(state, {}, state.canonicalUrl, true)\n}\n","import type { FlightRouterState } from '../../../../server/app-render/types'\nimport { isInterceptionRouteAppPath } from '../../../../shared/lib/router/utils/interception-routes'\n\nexport function hasInterceptionRouteInCurrentTree([\n  segment,\n  parallelRoutes,\n]: FlightRouterState): boolean {\n  // If we have a dynamic segment, it's marked as an interception route by the presence of the `i` suffix.\n  if (Array.isArray(segment) && (segment[2] === 'di' || segment[2] === 'ci')) {\n    return true\n  }\n\n  // If segment is not an array, apply the existing string-based check\n  if (typeof segment === 'string' && isInterceptionRouteAppPath(segment)) {\n    return true\n  }\n\n  // Iterate through parallelRoutes if they exist\n  if (parallelRoutes) {\n    for (const key in parallelRoutes) {\n      if (hasInterceptionRouteInCurrentTree(parallelRoutes[key])) {\n        return true\n      }\n    }\n  }\n\n  return false\n}\n","import { fetchServerResponse } from '../fetch-server-response'\nimport { createHrefFromUrl } from '../create-href-from-url'\nimport { applyRouterStatePatchToTree } from '../apply-router-state-patch-to-tree'\nimport { isNavigatingToNewRootLayout } from '../is-navigating-to-new-root-layout'\nimport type {\n  Mutable,\n  ReadonlyReducerState,\n  ReducerState,\n  RefreshAction,\n} from '../router-reducer-types'\nimport { handleExternalUrl } from './navigate-reducer'\nimport { handleMutable } from '../handle-mutable'\nimport type { CacheNode } from '../../../../shared/lib/app-router-context.shared-runtime'\nimport { fillLazyItemsTillLeafWithHead } from '../fill-lazy-items-till-leaf-with-head'\nimport { createEmptyCacheNode } from '../../app-router'\nimport { handleSegmentMismatch } from '../handle-segment-mismatch'\nimport { hasInterceptionRouteInCurrentTree } from './has-interception-route-in-current-tree'\nimport { refreshInactiveParallelSegments } from '../refetch-inactive-parallel-segments'\nimport { revalidateEntireCache } from '../../segment-cache'\n\nexport function refreshReducer(\n  state: ReadonlyReducerState,\n  action: RefreshAction\n): ReducerState {\n  const { origin } = action\n  const mutable: Mutable = {}\n  const href = state.canonicalUrl\n\n  let currentTree = state.tree\n\n  mutable.preserveCustomHistoryState = false\n\n  const cache: CacheNode = createEmptyCacheNode()\n\n  // If the current tree was intercepted, the nextUrl should be included in the request.\n  // This is to ensure that the refresh request doesn't get intercepted, accidentally triggering the interception route.\n  const includeNextUrl = hasInterceptionRouteInCurrentTree(state.tree)\n\n  // TODO-APP: verify that `href` is not an external url.\n  // Fetch data from the root of the tree.\n  cache.lazyData = fetchServerResponse(new URL(href, origin), {\n    flightRouterState: [\n      currentTree[0],\n      currentTree[1],\n      currentTree[2],\n      'refetch',\n    ],\n    nextUrl: includeNextUrl ? state.nextUrl : null,\n  })\n\n  const navigatedAt = Date.now()\n  return cache.lazyData.then(\n    async ({ flightData, canonicalUrl: canonicalUrlOverride }) => {\n      // Handle case when navigating to page in `pages` from `app`\n      if (typeof flightData === 'string') {\n        return handleExternalUrl(\n          state,\n          mutable,\n          flightData,\n          state.pushRef.pendingPush\n        )\n      }\n\n      // Remove cache.lazyData as it has been resolved at this point.\n      cache.lazyData = null\n\n      for (const normalizedFlightData of flightData) {\n        const {\n          tree: treePatch,\n          seedData: cacheNodeSeedData,\n          head,\n          isRootRender,\n        } = normalizedFlightData\n\n        if (!isRootRender) {\n          // TODO-APP: handle this case better\n          console.log('REFRESH FAILED')\n          return state\n        }\n\n        const newTree = applyRouterStatePatchToTree(\n          // TODO-APP: remove ''\n          [''],\n          currentTree,\n          treePatch,\n          state.canonicalUrl\n        )\n\n        if (newTree === null) {\n          return handleSegmentMismatch(state, action, treePatch)\n        }\n\n        if (isNavigatingToNewRootLayout(currentTree, newTree)) {\n          return handleExternalUrl(\n            state,\n            mutable,\n            href,\n            state.pushRef.pendingPush\n          )\n        }\n\n        const canonicalUrlOverrideHref = canonicalUrlOverride\n          ? createHrefFromUrl(canonicalUrlOverride)\n          : undefined\n\n        if (canonicalUrlOverride) {\n          mutable.canonicalUrl = canonicalUrlOverrideHref\n        }\n\n        // Handles case where prefetch only returns the router tree patch without rendered components.\n        if (cacheNodeSeedData !== null) {\n          const rsc = cacheNodeSeedData[1]\n          const loading = cacheNodeSeedData[3]\n          cache.rsc = rsc\n          cache.prefetchRsc = null\n          cache.loading = loading\n          fillLazyItemsTillLeafWithHead(\n            navigatedAt,\n            cache,\n            // Existing cache is not passed in as `router.refresh()` has to invalidate the entire cache.\n            undefined,\n            treePatch,\n            cacheNodeSeedData,\n            head,\n            undefined\n          )\n          if (process.env.__NEXT_CLIENT_SEGMENT_CACHE) {\n            revalidateEntireCache(state.nextUrl, newTree)\n          } else {\n            mutable.prefetchCache = new Map()\n          }\n        }\n\n        await refreshInactiveParallelSegments({\n          navigatedAt,\n          state,\n          updatedTree: newTree,\n          updatedCache: cache,\n          includeNextUrl,\n          canonicalUrl: mutable.canonicalUrl || state.canonicalUrl,\n        })\n\n        mutable.cache = cache\n        mutable.patchedTree = newTree\n\n        currentTree = newTree\n      }\n\n      return handleMutable(state, mutable)\n    },\n    () => state\n  )\n}\n","import { fetchServerResponse } from '../fetch-server-response'\nimport { createHrefFromUrl } from '../create-href-from-url'\nimport { applyRouterStatePatchToTree } from '../apply-router-state-patch-to-tree'\nimport { isNavigatingToNewRootLayout } from '../is-navigating-to-new-root-layout'\nimport type {\n  ReadonlyReducerState,\n  ReducerState,\n  HmrRefreshAction,\n  Mutable,\n} from '../router-reducer-types'\nimport { handleExternalUrl } from './navigate-reducer'\nimport { handleMutable } from '../handle-mutable'\nimport { applyFlightData } from '../apply-flight-data'\nimport type { CacheNode } from '../../../../shared/lib/app-router-context.shared-runtime'\nimport { createEmptyCacheNode } from '../../app-router'\nimport { handleSegmentMismatch } from '../handle-segment-mismatch'\nimport { hasInterceptionRouteInCurrentTree } from './has-interception-route-in-current-tree'\n\n// A version of refresh reducer that keeps the cache around instead of wiping all of it.\nfunction hmrRefreshReducerImpl(\n  state: ReadonlyReducerState,\n  action: HmrRefreshAction\n): ReducerState {\n  const { origin } = action\n  const mutable: Mutable = {}\n  const href = state.canonicalUrl\n\n  mutable.preserveCustomHistoryState = false\n\n  const cache: CacheNode = createEmptyCacheNode()\n  // If the current tree was intercepted, the nextUrl should be included in the request.\n  // This is to ensure that the refresh request doesn't get intercepted, accidentally triggering the interception route.\n  const includeNextUrl = hasInterceptionRouteInCurrentTree(state.tree)\n\n  // TODO-APP: verify that `href` is not an external url.\n  // Fetch data from the root of the tree.\n  const navigatedAt = Date.now()\n  cache.lazyData = fetchServerResponse(new URL(href, origin), {\n    flightRouterState: [state.tree[0], state.tree[1], state.tree[2], 'refetch'],\n    nextUrl: includeNextUrl ? state.nextUrl : null,\n    isHmrRefresh: true,\n  })\n\n  return cache.lazyData.then(\n    ({ flightData, canonicalUrl: canonicalUrlOverride }) => {\n      // Handle case when navigating to page in `pages` from `app`\n      if (typeof flightData === 'string') {\n        return handleExternalUrl(\n          state,\n          mutable,\n          flightData,\n          state.pushRef.pendingPush\n        )\n      }\n\n      // Remove cache.lazyData as it has been resolved at this point.\n      cache.lazyData = null\n\n      let currentTree = state.tree\n      let currentCache = state.cache\n\n      for (const normalizedFlightData of flightData) {\n        const { tree: treePatch, isRootRender } = normalizedFlightData\n        if (!isRootRender) {\n          // TODO-APP: handle this case better\n          console.log('REFRESH FAILED')\n          return state\n        }\n\n        const newTree = applyRouterStatePatchToTree(\n          // TODO-APP: remove ''\n          [''],\n          currentTree,\n          treePatch,\n          state.canonicalUrl\n        )\n\n        if (newTree === null) {\n          return handleSegmentMismatch(state, action, treePatch)\n        }\n\n        if (isNavigatingToNewRootLayout(currentTree, newTree)) {\n          return handleExternalUrl(\n            state,\n            mutable,\n            href,\n            state.pushRef.pendingPush\n          )\n        }\n\n        const canonicalUrlOverrideHref = canonicalUrlOverride\n          ? createHrefFromUrl(canonicalUrlOverride)\n          : undefined\n\n        if (canonicalUrlOverride) {\n          mutable.canonicalUrl = canonicalUrlOverrideHref\n        }\n        const applied = applyFlightData(\n          navigatedAt,\n          currentCache,\n          cache,\n          normalizedFlightData\n        )\n\n        if (applied) {\n          mutable.cache = cache\n          currentCache = cache\n        }\n\n        mutable.patchedTree = newTree\n        mutable.canonicalUrl = href\n\n        currentTree = newTree\n      }\n      return handleMutable(state, mutable)\n    },\n    () => state\n  )\n}\n\nfunction hmrRefreshReducerNoop(\n  state: ReadonlyReducerState,\n  _action: HmrRefreshAction\n): ReducerState {\n  return state\n}\n\nexport const hmrRefreshReducer =\n  process.env.NODE_ENV === 'production'\n    ? hmrRefreshReducerNoop\n    : hmrRefreshReducerImpl\n","import { addBasePath } from './add-base-path'\n\n/**\n * Function to correctly assign location to URL\n *\n * The method will add basePath, and will also correctly add location (including if it is a relative path)\n * @param location Location that should be added to the url\n * @param url Base URL to which the location should be assigned\n */\nexport function assignLocation(location: string, url: URL): URL {\n  if (location.startsWith('.')) {\n    const urlBase = url.origin + url.pathname\n    return new URL(\n      // In order for a relative path to be added to the current url correctly, the current url must end with a slash\n      // new URL('./relative', 'https://example.com/subdir').href -> 'https://example.com/relative'\n      // new URL('./relative', 'https://example.com/subdir/').href -> 'https://example.com/subdir/relative'\n      (urlBase.endsWith('/') ? urlBase : urlBase + '/') + location\n    )\n  }\n\n  return new URL(addBasePath(location), url.href)\n}\n","export interface ServerReferenceInfo {\n  type: 'server-action' | 'use-cache'\n  usedArgs: [boolean, boolean, boolean, boolean, boolean, boolean]\n  hasRestArgs: boolean\n}\n\n/**\n * Extracts info about the server reference for the given server reference ID by\n * parsing the first byte of the hex-encoded ID.\n *\n * ```\n * Bit positions: [7]      [6] [5] [4] [3] [2] [1]  [0]\n * Bits:          typeBit  argMask                  restArgs\n * ```\n *\n * If the `typeBit` is `1` the server reference represents a `\"use cache\"`\n * function, otherwise a server action.\n *\n * The `argMask` encodes whether the function uses the argument at the\n * respective position.\n *\n * The `restArgs` bit indicates whether the function uses a rest parameter. It's\n * also set to 1 if the function has more than 6 args.\n *\n * @param id hex-encoded server reference ID\n */\nexport function extractInfoFromServerReferenceId(\n  id: string\n): ServerReferenceInfo {\n  const infoByte = parseInt(id.slice(0, 2), 16)\n  const typeBit = (infoByte >> 7) & 0x1\n  const argMask = (infoByte >> 1) & 0x3f\n  const restArgs = infoByte & 0x1\n  const usedArgs = Array(6)\n\n  for (let index = 0; index < 6; index++) {\n    const bitPosition = 5 - index\n    const bit = (argMask >> bitPosition) & 0x1\n    usedArgs[index] = bit === 1\n  }\n\n  return {\n    type: typeBit === 1 ? 'use-cache' : 'server-action',\n    usedArgs: usedArgs as [\n      boolean,\n      boolean,\n      boolean,\n      boolean,\n      boolean,\n      boolean,\n    ],\n    hasRestArgs: restArgs === 1,\n  }\n}\n\n/**\n * Creates a sparse array containing only the used arguments based on the\n * provided action info.\n */\nexport function omitUnusedArgs(\n  args: unknown[],\n  info: ServerReferenceInfo\n): unknown[] {\n  const filteredArgs = new Array(args.length)\n\n  for (let index = 0; index < args.length; index++) {\n    if (\n      (index < 6 && info.usedArgs[index]) ||\n      // This assumes that the server reference info byte has the restArgs bit\n      // set to 1 if there are more than 6 args.\n      (index >= 6 && info.hasRestArgs)\n    ) {\n      filteredArgs[index] = args[index]\n    }\n  }\n\n  return filteredArgs\n}\n","import type {\n  ActionFlightResponse,\n  ActionResult,\n} from '../../../../server/app-render/types'\nimport { callServer } from '../../../app-call-server'\nimport { findSourceMapURL } from '../../../app-find-source-map-url'\nimport {\n  ACTION_HEADER,\n  NEXT_IS_PRERENDER_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_URL,\n  RSC_CONTENT_TYPE_HEADER,\n} from '../../app-router-headers'\n\n// // eslint-disable-next-line import/no-extraneous-dependencies\n// import { createFromFetch } from 'react-server-dom-webpack/client'\n// // eslint-disable-next-line import/no-extraneous-dependencies\n// import { encodeReply } from 'react-server-dom-webpack/client'\nconst { createFromFetch, createTemporaryReferenceSet, encodeReply } = (\n  !!process.env.NEXT_RUNTIME\n    ? // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client.edge')\n    : // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client')\n) as typeof import('react-server-dom-webpack/client')\n\nimport {\n  PrefetchKind,\n  type ReadonlyReducerState,\n  type ReducerState,\n  type ServerActionAction,\n  type ServerActionMutable,\n} from '../router-reducer-types'\nimport { assignLocation } from '../../../assign-location'\nimport { createHrefFromUrl } from '../create-href-from-url'\nimport { handleExternalUrl } from './navigate-reducer'\nimport { applyRouterStatePatchToTree } from '../apply-router-state-patch-to-tree'\nimport { isNavigatingToNewRootLayout } from '../is-navigating-to-new-root-layout'\nimport type { CacheNode } from '../../../../shared/lib/app-router-context.shared-runtime'\nimport { handleMutable } from '../handle-mutable'\nimport { fillLazyItemsTillLeafWithHead } from '../fill-lazy-items-till-leaf-with-head'\nimport { createEmptyCacheNode } from '../../app-router'\nimport { hasInterceptionRouteInCurrentTree } from './has-interception-route-in-current-tree'\nimport { handleSegmentMismatch } from '../handle-segment-mismatch'\nimport { refreshInactiveParallelSegments } from '../refetch-inactive-parallel-segments'\nimport {\n  normalizeFlightData,\n  type NormalizedFlightData,\n} from '../../../flight-data-helpers'\nimport { getRedirectError } from '../../redirect'\nimport { RedirectType } from '../../redirect-error'\nimport { createSeededPrefetchCacheEntry } from '../prefetch-cache-utils'\nimport { removeBasePath } from '../../../remove-base-path'\nimport { hasBasePath } from '../../../has-base-path'\nimport {\n  extractInfoFromServerReferenceId,\n  omitUnusedArgs,\n} from '../../../../shared/lib/server-reference-info'\nimport { revalidateEntireCache } from '../../segment-cache'\n\ntype FetchServerActionResult = {\n  redirectLocation: URL | undefined\n  redirectType: RedirectType | undefined\n  actionResult?: ActionResult\n  actionFlightData?: NormalizedFlightData[] | string\n  isPrerender: boolean\n  revalidatedParts: {\n    tag: boolean\n    cookie: boolean\n    paths: string[]\n  }\n}\n\nasync function fetchServerAction(\n  state: ReadonlyReducerState,\n  nextUrl: ReadonlyReducerState['nextUrl'],\n  { actionId, actionArgs }: ServerActionAction\n): Promise<FetchServerActionResult> {\n  const temporaryReferences = createTemporaryReferenceSet()\n  const info = extractInfoFromServerReferenceId(actionId)\n\n  // TODO: Currently, we're only omitting unused args for the experimental \"use\n  // cache\" functions. Once the server reference info byte feature is stable, we\n  // should apply this to server actions as well.\n  const usedArgs =\n    info.type === 'use-cache' ? omitUnusedArgs(actionArgs, info) : actionArgs\n\n  const body = await encodeReply(usedArgs, { temporaryReferences })\n\n  const res = await fetch('', {\n    method: 'POST',\n    headers: {\n      Accept: RSC_CONTENT_TYPE_HEADER,\n      [ACTION_HEADER]: actionId,\n      [NEXT_ROUTER_STATE_TREE_HEADER]: encodeURIComponent(\n        JSON.stringify(state.tree)\n      ),\n      ...(process.env.NEXT_DEPLOYMENT_ID\n        ? {\n            'x-deployment-id': process.env.NEXT_DEPLOYMENT_ID,\n          }\n        : {}),\n      ...(nextUrl\n        ? {\n            [NEXT_URL]: nextUrl,\n          }\n        : {}),\n    },\n    body,\n  })\n\n  const redirectHeader = res.headers.get('x-action-redirect')\n  const [location, _redirectType] = redirectHeader?.split(';') || []\n  let redirectType: RedirectType | undefined\n  switch (_redirectType) {\n    case 'push':\n      redirectType = RedirectType.push\n      break\n    case 'replace':\n      redirectType = RedirectType.replace\n      break\n    default:\n      redirectType = undefined\n  }\n\n  const isPrerender = !!res.headers.get(NEXT_IS_PRERENDER_HEADER)\n  let revalidatedParts: FetchServerActionResult['revalidatedParts']\n  try {\n    const revalidatedHeader = JSON.parse(\n      res.headers.get('x-action-revalidated') || '[[],0,0]'\n    )\n    revalidatedParts = {\n      paths: revalidatedHeader[0] || [],\n      tag: !!revalidatedHeader[1],\n      cookie: revalidatedHeader[2],\n    }\n  } catch (e) {\n    revalidatedParts = {\n      paths: [],\n      tag: false,\n      cookie: false,\n    }\n  }\n\n  const redirectLocation = location\n    ? assignLocation(\n        location,\n        new URL(state.canonicalUrl, window.location.href)\n      )\n    : undefined\n\n  const contentType = res.headers.get('content-type')\n\n  if (contentType?.startsWith(RSC_CONTENT_TYPE_HEADER)) {\n    const response: ActionFlightResponse = await createFromFetch(\n      Promise.resolve(res),\n      { callServer, findSourceMapURL, temporaryReferences }\n    )\n\n    if (location) {\n      // if it was a redirection, then result is just a regular RSC payload\n      return {\n        actionFlightData: normalizeFlightData(response.f),\n        redirectLocation,\n        redirectType,\n        revalidatedParts,\n        isPrerender,\n      }\n    }\n\n    return {\n      actionResult: response.a,\n      actionFlightData: normalizeFlightData(response.f),\n      redirectLocation,\n      redirectType,\n      revalidatedParts,\n      isPrerender,\n    }\n  }\n\n  // Handle invalid server action responses\n  if (res.status >= 400) {\n    // The server can respond with a text/plain error message, but we'll fallback to something generic\n    // if there isn't one.\n    const error =\n      contentType === 'text/plain'\n        ? await res.text()\n        : 'An unexpected response was received from the server.'\n\n    throw new Error(error)\n  }\n\n  return {\n    redirectLocation,\n    redirectType,\n    revalidatedParts,\n    isPrerender,\n  }\n}\n\n/*\n * This reducer is responsible for calling the server action and processing any side-effects from the server action.\n * It does not mutate the state by itself but rather delegates to other reducers to do the actual mutation.\n */\nexport function serverActionReducer(\n  state: ReadonlyReducerState,\n  action: ServerActionAction\n): ReducerState {\n  const { resolve, reject } = action\n  const mutable: ServerActionMutable = {}\n\n  let currentTree = state.tree\n\n  mutable.preserveCustomHistoryState = false\n\n  // only pass along the `nextUrl` param (used for interception routes) if the current route was intercepted.\n  // If the route has been intercepted, the action should be as well.\n  // Otherwise the server action might be intercepted with the wrong action id\n  // (ie, one that corresponds with the intercepted route)\n  const nextUrl =\n    state.nextUrl && hasInterceptionRouteInCurrentTree(state.tree)\n      ? state.nextUrl\n      : null\n\n  const navigatedAt = Date.now()\n\n  return fetchServerAction(state, nextUrl, action).then(\n    async ({\n      actionResult,\n      actionFlightData: flightData,\n      redirectLocation,\n      redirectType,\n      isPrerender,\n      revalidatedParts,\n    }) => {\n      let redirectHref: string | undefined\n\n      // honor the redirect type instead of defaulting to push in case of server actions.\n      if (redirectLocation) {\n        if (redirectType === RedirectType.replace) {\n          state.pushRef.pendingPush = false\n          mutable.pendingPush = false\n        } else {\n          state.pushRef.pendingPush = true\n          mutable.pendingPush = true\n        }\n\n        redirectHref = createHrefFromUrl(redirectLocation, false)\n        mutable.canonicalUrl = redirectHref\n      }\n\n      if (!flightData) {\n        resolve(actionResult)\n\n        // If there is a redirect but no flight data we need to do a mpaNavigation.\n        if (redirectLocation) {\n          return handleExternalUrl(\n            state,\n            mutable,\n            redirectLocation.href,\n            state.pushRef.pendingPush\n          )\n        }\n        return state\n      }\n\n      if (typeof flightData === 'string') {\n        // Handle case when navigating to page in `pages` from `app`\n        resolve(actionResult)\n\n        return handleExternalUrl(\n          state,\n          mutable,\n          flightData,\n          state.pushRef.pendingPush\n        )\n      }\n\n      const actionRevalidated =\n        revalidatedParts.paths.length > 0 ||\n        revalidatedParts.tag ||\n        revalidatedParts.cookie\n\n      for (const normalizedFlightData of flightData) {\n        const {\n          tree: treePatch,\n          seedData: cacheNodeSeedData,\n          head,\n          isRootRender,\n        } = normalizedFlightData\n\n        if (!isRootRender) {\n          // TODO-APP: handle this case better\n          console.log('SERVER ACTION APPLY FAILED')\n          resolve(actionResult)\n\n          return state\n        }\n\n        // Given the path can only have two items the items are only the router state and rsc for the root.\n        const newTree = applyRouterStatePatchToTree(\n          // TODO-APP: remove ''\n          [''],\n          currentTree,\n          treePatch,\n          redirectHref ? redirectHref : state.canonicalUrl\n        )\n\n        if (newTree === null) {\n          resolve(actionResult)\n\n          return handleSegmentMismatch(state, action, treePatch)\n        }\n\n        if (isNavigatingToNewRootLayout(currentTree, newTree)) {\n          resolve(actionResult)\n\n          return handleExternalUrl(\n            state,\n            mutable,\n            redirectHref || state.canonicalUrl,\n            state.pushRef.pendingPush\n          )\n        }\n\n        // The server sent back RSC data for the server action, so we need to apply it to the cache.\n        if (cacheNodeSeedData !== null) {\n          const rsc = cacheNodeSeedData[1]\n          const cache: CacheNode = createEmptyCacheNode()\n          cache.rsc = rsc\n          cache.prefetchRsc = null\n          cache.loading = cacheNodeSeedData[3]\n          fillLazyItemsTillLeafWithHead(\n            navigatedAt,\n            cache,\n            // Existing cache is not passed in as server actions have to invalidate the entire cache.\n            undefined,\n            treePatch,\n            cacheNodeSeedData,\n            head,\n            undefined\n          )\n\n          mutable.cache = cache\n          if (process.env.__NEXT_CLIENT_SEGMENT_CACHE) {\n            revalidateEntireCache(state.nextUrl, newTree)\n          } else {\n            mutable.prefetchCache = new Map()\n          }\n          if (actionRevalidated) {\n            await refreshInactiveParallelSegments({\n              navigatedAt,\n              state,\n              updatedTree: newTree,\n              updatedCache: cache,\n              includeNextUrl: Boolean(nextUrl),\n              canonicalUrl: mutable.canonicalUrl || state.canonicalUrl,\n            })\n          }\n        }\n\n        mutable.patchedTree = newTree\n        currentTree = newTree\n      }\n\n      if (redirectLocation && redirectHref) {\n        if (!process.env.__NEXT_CLIENT_SEGMENT_CACHE && !actionRevalidated) {\n          // Because the RedirectBoundary will trigger a navigation, we need to seed the prefetch cache\n          // with the FlightData that we got from the server action for the target page, so that it's\n          // available when the page is navigated to and doesn't need to be re-fetched.\n          // We only do this if the server action didn't revalidate any data, as in that case the\n          // client cache will be cleared and the data will be re-fetched anyway.\n          // NOTE: We don't do this in the Segment Cache implementation.\n          // Dynamic data should never be placed into the cache, unless it's\n          // \"converted\" to static data using <Link prefetch={true}>. What we\n          // do instead is re-prefetch links and forms whenever the cache is\n          // invalidated.\n          createSeededPrefetchCacheEntry({\n            url: redirectLocation,\n            data: {\n              flightData,\n              canonicalUrl: undefined,\n              couldBeIntercepted: false,\n              prerendered: false,\n              postponed: false,\n              // TODO: We should be able to set this if the server action\n              // returned a fully static response.\n              staleTime: -1,\n            },\n            tree: state.tree,\n            prefetchCache: state.prefetchCache,\n            nextUrl: state.nextUrl,\n            kind: isPrerender ? PrefetchKind.FULL : PrefetchKind.AUTO,\n          })\n          mutable.prefetchCache = state.prefetchCache\n        }\n\n        // If the action triggered a redirect, the action promise will be rejected with\n        // a redirect so that it's handled by RedirectBoundary as we won't have a valid\n        // action result to resolve the promise with. This will effectively reset the state of\n        // the component that called the action as the error boundary will remount the tree.\n        // The status code doesn't matter here as the action handler will have already sent\n        // a response with the correct status code.\n        reject(\n          getRedirectError(\n            hasBasePath(redirectHref)\n              ? removeBasePath(redirectHref)\n              : redirectHref,\n            redirectType || RedirectType.push\n          )\n        )\n      } else {\n        resolve(actionResult)\n      }\n\n      return handleMutable(state, mutable)\n    },\n    (e: any) => {\n      // When the server action is rejected we don't update the state and instead call the reject handler of the promise.\n      reject(e)\n\n      return state\n    }\n  )\n}\n","import {\n  ACTION_NAVIGATE,\n  ACTION_SERVER_PATCH,\n  ACTION_RESTORE,\n  ACTION_REFRESH,\n  ACTION_PREFETCH,\n  ACTION_HMR_REFRESH,\n  ACTION_SERVER_ACTION,\n} from './router-reducer-types'\nimport type {\n  ReducerActions,\n  ReducerState,\n  ReadonlyReducerState,\n} from './router-reducer-types'\nimport { navigateReducer } from './reducers/navigate-reducer'\nimport { serverPatchReducer } from './reducers/server-patch-reducer'\nimport { restoreReducer } from './reducers/restore-reducer'\nimport { refreshReducer } from './reducers/refresh-reducer'\nimport { prefetchReducer } from './reducers/prefetch-reducer'\nimport { hmrRefreshReducer } from './reducers/hmr-refresh-reducer'\nimport { serverActionReducer } from './reducers/server-action-reducer'\n\n/**\n * Reducer that handles the app-router state updates.\n */\nfunction clientReducer(\n  state: ReadonlyReducerState,\n  action: ReducerActions\n): ReducerState {\n  switch (action.type) {\n    case ACTION_NAVIGATE: {\n      return navigateReducer(state, action)\n    }\n    case ACTION_SERVER_PATCH: {\n      return serverPatchReducer(state, action)\n    }\n    case ACTION_RESTORE: {\n      return restoreReducer(state, action)\n    }\n    case ACTION_REFRESH: {\n      return refreshReducer(state, action)\n    }\n    case ACTION_HMR_REFRESH: {\n      return hmrRefreshReducer(state, action)\n    }\n    case ACTION_PREFETCH: {\n      return prefetchReducer(state, action)\n    }\n    case ACTION_SERVER_ACTION: {\n      return serverActionReducer(state, action)\n    }\n    // This case should never be hit as dispatch is strongly typed.\n    default:\n      throw new Error('Unknown action')\n  }\n}\n\nfunction serverReducer(\n  state: ReadonlyReducerState,\n  _action: ReducerActions\n): ReducerState {\n  return state\n}\n\n// we don't run the client reducer on the server, so we use a noop function for better tree shaking\nexport const reducer =\n  typeof window === 'undefined' ? serverReducer : clientReducer\n","import {\n  type AppRouterState,\n  type ReducerActions,\n  type ReducerState,\n  ACTION_REFRESH,\n  ACTION_SERVER_ACTION,\n  ACTION_NAVIGATE,\n  ACTION_RESTORE,\n  type NavigateAction,\n  ACTION_HMR_REFRESH,\n  PrefetchKind,\n  ACTION_PREFETCH,\n} from './router-reducer/router-reducer-types'\nimport { reducer } from './router-reducer/router-reducer'\nimport { startTransition } from 'react'\nimport { isThenable } from '../../shared/lib/is-thenable'\nimport { prefetch as prefetchWithSegmentCache } from './segment-cache'\nimport { dispatchAppRouterAction } from './use-action-queue'\nimport { addBasePath } from '../add-base-path'\nimport { createPrefetchURL, isExternalURL } from './app-router'\nimport { prefetchReducer } from './router-reducer/reducers/prefetch-reducer'\nimport type {\n  AppRouterInstance,\n  NavigateOptions,\n  PrefetchOptions,\n} from '../../shared/lib/app-router-context.shared-runtime'\nimport { setLinkForCurrentNavigation, type LinkInstance } from './links'\nimport type { FlightRouterState } from '../../server/app-render/types'\nimport type { ClientInstrumentationHooks } from '../app-index'\n\nexport type DispatchStatePromise = React.Dispatch<ReducerState>\n\nexport type AppRouterActionQueue = {\n  state: AppRouterState\n  dispatch: (payload: ReducerActions, setState: DispatchStatePromise) => void\n  action: (state: AppRouterState, action: ReducerActions) => ReducerState\n\n  onRouterTransitionStart:\n    | ((url: string, type: 'push' | 'replace' | 'traverse') => void)\n    | null\n\n  pending: ActionQueueNode | null\n  needsRefresh?: boolean\n  last: ActionQueueNode | null\n}\n\nexport type ActionQueueNode = {\n  payload: ReducerActions\n  next: ActionQueueNode | null\n  resolve: (value: ReducerState) => void\n  reject: (err: Error) => void\n  discarded?: boolean\n}\n\nfunction runRemainingActions(\n  actionQueue: AppRouterActionQueue,\n  setState: DispatchStatePromise\n) {\n  if (actionQueue.pending !== null) {\n    actionQueue.pending = actionQueue.pending.next\n    if (actionQueue.pending !== null) {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      runAction({\n        actionQueue,\n        action: actionQueue.pending,\n        setState,\n      })\n    } else {\n      // No more actions are pending, check if a refresh is needed\n      if (actionQueue.needsRefresh) {\n        actionQueue.needsRefresh = false\n        actionQueue.dispatch(\n          {\n            type: ACTION_REFRESH,\n            origin: window.location.origin,\n          },\n          setState\n        )\n      }\n    }\n  }\n}\n\nasync function runAction({\n  actionQueue,\n  action,\n  setState,\n}: {\n  actionQueue: AppRouterActionQueue\n  action: ActionQueueNode\n  setState: DispatchStatePromise\n}) {\n  const prevState = actionQueue.state\n\n  actionQueue.pending = action\n\n  const payload = action.payload\n  const actionResult = actionQueue.action(prevState, payload)\n\n  function handleResult(nextState: AppRouterState) {\n    // if we discarded this action, the state should also be discarded\n    if (action.discarded) {\n      return\n    }\n\n    actionQueue.state = nextState\n\n    runRemainingActions(actionQueue, setState)\n    action.resolve(nextState)\n  }\n\n  // if the action is a promise, set up a callback to resolve it\n  if (isThenable(actionResult)) {\n    actionResult.then(handleResult, (err) => {\n      runRemainingActions(actionQueue, setState)\n      action.reject(err)\n    })\n  } else {\n    handleResult(actionResult)\n  }\n}\n\nfunction dispatchAction(\n  actionQueue: AppRouterActionQueue,\n  payload: ReducerActions,\n  setState: DispatchStatePromise\n) {\n  let resolvers: {\n    resolve: (value: ReducerState) => void\n    reject: (reason: any) => void\n  } = { resolve: setState, reject: () => {} }\n\n  // most of the action types are async with the exception of restore\n  // it's important that restore is handled quickly since it's fired on the popstate event\n  // and we don't want to add any delay on a back/forward nav\n  // this only creates a promise for the async actions\n  if (payload.type !== ACTION_RESTORE) {\n    // Create the promise and assign the resolvers to the object.\n    const deferredPromise = new Promise<AppRouterState>((resolve, reject) => {\n      resolvers = { resolve, reject }\n    })\n\n    startTransition(() => {\n      // we immediately notify React of the pending promise -- the resolver is attached to the action node\n      // and will be called when the associated action promise resolves\n      setState(deferredPromise)\n    })\n  }\n\n  const newAction: ActionQueueNode = {\n    payload,\n    next: null,\n    resolve: resolvers.resolve,\n    reject: resolvers.reject,\n  }\n\n  // Check if the queue is empty\n  if (actionQueue.pending === null) {\n    // The queue is empty, so add the action and start it immediately\n    // Mark this action as the last in the queue\n    actionQueue.last = newAction\n\n    runAction({\n      actionQueue,\n      action: newAction,\n      setState,\n    })\n  } else if (\n    payload.type === ACTION_NAVIGATE ||\n    payload.type === ACTION_RESTORE\n  ) {\n    // Navigations (including back/forward) take priority over any pending actions.\n    // Mark the pending action as discarded (so the state is never applied) and start the navigation action immediately.\n    actionQueue.pending.discarded = true\n\n    // The rest of the current queue should still execute after this navigation.\n    // (Note that it can't contain any earlier navigations, because we always put those into `actionQueue.pending` by calling `runAction`)\n    newAction.next = actionQueue.pending.next\n\n    // if the pending action was a server action, mark the queue as needing a refresh once events are processed\n    if (actionQueue.pending.payload.type === ACTION_SERVER_ACTION) {\n      actionQueue.needsRefresh = true\n    }\n\n    runAction({\n      actionQueue,\n      action: newAction,\n      setState,\n    })\n  } else {\n    // The queue is not empty, so add the action to the end of the queue\n    // It will be started by runRemainingActions after the previous action finishes\n    if (actionQueue.last !== null) {\n      actionQueue.last.next = newAction\n    }\n    actionQueue.last = newAction\n  }\n}\n\nlet globalActionQueue: AppRouterActionQueue | null = null\n\nexport function createMutableActionQueue(\n  initialState: AppRouterState,\n  instrumentationHooks: ClientInstrumentationHooks | null\n): AppRouterActionQueue {\n  const actionQueue: AppRouterActionQueue = {\n    state: initialState,\n    dispatch: (payload: ReducerActions, setState: DispatchStatePromise) =>\n      dispatchAction(actionQueue, payload, setState),\n    action: async (state: AppRouterState, action: ReducerActions) => {\n      const result = reducer(state, action)\n      return result\n    },\n    pending: null,\n    last: null,\n    onRouterTransitionStart:\n      instrumentationHooks !== null &&\n      typeof instrumentationHooks.onRouterTransitionStart === 'function'\n        ? // This profiling hook will be called at the start of every navigation.\n          instrumentationHooks.onRouterTransitionStart\n        : null,\n  }\n\n  if (typeof window !== 'undefined') {\n    // The action queue is lazily created on hydration, but after that point\n    // it doesn't change. So we can store it in a global rather than pass\n    // it around everywhere via props/context.\n    if (globalActionQueue !== null) {\n      throw new Error(\n        'Internal Next.js Error: createMutableActionQueue was called more ' +\n          'than once'\n      )\n    }\n    globalActionQueue = actionQueue\n  }\n\n  return actionQueue\n}\n\nexport function getCurrentAppRouterState(): AppRouterState | null {\n  return globalActionQueue !== null ? globalActionQueue.state : null\n}\n\nfunction getAppRouterActionQueue(): AppRouterActionQueue {\n  if (globalActionQueue === null) {\n    throw new Error(\n      'Internal Next.js error: Router action dispatched before initialization.'\n    )\n  }\n  return globalActionQueue\n}\n\nfunction getProfilingHookForOnNavigationStart() {\n  if (globalActionQueue !== null) {\n    return globalActionQueue.onRouterTransitionStart\n  }\n  return null\n}\n\nexport function dispatchNavigateAction(\n  href: string,\n  navigateType: NavigateAction['navigateType'],\n  shouldScroll: boolean,\n  linkInstanceRef: LinkInstance | null\n): void {\n  // TODO: This stuff could just go into the reducer. Leaving as-is for now\n  // since we're about to rewrite all the router reducer stuff anyway.\n  const url = new URL(addBasePath(href), location.href)\n  if (process.env.__NEXT_APP_NAV_FAIL_HANDLING) {\n    window.next.__pendingUrl = url\n  }\n\n  setLinkForCurrentNavigation(linkInstanceRef)\n\n  const onRouterTransitionStart = getProfilingHookForOnNavigationStart()\n  if (onRouterTransitionStart !== null) {\n    onRouterTransitionStart(href, navigateType)\n  }\n\n  dispatchAppRouterAction({\n    type: ACTION_NAVIGATE,\n    url,\n    isExternalUrl: isExternalURL(url),\n    locationSearch: location.search,\n    shouldScroll,\n    navigateType,\n    allowAliasing: true,\n  })\n}\n\nexport function dispatchTraverseAction(\n  href: string,\n  tree: FlightRouterState | undefined\n) {\n  const onRouterTransitionStart = getProfilingHookForOnNavigationStart()\n  if (onRouterTransitionStart !== null) {\n    onRouterTransitionStart(href, 'traverse')\n  }\n  dispatchAppRouterAction({\n    type: ACTION_RESTORE,\n    url: new URL(href),\n    tree,\n  })\n}\n\n/**\n * The app router that is exposed through `useRouter`. These are public API\n * methods. Internal Next.js code should call the lower level methods directly\n * (although there's lots of existing code that doesn't do that).\n */\nexport const publicAppRouterInstance: AppRouterInstance = {\n  back: () => window.history.back(),\n  forward: () => window.history.forward(),\n  prefetch: process.env.__NEXT_CLIENT_SEGMENT_CACHE\n    ? // Unlike the old implementation, the Segment Cache doesn't store its\n      // data in the router reducer state; it writes into a global mutable\n      // cache. So we don't need to dispatch an action.\n      (href: string, options?: PrefetchOptions) => {\n        const actionQueue = getAppRouterActionQueue()\n        prefetchWithSegmentCache(\n          href,\n          actionQueue.state.nextUrl,\n          actionQueue.state.tree,\n          options?.kind === PrefetchKind.FULL\n        )\n      }\n    : (href: string, options?: PrefetchOptions) => {\n        // Use the old prefetch implementation.\n        const actionQueue = getAppRouterActionQueue()\n        const url = createPrefetchURL(href)\n        if (url !== null) {\n          // The prefetch reducer doesn't actually update any state or\n          // trigger a rerender. It just writes to a mutable cache. So we\n          // shouldn't bother calling setState/dispatch; we can just re-run\n          // the reducer directly using the current state.\n          // TODO: Refactor this away from a \"reducer\" so it's\n          // less confusing.\n          prefetchReducer(actionQueue.state, {\n            type: ACTION_PREFETCH,\n            url,\n            kind: options?.kind ?? PrefetchKind.FULL,\n          })\n        }\n      },\n  replace: (href: string, options?: NavigateOptions) => {\n    startTransition(() => {\n      dispatchNavigateAction(href, 'replace', options?.scroll ?? true, null)\n    })\n  },\n  push: (href: string, options?: NavigateOptions) => {\n    startTransition(() => {\n      dispatchNavigateAction(href, 'push', options?.scroll ?? true, null)\n    })\n  },\n  refresh: () => {\n    startTransition(() => {\n      dispatchAppRouterAction({\n        type: ACTION_REFRESH,\n        origin: window.location.origin,\n      })\n    })\n  },\n  hmrRefresh: () => {\n    if (process.env.NODE_ENV !== 'development') {\n      throw new Error(\n        'hmrRefresh can only be used in development mode. Please use refresh instead.'\n      )\n    } else {\n      startTransition(() => {\n        dispatchAppRouterAction({\n          type: ACTION_HMR_REFRESH,\n          origin: window.location.origin,\n        })\n      })\n    }\n  },\n}\n\n// Exists for debugging purposes. Don't use in application code.\nif (typeof window !== 'undefined' && window.next) {\n  window.next.router = publicAppRouterInstance\n}\n","import type { FlightRouterState } from '../../server/app-render/types'\nimport type { AppRouterInstance } from '../../shared/lib/app-router-context.shared-runtime'\nimport { getCurrentAppRouterState } from './app-router-instance'\nimport { createPrefetchURL } from './app-router'\nimport { PrefetchKind } from './router-reducer/router-reducer-types'\nimport { getCurrentCacheVersion } from './segment-cache'\nimport { createCacheKey } from './segment-cache'\nimport {\n  type PrefetchTask,\n  PrefetchPriority,\n  schedulePrefetchTask as scheduleSegmentPrefetchTask,\n  cancelPrefetchTask,\n  reschedulePrefetchTask,\n} from './segment-cache'\nimport { startTransition } from 'react'\n\ntype LinkElement = HTMLAnchorElement | SVGAElement\n\ntype Element = LinkElement | HTMLFormElement\n\n// Properties that are shared between Link and Form instances. We use the same\n// shape for both to prevent a polymorphic de-opt in the VM.\ntype LinkOrFormInstanceShared = {\n  router: AppRouterInstance\n  kind: PrefetchKind.AUTO | PrefetchKind.FULL\n\n  isVisible: boolean\n  wasHoveredOrTouched: boolean\n\n  // The most recently initiated prefetch task. It may or may not have\n  // already completed.  The same prefetch task object can be reused across\n  // multiple prefetches of the same link.\n  prefetchTask: PrefetchTask | null\n\n  // The cache version at the time the task was initiated. This is used to\n  // determine if the cache was invalidated since the task was initiated.\n  cacheVersion: number\n}\n\nexport type FormInstance = LinkOrFormInstanceShared & {\n  prefetchHref: string\n  setOptimisticLinkStatus: null\n}\n\ntype PrefetchableLinkInstance = LinkOrFormInstanceShared & {\n  prefetchHref: string\n  setOptimisticLinkStatus: (status: { pending: boolean }) => void\n}\n\ntype NonPrefetchableLinkInstance = LinkOrFormInstanceShared & {\n  prefetchHref: null\n  setOptimisticLinkStatus: (status: { pending: boolean }) => void\n}\n\ntype PrefetchableInstance = PrefetchableLinkInstance | FormInstance\n\nexport type LinkInstance =\n  | PrefetchableLinkInstance\n  | NonPrefetchableLinkInstance\n\n// Tracks the most recently navigated link instance. When null, indicates\n// the current navigation was not initiated by a link click.\nlet linkForMostRecentNavigation: LinkInstance | null = null\n\n// Status object indicating link is pending\nexport const PENDING_LINK_STATUS = { pending: true }\n\n// Status object indicating link is idle\nexport const IDLE_LINK_STATUS = { pending: false }\n\n// Updates the loading state when navigating between links\n// - Resets the previous link's loading state\n// - Sets the new link's loading state\n// - Updates tracking of current navigation\nexport function setLinkForCurrentNavigation(link: LinkInstance | null) {\n  startTransition(() => {\n    linkForMostRecentNavigation?.setOptimisticLinkStatus(IDLE_LINK_STATUS)\n    link?.setOptimisticLinkStatus(PENDING_LINK_STATUS)\n    linkForMostRecentNavigation = link\n  })\n}\n\n// Unmounts the current link instance from navigation tracking\nexport function unmountLinkForCurrentNavigation(link: LinkInstance) {\n  if (linkForMostRecentNavigation === link) {\n    linkForMostRecentNavigation = null\n  }\n}\n\n// Use a WeakMap to associate a Link instance with its DOM element. This is\n// used by the IntersectionObserver to track the link's visibility.\nconst prefetchable:\n  | WeakMap<Element, PrefetchableInstance>\n  | Map<Element, PrefetchableInstance> =\n  typeof WeakMap === 'function' ? new WeakMap() : new Map()\n\n// A Set of the currently visible links. We re-prefetch visible links after a\n// cache invalidation, or when the current URL changes. It's a separate data\n// structure from the WeakMap above because only the visible links need to\n// be enumerated.\nconst prefetchableAndVisible: Set<PrefetchableInstance> = new Set()\n\n// A single IntersectionObserver instance shared by all <Link> components.\nconst observer: IntersectionObserver | null =\n  typeof IntersectionObserver === 'function'\n    ? new IntersectionObserver(handleIntersect, {\n        rootMargin: '200px',\n      })\n    : null\n\nfunction observeVisibility(element: Element, instance: PrefetchableInstance) {\n  const existingInstance = prefetchable.get(element)\n  if (existingInstance !== undefined) {\n    // This shouldn't happen because each <Link> component should have its own\n    // anchor tag instance, but it's defensive coding to avoid a memory leak in\n    // case there's a logical error somewhere else.\n    unmountPrefetchableInstance(element)\n  }\n  // Only track prefetchable links that have a valid prefetch URL\n  prefetchable.set(element, instance)\n  if (observer !== null) {\n    observer.observe(element)\n  }\n}\n\nfunction coercePrefetchableUrl(href: string): URL | null {\n  try {\n    return createPrefetchURL(href)\n  } catch {\n    // createPrefetchURL sometimes throws an error if an invalid URL is\n    // provided, though I'm not sure if it's actually necessary.\n    // TODO: Consider removing the throw from the inner function, or change it\n    // to reportError. Or maybe the error isn't even necessary for automatic\n    // prefetches, just navigations.\n    const reportErrorFn =\n      typeof reportError === 'function' ? reportError : console.error\n    reportErrorFn(\n      `Cannot prefetch '${href}' because it cannot be converted to a URL.`\n    )\n    return null\n  }\n}\n\nexport function mountLinkInstance(\n  element: LinkElement,\n  href: string,\n  router: AppRouterInstance,\n  kind: PrefetchKind.AUTO | PrefetchKind.FULL,\n  prefetchEnabled: boolean,\n  setOptimisticLinkStatus: (status: { pending: boolean }) => void\n): LinkInstance {\n  if (prefetchEnabled) {\n    const prefetchURL = coercePrefetchableUrl(href)\n    if (prefetchURL !== null) {\n      const instance: PrefetchableLinkInstance = {\n        router,\n        kind,\n        isVisible: false,\n        wasHoveredOrTouched: false,\n        prefetchTask: null,\n        cacheVersion: -1,\n        prefetchHref: prefetchURL.href,\n        setOptimisticLinkStatus,\n      }\n      // We only observe the link's visibility if it's prefetchable. For\n      // example, this excludes links to external URLs.\n      observeVisibility(element, instance)\n      return instance\n    }\n  }\n  // If the link is not prefetchable, we still create an instance so we can\n  // track its optimistic state (i.e. useLinkStatus).\n  const instance: NonPrefetchableLinkInstance = {\n    router,\n    kind,\n    isVisible: false,\n    wasHoveredOrTouched: false,\n    prefetchTask: null,\n    cacheVersion: -1,\n    prefetchHref: null,\n    setOptimisticLinkStatus,\n  }\n  return instance\n}\n\nexport function mountFormInstance(\n  element: HTMLFormElement,\n  href: string,\n  router: AppRouterInstance,\n  kind: PrefetchKind.AUTO | PrefetchKind.FULL\n): void {\n  const prefetchURL = coercePrefetchableUrl(href)\n  if (prefetchURL === null) {\n    // This href is not prefetchable, so we don't track it.\n    // TODO: We currently observe/unobserve a form every time its href changes.\n    // For Links, this isn't a big deal because the href doesn't usually change,\n    // but for forms it's extremely common. We should optimize this.\n    return\n  }\n  const instance: FormInstance = {\n    router,\n    kind,\n    isVisible: false,\n    wasHoveredOrTouched: false,\n    prefetchTask: null,\n    cacheVersion: -1,\n    prefetchHref: prefetchURL.href,\n    setOptimisticLinkStatus: null,\n  }\n  observeVisibility(element, instance)\n}\n\nexport function unmountPrefetchableInstance(element: Element) {\n  const instance = prefetchable.get(element)\n  if (instance !== undefined) {\n    prefetchable.delete(element)\n    prefetchableAndVisible.delete(instance)\n    const prefetchTask = instance.prefetchTask\n    if (prefetchTask !== null) {\n      cancelPrefetchTask(prefetchTask)\n    }\n  }\n  if (observer !== null) {\n    observer.unobserve(element)\n  }\n}\n\nfunction handleIntersect(entries: Array<IntersectionObserverEntry>) {\n  for (const entry of entries) {\n    // Some extremely old browsers or polyfills don't reliably support\n    // isIntersecting so we check intersectionRatio instead. (Do we care? Not\n    // really. But whatever this is fine.)\n    const isVisible = entry.intersectionRatio > 0\n    onLinkVisibilityChanged(entry.target as HTMLAnchorElement, isVisible)\n  }\n}\n\nexport function onLinkVisibilityChanged(element: Element, isVisible: boolean) {\n  if (process.env.NODE_ENV !== 'production') {\n    // Prefetching on viewport is disabled in development for performance\n    // reasons, because it requires compiling the target page.\n    // TODO: Investigate re-enabling this.\n    return\n  }\n\n  const instance = prefetchable.get(element)\n  if (instance === undefined) {\n    return\n  }\n\n  instance.isVisible = isVisible\n  if (isVisible) {\n    prefetchableAndVisible.add(instance)\n  } else {\n    prefetchableAndVisible.delete(instance)\n  }\n  rescheduleLinkPrefetch(instance)\n}\n\nexport function onNavigationIntent(\n  element: HTMLAnchorElement | SVGAElement,\n  unstable_upgradeToDynamicPrefetch: boolean\n) {\n  const instance = prefetchable.get(element)\n  if (instance === undefined) {\n    return\n  }\n  // Prefetch the link on hover/touchstart.\n  if (instance !== undefined) {\n    instance.wasHoveredOrTouched = true\n    if (\n      process.env.__NEXT_DYNAMIC_ON_HOVER &&\n      unstable_upgradeToDynamicPrefetch\n    ) {\n      // Switch to a full, dynamic prefetch\n      instance.kind = PrefetchKind.FULL\n    }\n    rescheduleLinkPrefetch(instance)\n  }\n}\n\nfunction rescheduleLinkPrefetch(instance: PrefetchableInstance) {\n  const existingPrefetchTask = instance.prefetchTask\n\n  if (!instance.isVisible) {\n    // Cancel any in-progress prefetch task. (If it already finished then this\n    // is a no-op.)\n    if (existingPrefetchTask !== null) {\n      cancelPrefetchTask(existingPrefetchTask)\n    }\n    // We don't need to reset the prefetchTask to null upon cancellation; an\n    // old task object can be rescheduled with reschedulePrefetchTask. This is a\n    // micro-optimization but also makes the code simpler (don't need to\n    // worry about whether an old task object is stale).\n    return\n  }\n\n  if (!process.env.__NEXT_CLIENT_SEGMENT_CACHE) {\n    // The old prefetch implementation does not have different priority levels.\n    // Just schedule a new prefetch task.\n    prefetchWithOldCacheImplementation(instance)\n    return\n  }\n\n  // In the Segment Cache implementation, we assign a higher priority level to\n  // links that were at one point hovered or touched. Since the queue is last-\n  // in-first-out, the highest priority Link is whichever one was hovered last.\n  //\n  // We also increase the relative priority of links whenever they re-enter the\n  // viewport, as if they were being scheduled for the first time.\n  const priority = instance.wasHoveredOrTouched\n    ? PrefetchPriority.Intent\n    : PrefetchPriority.Default\n  const appRouterState = getCurrentAppRouterState()\n  if (appRouterState !== null) {\n    const treeAtTimeOfPrefetch = appRouterState.tree\n    if (existingPrefetchTask === null) {\n      // Initiate a prefetch task.\n      const nextUrl = appRouterState.nextUrl\n      const cacheKey = createCacheKey(instance.prefetchHref, nextUrl)\n      instance.prefetchTask = scheduleSegmentPrefetchTask(\n        cacheKey,\n        treeAtTimeOfPrefetch,\n        instance.kind === PrefetchKind.FULL,\n        priority\n      )\n    } else {\n      // We already have an old task object that we can reschedule. This is\n      // effectively the same as canceling the old task and creating a new one.\n      reschedulePrefetchTask(\n        existingPrefetchTask,\n        treeAtTimeOfPrefetch,\n        instance.kind === PrefetchKind.FULL,\n        priority\n      )\n    }\n\n    // Keep track of the cache version at the time the prefetch was requested.\n    // This is used to check if the prefetch is stale.\n    instance.cacheVersion = getCurrentCacheVersion()\n  }\n}\n\nexport function pingVisibleLinks(\n  nextUrl: string | null,\n  tree: FlightRouterState\n) {\n  // For each currently visible link, cancel the existing prefetch task (if it\n  // exists) and schedule a new one. This is effectively the same as if all the\n  // visible links left and then re-entered the viewport.\n  //\n  // This is called when the Next-Url or the base tree changes, since those\n  // may affect the result of a prefetch task. It's also called after a\n  // cache invalidation.\n  const currentCacheVersion = getCurrentCacheVersion()\n  for (const instance of prefetchableAndVisible) {\n    const task = instance.prefetchTask\n    if (\n      task !== null &&\n      instance.cacheVersion === currentCacheVersion &&\n      task.key.nextUrl === nextUrl &&\n      task.treeAtTimeOfPrefetch === tree\n    ) {\n      // The cache has not been invalidated, and none of the inputs have\n      // changed. Bail out.\n      continue\n    }\n    // Something changed. Cancel the existing prefetch task and schedule a\n    // new one.\n    if (task !== null) {\n      cancelPrefetchTask(task)\n    }\n    const cacheKey = createCacheKey(instance.prefetchHref, nextUrl)\n    const priority = instance.wasHoveredOrTouched\n      ? PrefetchPriority.Intent\n      : PrefetchPriority.Default\n    instance.prefetchTask = scheduleSegmentPrefetchTask(\n      cacheKey,\n      tree,\n      instance.kind === PrefetchKind.FULL,\n      priority\n    )\n    instance.cacheVersion = getCurrentCacheVersion()\n  }\n}\n\nfunction prefetchWithOldCacheImplementation(instance: PrefetchableInstance) {\n  // This is the path used when the Segment Cache is not enabled.\n  if (typeof window === 'undefined') {\n    return\n  }\n\n  const doPrefetch = async () => {\n    // note that `appRouter.prefetch()` is currently sync,\n    // so we have to wrap this call in an async function to be able to catch() errors below.\n    return instance.router.prefetch(instance.prefetchHref, {\n      kind: instance.kind,\n    })\n  }\n\n  // Prefetch the page if asked (only in the client)\n  // We need to handle a prefetch error here since we may be\n  // loading with priority which can reject but we don't\n  // want to force navigation since this is only a prefetch\n  doPrefetch().catch((err) => {\n    if (process.env.NODE_ENV !== 'production') {\n      // rethrow to show invalid URL errors\n      throw err\n    }\n  })\n}\n","import { isAbsoluteUrl, getLocationOrigin } from '../../utils'\nimport { hasBasePath } from '../../../../client/has-base-path'\n\n/**\n * Detects whether a given url is routable by the Next.js router (browser only).\n */\nexport function isLocalURL(url: string): boolean {\n  // prevent a hydration mismatch on href for url with anchor refs\n  if (!isAbsoluteUrl(url)) return true\n  try {\n    // absolute urls can be local if they are on the same origin\n    const locationOrigin = getLocationOrigin()\n    const resolved = new URL(url, locationOrigin)\n    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname)\n  } catch (_) {\n    return false\n  }\n}\n","let errorOnce = (_: string) => {}\nif (process.env.NODE_ENV !== 'production') {\n  const errors = new Set<string>()\n  errorOnce = (msg: string) => {\n    if (!errors.has(msg)) {\n      console.error(msg)\n    }\n    errors.add(msg)\n  }\n}\n\nexport { errorOnce }\n","'use client'\n\nimport React, { createContext, useContext, useOptimistic, useRef } from 'react'\nimport type { UrlObject } from 'url'\nimport { formatUrl } from '../../shared/lib/router/utils/format-url'\nimport { AppRouterContext } from '../../shared/lib/app-router-context.shared-runtime'\nimport { PrefetchKind } from '../components/router-reducer/router-reducer-types'\nimport { useMergedRef } from '../use-merged-ref'\nimport { isAbsoluteUrl } from '../../shared/lib/utils'\nimport { addBasePath } from '../add-base-path'\nimport { warnOnce } from '../../shared/lib/utils/warn-once'\nimport type { PENDING_LINK_STATUS } from '../components/links'\nimport {\n  IDLE_LINK_STATUS,\n  mountLinkInstance,\n  onNavigationIntent,\n  unmountLinkForCurrentNavigation,\n  unmountPrefetchableInstance,\n  type LinkInstance,\n} from '../components/links'\nimport { isLocalURL } from '../../shared/lib/router/utils/is-local-url'\nimport { dispatchNavigateAction } from '../components/app-router-instance'\nimport { errorOnce } from '../../shared/lib/utils/error-once'\n\ntype Url = string | UrlObject\ntype RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? never : K\n}[keyof T]\ntype OptionalKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? K : never\n}[keyof T]\n\ntype OnNavigateEventHandler = (event: { preventDefault: () => void }) => void\n\ntype InternalLinkProps = {\n  /**\n   * **Required**. The path or URL to navigate to. It can also be an object (similar to `URL`).\n   *\n   * @example\n   * ```tsx\n   * // Navigate to /dashboard:\n   * <Link href=\"/dashboard\">Dashboard</Link>\n   *\n   * // Navigate to /about?name=test:\n   * <Link href={{ pathname: '/about', query: { name: 'test' } }}>\n   *   About\n   * </Link>\n   * ```\n   *\n   * @remarks\n   * - For external URLs, use a fully qualified URL such as `https://...`.\n   * - In the App Router, dynamic routes must not include bracketed segments in `href`.\n   */\n  href: Url\n\n  /**\n   * @deprecated v10.0.0: `href` props pointing to a dynamic route are\n   * automatically resolved and no longer require the `as` prop.\n   */\n  as?: Url\n\n  /**\n   * Replace the current `history` state instead of adding a new URL into the stack.\n   *\n   * @defaultValue `false`\n   *\n   * @example\n   * ```tsx\n   * <Link href=\"/about\" replace>\n   *   About (replaces the history state)\n   * </Link>\n   * ```\n   */\n  replace?: boolean\n\n  /**\n   * Whether to override the default scroll behavior. If `true`, Next.js attempts to maintain\n   * the scroll position if the newly navigated page is still visible. If not, it scrolls to the top.\n   *\n   * If `false`, Next.js will not modify the scroll behavior at all.\n   *\n   * @defaultValue `true`\n   *\n   * @example\n   * ```tsx\n   * <Link href=\"/dashboard\" scroll={false}>\n   *   No auto scroll\n   * </Link>\n   * ```\n   */\n  scroll?: boolean\n\n  /**\n   * Update the path of the current page without rerunning data fetching methods\n   * like `getStaticProps`, `getServerSideProps`, or `getInitialProps`.\n   *\n   * @remarks\n   * `shallow` only applies to the Pages Router. For the App Router, see the\n   * [following documentation](https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#using-the-native-history-api).\n   *\n   * @defaultValue `false`\n   *\n   * @example\n   * ```tsx\n   * <Link href=\"/blog\" shallow>\n   *   Shallow navigation\n   * </Link>\n   * ```\n   */\n  shallow?: boolean\n\n  /**\n   * Forces `Link` to pass its `href` to the child component. Useful if the child is a custom\n   * component that wraps an `<a>` tag, or if you're using certain styling libraries.\n   *\n   * @defaultValue `false`\n   *\n   * @example\n   * ```tsx\n   * <Link href=\"/dashboard\" passHref>\n   *   <MyStyledAnchor>Dashboard</MyStyledAnchor>\n   * </Link>\n   * ```\n   */\n  passHref?: boolean\n\n  /**\n   * Prefetch the page in the background.\n   * Any `<Link />` that is in the viewport (initially or through scroll) will be prefetched.\n   * Prefetch can be disabled by passing `prefetch={false}`.\n   *\n   * @remarks\n   * Prefetching is only enabled in production.\n   *\n   * - In the **App Router**:\n   *   - `null` (default): Prefetch behavior depends on static vs dynamic routes:\n   *     - Static routes: fully prefetched\n   *     - Dynamic routes: partial prefetch to the nearest segment with a `loading.js`\n   *   - `true`: Always prefetch the full route and data.\n   *   - `false`: Disable prefetching on both viewport and hover.\n   * - In the **Pages Router**:\n   *   - `true` (default): Prefetches the route and data in the background on viewport or hover.\n   *   - `false`: Prefetch only on hover, not on viewport.\n   *\n   * @defaultValue `true` (Pages Router) or `null` (App Router)\n   *\n   * @example\n   * ```tsx\n   * <Link href=\"/dashboard\" prefetch={false}>\n   *   Dashboard\n   * </Link>\n   * ```\n   */\n  prefetch?: boolean | null\n\n  /**\n   * (unstable) Switch to a dynamic prefetch on hover. Effectively the same as\n   * updating the prefetch prop to `true` in a mouse event.\n   */\n  unstable_dynamicOnHover?: boolean\n\n  /**\n   * The active locale is automatically prepended in the Pages Router. `locale` allows for providing\n   * a different locale, or can be set to `false` to opt out of automatic locale behavior.\n   *\n   * @remarks\n   * Note: locale only applies in the Pages Router and is ignored in the App Router.\n   *\n   * @example\n   * ```tsx\n   * // Use the 'fr' locale:\n   * <Link href=\"/about\" locale=\"fr\">\n   *   About (French)\n   * </Link>\n   *\n   * // Disable locale prefix:\n   * <Link href=\"/about\" locale={false}>\n   *   About (no locale prefix)\n   * </Link>\n   * ```\n   */\n  locale?: string | false\n\n  /**\n   * Enable legacy link behavior, requiring an `<a>` tag to wrap the child content\n   * if the child is a string or number.\n   *\n   * @deprecated This will be removed in v16\n   * @defaultValue `false`\n   * @see https://github.com/vercel/next.js/commit/489e65ed98544e69b0afd7e0cfc3f9f6c2b803b7\n   */\n  legacyBehavior?: boolean\n\n  /**\n   * Optional event handler for when the mouse pointer is moved onto the `<Link>`.\n   */\n  onMouseEnter?: React.MouseEventHandler<HTMLAnchorElement>\n\n  /**\n   * Optional event handler for when the `<Link>` is touched.\n   */\n  onTouchStart?: React.TouchEventHandler<HTMLAnchorElement>\n\n  /**\n   * Optional event handler for when the `<Link>` is clicked.\n   */\n  onClick?: React.MouseEventHandler<HTMLAnchorElement>\n\n  /**\n   * Optional event handler for when the `<Link>` is navigated.\n   */\n  onNavigate?: OnNavigateEventHandler\n}\n\n// TODO-APP: Include the full set of Anchor props\n// adding this to the publicly exported type currently breaks existing apps\n\n// `RouteInferType` is a stub here to avoid breaking `typedRoutes` when the type\n// isn't generated yet. It will be replaced when the webpack plugin runs.\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport type LinkProps<RouteInferType = any> = InternalLinkProps\ntype LinkPropsRequired = RequiredKeys<LinkProps>\ntype LinkPropsOptional = OptionalKeys<Omit<InternalLinkProps, 'locale'>>\n\nfunction isModifiedEvent(event: React.MouseEvent): boolean {\n  const eventTarget = event.currentTarget as HTMLAnchorElement | SVGAElement\n  const target = eventTarget.getAttribute('target')\n  return (\n    (target && target !== '_self') ||\n    event.metaKey ||\n    event.ctrlKey ||\n    event.shiftKey ||\n    event.altKey || // triggers resource download\n    (event.nativeEvent && event.nativeEvent.which === 2)\n  )\n}\n\nfunction linkClicked(\n  e: React.MouseEvent,\n  href: string,\n  as: string,\n  linkInstanceRef: React.RefObject<LinkInstance | null>,\n  replace?: boolean,\n  scroll?: boolean,\n  onNavigate?: OnNavigateEventHandler\n): void {\n  const { nodeName } = e.currentTarget\n\n  // anchors inside an svg have a lowercase nodeName\n  const isAnchorNodeName = nodeName.toUpperCase() === 'A'\n\n  if (\n    (isAnchorNodeName && isModifiedEvent(e)) ||\n    e.currentTarget.hasAttribute('download')\n  ) {\n    // ignore click for browser’s default behavior\n    return\n  }\n\n  if (!isLocalURL(href)) {\n    if (replace) {\n      // browser default behavior does not replace the history state\n      // so we need to do it manually\n      e.preventDefault()\n      location.replace(href)\n    }\n\n    // ignore click for browser’s default behavior\n    return\n  }\n\n  e.preventDefault()\n\n  const navigate = () => {\n    if (onNavigate) {\n      let isDefaultPrevented = false\n\n      onNavigate({\n        preventDefault: () => {\n          isDefaultPrevented = true\n        },\n      })\n\n      if (isDefaultPrevented) {\n        return\n      }\n    }\n\n    dispatchNavigateAction(\n      as || href,\n      replace ? 'replace' : 'push',\n      scroll ?? true,\n      linkInstanceRef.current\n    )\n  }\n\n  React.startTransition(navigate)\n}\n\nfunction formatStringOrUrl(urlObjOrString: UrlObject | string): string {\n  if (typeof urlObjOrString === 'string') {\n    return urlObjOrString\n  }\n\n  return formatUrl(urlObjOrString)\n}\n\n/**\n * A React component that extends the HTML `<a>` element to provide\n * [prefetching](https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#2-prefetching)\n * and client-side navigation. This is the primary way to navigate between routes in Next.js.\n *\n * @remarks\n * - Prefetching is only enabled in production.\n *\n * @see https://nextjs.org/docs/app/api-reference/components/link\n */\nexport default function LinkComponent(\n  props: LinkProps & {\n    children: React.ReactNode\n    ref: React.Ref<HTMLAnchorElement>\n  }\n) {\n  const [linkStatus, setOptimisticLinkStatus] = useOptimistic(IDLE_LINK_STATUS)\n\n  let children: React.ReactNode\n\n  const linkInstanceRef = useRef<LinkInstance | null>(null)\n\n  const {\n    href: hrefProp,\n    as: asProp,\n    children: childrenProp,\n    prefetch: prefetchProp = null,\n    passHref,\n    replace,\n    shallow,\n    scroll,\n    onClick,\n    onMouseEnter: onMouseEnterProp,\n    onTouchStart: onTouchStartProp,\n    legacyBehavior = false,\n    onNavigate,\n    ref: forwardedRef,\n    unstable_dynamicOnHover,\n    ...restProps\n  } = props\n\n  children = childrenProp\n\n  if (\n    legacyBehavior &&\n    (typeof children === 'string' || typeof children === 'number')\n  ) {\n    children = <a>{children}</a>\n  }\n\n  const router = React.useContext(AppRouterContext)\n\n  const prefetchEnabled = prefetchProp !== false\n  /**\n   * The possible states for prefetch are:\n   * - null: this is the default \"auto\" mode, where we will prefetch partially if the link is in the viewport\n   * - true: we will prefetch if the link is visible and prefetch the full page, not just partially\n   * - false: we will not prefetch if in the viewport at all\n   * - 'unstable_dynamicOnHover': this starts in \"auto\" mode, but switches to \"full\" when the link is hovered\n   */\n  const appPrefetchKind =\n    prefetchProp === null ? PrefetchKind.AUTO : PrefetchKind.FULL\n\n  if (process.env.NODE_ENV !== 'production') {\n    function createPropError(args: {\n      key: string\n      expected: string\n      actual: string\n    }) {\n      return new Error(\n        `Failed prop type: The prop \\`${args.key}\\` expects a ${args.expected} in \\`<Link>\\`, but got \\`${args.actual}\\` instead.` +\n          (typeof window !== 'undefined'\n            ? \"\\nOpen your browser's console to view the Component stack trace.\"\n            : '')\n      )\n    }\n\n    // TypeScript trick for type-guarding:\n    const requiredPropsGuard: Record<LinkPropsRequired, true> = {\n      href: true,\n    } as const\n    const requiredProps: LinkPropsRequired[] = Object.keys(\n      requiredPropsGuard\n    ) as LinkPropsRequired[]\n    requiredProps.forEach((key: LinkPropsRequired) => {\n      if (key === 'href') {\n        if (\n          props[key] == null ||\n          (typeof props[key] !== 'string' && typeof props[key] !== 'object')\n        ) {\n          throw createPropError({\n            key,\n            expected: '`string` or `object`',\n            actual: props[key] === null ? 'null' : typeof props[key],\n          })\n        }\n      } else {\n        // TypeScript trick for type-guarding:\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _: never = key\n      }\n    })\n\n    // TypeScript trick for type-guarding:\n    const optionalPropsGuard: Record<LinkPropsOptional, true> = {\n      as: true,\n      replace: true,\n      scroll: true,\n      shallow: true,\n      passHref: true,\n      prefetch: true,\n      unstable_dynamicOnHover: true,\n      onClick: true,\n      onMouseEnter: true,\n      onTouchStart: true,\n      legacyBehavior: true,\n      onNavigate: true,\n    } as const\n    const optionalProps: LinkPropsOptional[] = Object.keys(\n      optionalPropsGuard\n    ) as LinkPropsOptional[]\n    optionalProps.forEach((key: LinkPropsOptional) => {\n      const valType = typeof props[key]\n\n      if (key === 'as') {\n        if (props[key] && valType !== 'string' && valType !== 'object') {\n          throw createPropError({\n            key,\n            expected: '`string` or `object`',\n            actual: valType,\n          })\n        }\n      } else if (\n        key === 'onClick' ||\n        key === 'onMouseEnter' ||\n        key === 'onTouchStart' ||\n        key === 'onNavigate'\n      ) {\n        if (props[key] && valType !== 'function') {\n          throw createPropError({\n            key,\n            expected: '`function`',\n            actual: valType,\n          })\n        }\n      } else if (\n        key === 'replace' ||\n        key === 'scroll' ||\n        key === 'shallow' ||\n        key === 'passHref' ||\n        key === 'prefetch' ||\n        key === 'legacyBehavior' ||\n        key === 'unstable_dynamicOnHover'\n      ) {\n        if (props[key] != null && valType !== 'boolean') {\n          throw createPropError({\n            key,\n            expected: '`boolean`',\n            actual: valType,\n          })\n        }\n      } else {\n        // TypeScript trick for type-guarding:\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _: never = key\n      }\n    })\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (props.locale) {\n      warnOnce(\n        'The `locale` prop is not supported in `next/link` while using the `app` router. Read more about app router internalization: https://nextjs.org/docs/app/building-your-application/routing/internationalization'\n      )\n    }\n    if (!asProp) {\n      let href: string | undefined\n      if (typeof hrefProp === 'string') {\n        href = hrefProp\n      } else if (\n        typeof hrefProp === 'object' &&\n        typeof hrefProp.pathname === 'string'\n      ) {\n        href = hrefProp.pathname\n      }\n\n      if (href) {\n        const hasDynamicSegment = href\n          .split('/')\n          .some((segment) => segment.startsWith('[') && segment.endsWith(']'))\n\n        if (hasDynamicSegment) {\n          throw new Error(\n            `Dynamic href \\`${href}\\` found in <Link> while using the \\`/app\\` router, this is not supported. Read more: https://nextjs.org/docs/messages/app-dir-dynamic-href`\n          )\n        }\n      }\n    }\n  }\n\n  const { href, as } = React.useMemo(() => {\n    const resolvedHref = formatStringOrUrl(hrefProp)\n    return {\n      href: resolvedHref,\n      as: asProp ? formatStringOrUrl(asProp) : resolvedHref,\n    }\n  }, [hrefProp, asProp])\n\n  // This will return the first child, if multiple are provided it will throw an error\n  let child: any\n  if (legacyBehavior) {\n    if (process.env.NODE_ENV === 'development') {\n      if (onClick) {\n        console.warn(\n          `\"onClick\" was passed to <Link> with \\`href\\` of \\`${hrefProp}\\` but \"legacyBehavior\" was set. The legacy behavior requires onClick be set on the child of next/link`\n        )\n      }\n      if (onMouseEnterProp) {\n        console.warn(\n          `\"onMouseEnter\" was passed to <Link> with \\`href\\` of \\`${hrefProp}\\` but \"legacyBehavior\" was set. The legacy behavior requires onMouseEnter be set on the child of next/link`\n        )\n      }\n      try {\n        child = React.Children.only(children)\n      } catch (err) {\n        if (!children) {\n          throw new Error(\n            `No children were passed to <Link> with \\`href\\` of \\`${hrefProp}\\` but one child is required https://nextjs.org/docs/messages/link-no-children`\n          )\n        }\n        throw new Error(\n          `Multiple children were passed to <Link> with \\`href\\` of \\`${hrefProp}\\` but only one child is supported https://nextjs.org/docs/messages/link-multiple-children` +\n            (typeof window !== 'undefined'\n              ? \" \\nOpen your browser's console to view the Component stack trace.\"\n              : '')\n        )\n      }\n    } else {\n      child = React.Children.only(children)\n    }\n  } else {\n    if (process.env.NODE_ENV === 'development') {\n      if ((children as any)?.type === 'a') {\n        throw new Error(\n          'Invalid <Link> with <a> child. Please remove <a> or use <Link legacyBehavior>.\\nLearn more: https://nextjs.org/docs/messages/invalid-new-link-with-extra-anchor'\n        )\n      }\n    }\n  }\n\n  const childRef: any = legacyBehavior\n    ? child && typeof child === 'object' && child.ref\n    : forwardedRef\n\n  // Use a callback ref to attach an IntersectionObserver to the anchor tag on\n  // mount. In the future we will also use this to keep track of all the\n  // currently mounted <Link> instances, e.g. so we can re-prefetch them after\n  // a revalidation or refresh.\n  const observeLinkVisibilityOnMount = React.useCallback(\n    (element: HTMLAnchorElement | SVGAElement) => {\n      if (router !== null) {\n        linkInstanceRef.current = mountLinkInstance(\n          element,\n          href,\n          router,\n          appPrefetchKind,\n          prefetchEnabled,\n          setOptimisticLinkStatus\n        )\n      }\n\n      return () => {\n        if (linkInstanceRef.current) {\n          unmountLinkForCurrentNavigation(linkInstanceRef.current)\n          linkInstanceRef.current = null\n        }\n        unmountPrefetchableInstance(element)\n      }\n    },\n    [prefetchEnabled, href, router, appPrefetchKind, setOptimisticLinkStatus]\n  )\n\n  const mergedRef = useMergedRef(observeLinkVisibilityOnMount, childRef)\n\n  const childProps: {\n    onTouchStart?: React.TouchEventHandler<HTMLAnchorElement>\n    onMouseEnter: React.MouseEventHandler<HTMLAnchorElement>\n    onClick: React.MouseEventHandler<HTMLAnchorElement>\n    href?: string\n    ref?: any\n  } = {\n    ref: mergedRef,\n    onClick(e) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!e) {\n          throw new Error(\n            `Component rendered inside next/link has to pass click event to \"onClick\" prop.`\n          )\n        }\n      }\n\n      if (!legacyBehavior && typeof onClick === 'function') {\n        onClick(e)\n      }\n\n      if (\n        legacyBehavior &&\n        child.props &&\n        typeof child.props.onClick === 'function'\n      ) {\n        child.props.onClick(e)\n      }\n\n      if (!router) {\n        return\n      }\n\n      if (e.defaultPrevented) {\n        return\n      }\n\n      linkClicked(e, href, as, linkInstanceRef, replace, scroll, onNavigate)\n    },\n    onMouseEnter(e) {\n      if (!legacyBehavior && typeof onMouseEnterProp === 'function') {\n        onMouseEnterProp(e)\n      }\n\n      if (\n        legacyBehavior &&\n        child.props &&\n        typeof child.props.onMouseEnter === 'function'\n      ) {\n        child.props.onMouseEnter(e)\n      }\n\n      if (!router) {\n        return\n      }\n\n      if (!prefetchEnabled || process.env.NODE_ENV === 'development') {\n        return\n      }\n\n      const upgradeToDynamicPrefetch = unstable_dynamicOnHover === true\n      onNavigationIntent(\n        e.currentTarget as HTMLAnchorElement | SVGAElement,\n        upgradeToDynamicPrefetch\n      )\n    },\n    onTouchStart: process.env.__NEXT_LINK_NO_TOUCH_START\n      ? undefined\n      : function onTouchStart(e) {\n          if (!legacyBehavior && typeof onTouchStartProp === 'function') {\n            onTouchStartProp(e)\n          }\n\n          if (\n            legacyBehavior &&\n            child.props &&\n            typeof child.props.onTouchStart === 'function'\n          ) {\n            child.props.onTouchStart(e)\n          }\n\n          if (!router) {\n            return\n          }\n\n          if (!prefetchEnabled) {\n            return\n          }\n\n          const upgradeToDynamicPrefetch = unstable_dynamicOnHover === true\n          onNavigationIntent(\n            e.currentTarget as HTMLAnchorElement | SVGAElement,\n            upgradeToDynamicPrefetch\n          )\n        },\n  }\n\n  // If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is\n  // defined, we specify the current 'href', so that repetition is not needed by the user.\n  // If the url is absolute, we can bypass the logic to prepend the basePath.\n  if (isAbsoluteUrl(as)) {\n    childProps.href = as\n  } else if (\n    !legacyBehavior ||\n    passHref ||\n    (child.type === 'a' && !('href' in child.props))\n  ) {\n    childProps.href = addBasePath(as)\n  }\n\n  let link: React.ReactNode\n\n  if (legacyBehavior) {\n    if (process.env.NODE_ENV === 'development') {\n      errorOnce(\n        '`legacyBehavior` is deprecated and will be removed in a future ' +\n          'release. A codemod is available to upgrade your components:\\n\\n' +\n          'npx @next/codemod@latest new-link .\\n\\n' +\n          'Learn more: https://nextjs.org/docs/app/building-your-application/upgrading/codemods#remove-a-tags-from-link-components'\n      )\n    }\n    link = React.cloneElement(child, childProps)\n  } else {\n    link = (\n      <a {...restProps} {...childProps}>\n        {children}\n      </a>\n    )\n  }\n\n  return (\n    <LinkStatusContext.Provider value={linkStatus}>\n      {link}\n    </LinkStatusContext.Provider>\n  )\n}\n\nconst LinkStatusContext = createContext<\n  typeof PENDING_LINK_STATUS | typeof IDLE_LINK_STATUS\n>(IDLE_LINK_STATUS)\n\nexport const useLinkStatus = () => {\n  return useContext(LinkStatusContext)\n}\n"],"names":["assign","searchParamsToUrlQuery","urlQueryToSearchParams","searchParams","query","key","value","entries","existing","Array","isArray","push","stringifyUrlQueryParam","param","isNaN","String","URLSearchParams","Object","item","append","set","target","searchParamsList","keys","delete","formatUrl","formatWithValidation","urlObjectKeys","slashedProtocols","urlObj","auth","hostname","protocol","pathname","hash","host","encodeURIComponent","replace","indexOf","port","querystring","search","endsWith","slashes","test","url","process","env","NODE_ENV","ACTION_HMR_REFRESH","ACTION_NAVIGATE","ACTION_PREFETCH","ACTION_REFRESH","ACTION_RESTORE","ACTION_SERVER_ACTION","ACTION_SERVER_PATCH","PrefetchCacheEntryStatus","PrefetchKind","DecodeError","MiddlewareNotFoundError","MissingStaticPage","NormalizeError","PageNotFoundError","SP","ST","WEB_VITALS","execOnce","getDisplayName","getLocationOrigin","getURL","isAbsoluteUrl","isResSent","loadGetInitialProps","normalizeRepeatedSlashes","stringifyError","fn","used","result","args","ABSOLUTE_URL_REGEX","window","location","href","origin","substring","length","Component","displayName","name","res","finished","headersSent","urlParts","split","urlNoQuery","slice","join","App","ctx","getInitialProps","pageProps","props","message","Error","performance","every","method","constructor","page","code","error","JSON","stringify","stack","parsePath","path","hashIndex","queryIndex","hasQuery","undefined","addPathPrefix","prefix","startsWith","removeTrailingSlash","route","normalizePathTrailingSlash","__NEXT_MANUAL_TRAILING_SLASH","__NEXT_TRAILING_SLASH","addBasePath","basePath","__NEXT_ROUTER_BASEPATH","required","__NEXT_MANUAL_CLIENT_BASE_PATH","ACTION_HEADER","FLIGHT_HEADERS","NEXT_DID_POSTPONE_HEADER","NEXT_HMR_REFRESH_HASH_COOKIE","NEXT_HMR_REFRESH_HEADER","NEXT_IS_PRERENDER_HEADER","NEXT_REWRITTEN_PATH_HEADER","NEXT_REWRITTEN_QUERY_HEADER","NEXT_ROUTER_PREFETCH_HEADER","NEXT_ROUTER_SEGMENT_PREFETCH_HEADER","NEXT_ROUTER_STALE_TIME_HEADER","NEXT_ROUTER_STATE_TREE_HEADER","NEXT_RSC_UNION_QUERY","NEXT_URL","RSC_CONTENT_TYPE_HEADER","RSC_HEADER","isThenable","promise","then","dispatchAppRouterAction","useActionQueue","dispatch","action","actionQueue","state","setState","React","useState","use","callServer","actionId","actionArgs","Promise","resolve","reject","startTransition","type","findSourceMapURL","filename","getFlightDataPartsFromPath","getNextFlightSegmentPath","normalizeFlightData","flightDataPath","flightDataPathLength","tree","seedData","head","isHeadPartial","segmentPath","pathToSegment","segment","isRootRender","flightSegmentPath","flightData","map","getAppBuildId","setAppBuildId","globalBuildId","buildId","djb2Hash","hexHash","str","i","char","charCodeAt","toString","setCacheBustingSearchParam","headers","uniqueCacheKey","existingSearch","rawQuery","pairs","filter","Boolean","createFetch","createFromNextReadableStream","fetchServerResponse","urlToUrlWithoutFlightMarker","createFromReadableStream","NEXT_RUNTIME","require","urlWithoutFlightParameters","URL","__NEXT_CONFIG_OUTPUT","doMpaNavigation","canonicalUrl","couldBeIntercepted","prerendered","postponed","staleTime","abortController","AbortController","addEventListener","abort","options","flightRouterState","nextUrl","prefetchKind","AUTO","isHmrRefresh","fetchPriority","TEMPORARY","signal","responseUrl","redirected","contentType","get","interception","includes","staleTimeHeader","parseInt","isFlightResponse","ok","body","TURBOPACK","flightStream","createUnclosingPrefetchStream","response","b","f","S","err","aborted","console","fetchUrl","__NEXT_TEST_MODE","NEXT_DEPLOYMENT_ID","fetch","credentials","priority","originalFlightStream","reader","getReader","ReadableStream","pull","controller","done","read","enqueue","createRouterCacheKey","withoutSearchParameters","PAGE_SEGMENT_KEY","invalidateCacheBelowFlightSegmentPath","newCache","existingCache","isLastEntry","parallelRouteKey","cacheKey","existingChildSegmentMap","parallelRoutes","childSegmentMap","Map","existingChildCacheNode","childCacheNode","lazyData","rsc","prefetchRsc","prefetchHead","matchSegment","existingSegment","fillLazyItemsTillLeafWithHead","navigatedAt","routerState","cacheNodeSeedData","prefetchEntry","isLastSegment","parallelRouteState","segmentForParallelRoute","parallelSeedData","existingParallelRoutesCacheNode","hasReusablePrefetch","kind","status","reusable","parallelRouteCacheNode","existingCacheNode","newCacheNode","seedNode","loading","existingParallelRoutes","invalidateCacheByRouterState","fillCacheWithNewSubTreeData","fillCacheWithNewSubTreeDataButOnlyLoading","fillCacheHelper","fillLazyItems","treePatch","incomingSegment","applyFlightData","cache","addRefreshMarkerToActiveParallelSegments","refreshInactiveParallelSegments","fetchedSegments","Set","refreshInactiveParallelSegmentsImpl","rootTree","updatedTree","updatedCache","includeNextUrl","refetchPath","refetchMarker","fetchPromises","has","add","fetchPromise","parallelFetchPromise","all","applyRouterStatePatchToTree","applyPatch","initialTree","patchTree","initialSegment","initialParallelRoutes","patchSegment","patchParallelRoutes","DEFAULT_SEGMENT_KEY","newParallelRoutes","isInPatchTreeParallelRoutes","refetch","isRootLayout","currentSegment","lastSegment","parallelRoutePatch","shouldHardNavigate","isNavigatingToNewRootLayout","currentTree","nextTree","currentTreeSegment","nextTreeSegment","currentTreeChild","values","nextTreeChild","ensureLeadingSlash","normalizeAppPath","normalizeRscURL","reduce","index","segments","isGroupSegment","INTERCEPTION_ROUTE_MARKERS","extractInterceptionRouteInformation","isInterceptionRouteAppPath","find","m","interceptingRoute","marker","interceptedRoute","concat","splitInterceptingRoute","computeChangedPath","extractPathFromFlightRouterState","getSelectedParams","removeLeadingSlash","segmentToPathname","normalizeSegments","acc","some","childrenPath","children","childPath","computeChangedPathImpl","treeA","treeB","segmentA","parallelRoutesA","segmentB","parallelRoutesB","normalizedSegmentA","normalizedSegmentB","parallelRouterKey","changedPath","params","parallelRoute","isDynamicParameter","segmentValue","isCatchAll","handleMutable","isNotUndefined","mutable","shouldScroll","patchedTree","pushRef","pendingPush","mpaNavigation","preserveCustomHistoryState","focusAndScrollRef","apply","scrollableSegments","onlyHashChange","hashFragment","decodeURIComponent","segmentPaths","prefetchCache","PromiseQueue","promiseFn","taskResolve","taskReject","taskPromise","task","enqueueResult","bump","findIndex","bumpedItem","splice","unshift","maxConcurrency","forced","shift","DYNAMIC_STALETIME_MS","STATIC_STALETIME_MS","createSeededPrefetchCacheEntry","getOrCreatePrefetchCacheEntry","prunePrefetchCache","INTERCEPTION_CACHE_KEY_MARKER","createPrefetchCacheKeyImpl","includeSearchParams","pathnameFromUrl","createPrefetchCacheKey","FULL","getExistingCacheEntry","allowAliasing","maybeNextUrl","cacheKeyWithParams","cacheKeyWithoutParams","cacheKeyToUse","existingEntry","isAliased","aliased","entryWithoutParams","cacheEntry","existingCacheEntry","getPrefetchEntryCacheStatus","switchedToFullPrefetch","data","prefetchResponse","isFullPrefetch","createLazyPrefetchEntry","prefixExistingPrefetchCacheEntry","existingCacheKey","newCacheKey","prefetchCacheKey","treeAtTimeOfPrefetch","prefetchTime","Date","now","lastUsedTime","fresh","prefetchQueue","prefetchCacheEntry","expired","Number","__NEXT_CLIENT_ROUTER_DYNAMIC_STALETIME","__NEXT_CLIENT_ROUTER_STATIC_STALETIME","stale","prefetchReducer","__NEXT_CLIENT_SEGMENT_CACHE","identityReducerWhenSegmentCacheIsEnabled","prefetchReducerImpl","HTML_LIMITED_BOT_UA_RE","HTML_LIMITED_BOT_UA_RE_STRING","getBotType","isBot","HEADLESS_BROWSER_BOT_UA_RE","source","isDomBotUA","userAgent","isHtmlLimitedBotUA","AppRouterAnnouncer","ANNOUNCER_TYPE","ANNOUNCER_ID","getAnnouncerNode","existingAnnouncer","document","getElementsByName","shadowRoot","childNodes","container","createElement","style","cssText","announcer","ariaLive","id","role","shadow","attachShadow","mode","appendChild","portalNode","setPortalNode","useEffect","getElementsByTagName","isConnected","removeChild","routeAnnouncement","setRouteAnnouncement","previousTitle","useRef","currentTitle","title","pageHeader","querySelector","innerText","textContent","current","createPortal","RedirectBoundary","RedirectErrorBoundary","HandleRedirect","redirect","reset","redirectType","router","useRouter","RedirectType","getDerivedStateFromError","isRedirectError","getURLFromRedirectError","getRedirectTypeFromError","render","findHeadInCache","findHeadInCacheImpl","keyPrefix","isLastItem","childParallelRoutes","cacheNode","unresolvedThenable","pathHasPrefix","hasBasePath","removeBasePath","createEmptyCacheNode","createPrefetchURL","AppRouter","isExternalURL","globalMutable","navigator","_","HistoryUpdater","appRouterState","useInsertionEffect","__NEXT_APP_NAV_FAIL_HANDLING","historyState","history","__NA","__PRIVATE_NEXTJS_INTERNALS_TREE","createHrefFromUrl","pushState","replaceState","copyNextJsInternalHistoryState","currentState","Head","headCacheNode","resolvedPrefetchRsc","useDeferredValue","Router","assetPrefix","globalError","useMemo","handlePageShow","event","persisted","pendingMpaPath","removeEventListener","handleUnhandledRedirect","reason","preventDefault","publicAppRouterInstance","originalPushState","bind","originalReplaceState","applyUrlFromHistoryPushReplace","_unused","_N","onPopState","reload","dispatchTraverseAction","matchingHead","pathParams","layoutRouterContext","parentTree","parentCacheNode","parentSegmentPath","globalLayoutRouterContext","headKey","content","ErrorBoundary","errorComponent","errorStyles","RuntimeStyles","PathParamsContext","Provider","PathnameContext","SearchParamsContext","GlobalLayoutRouterContext","AppRouterContext","LayoutRouterContext","globalErrorComponentAndStyles","globalErrorComponent","globalErrorStyles","useNavFailureHandler","DefaultGlobalError","runtimeStyles","runtimeStyleChanged","globalThis","_N_E_STYLE_LOAD","len","size","forEach","cb","forceUpdate","renderedStylesSize","changed","c","dplId","link","rel","precedence","abortTask","listenForDynamicRequest","startPPRNavigation","updateCacheNodeOnPopstateRestoration","MPA_NAVIGATION_TASK","node","dynamicRequestTree","oldCacheNode","oldRouterState","newRouterState","prefetchData","isPrefetchHeadPartial","isSamePageNavigation","scrollableSegmentsResult","updateCacheNodeOnNavigation","didFindRootLayout","oldRouterStateChildren","newRouterStateChildren","prefetchDataChildren","oldParallelRoutes","prefetchParallelRoutes","patchedRouterStateChildren","taskChildren","needsDynamicRequest","dynamicRequestTreeChildren","newRouterStateChild","oldRouterStateChild","oldSegmentMapChild","prefetchDataChild","newSegmentChild","newSegmentPathChild","newSegmentKeyChild","oldSegmentChild","oldCacheNodeChild","taskChild","spawnReusedTask","beginRenderingNewRouteTree","newCacheNodeChild","newSegmentMapChild","taskChildRoute","dynamicRequestTreeChild","patchRouterStateWithNewChildren","possiblyPartialPrefetchHead","createCacheNodeOnNavigation","routerStateChildren","isLeafSegment","cacheNodeNavigatedAt","isPrefetchRscPartial","spawnPendingTask","existingCacheNodeChildren","cacheNodeChildren","routerStateChild","existingSegmentMapChild","segmentChild","segmentPathChild","segmentKeyChild","existingCacheNodeChild","baseRouterState","newChildren","clone","newTask","createPendingCacheNode","reusedRouterState","responsePromise","normalizedFlightData","serverRouterState","dynamicData","dynamicHead","writeDynamicDataIntoPendingTask","rootTask","taskSegment","finishTaskUsingDynamicDataPayload","taskNode","finishPendingCacheNode","serverChildren","dynamicDataChildren","serverRouterStateChild","dynamicDataChild","maybePrefetchRsc","maybePrefetchLoading","createDeferredRsc","taskState","serverState","taskStateChildren","serverStateChildren","dataChildren","taskStateChild","serverStateChild","dataChild","segmentMapChild","taskSegmentChild","taskSegmentKeyChild","cacheNodeChild","abortPendingCacheNode","dynamicSegmentData","isDeferredRsc","shouldUsePrefetch","DEFERRED","Symbol","tag","pendingRsc","rej","fulfilledRsc","rejectedRsc","clearCacheNodeDataForSegmentPath","addSearchParamsToPageSegments","handleAliasedPrefetchEntry","currentCache","applied","hasLoadingComponentInSeedData","fromEntries","flightSegmentPathWithLeadingEmpty","newTree","fillNewTreeWithOnlyLoadingSegments","rest","newSegment","addSearchParamsIfPageSegment","updatedParallelRoutes","NavigationResultTag","PrefetchPriority","cancelPrefetchTask","createCacheKey","getCurrentCacheVersion","navigate","prefetch","reschedulePrefetchTask","revalidateEntireCache","schedulePrefetchTask","notEnabled","handleExternalUrl","navigateReducer","generateSegmentsFromPatch","flightRouterPatch","childSegment","triggerLazyFetchForLeafSegments","appliedPatch","segmentPathsToFill","handleNavigationResult","MPA","newUrl","NoOp","newCanonicalUrl","oldUrl","Success","Async","asyncResult","isExternalUrl","navigateType","getElementById","prefetchValues","canonicalUrlOverride","isFirstRead","updatedCanonicalUrl","patchedRouterState","dynamicRequest","hardNavigate","subSegment","scrollableSegmentPath","serverPatchReducer","serverResponse","canonicalUrlOverrideHref","restoreReducer","treeToRestore","oldCache","__NEXT_PPR","handleSegmentMismatch","hasInterceptionRouteInCurrentTree","refreshReducer","log","hmrRefreshReducer","hmrRefreshReducerImpl","hmrRefreshReducerNoop","_action","assignLocation","urlBase","extractInfoFromServerReferenceId","omitUnusedArgs","infoByte","typeBit","argMask","restArgs","usedArgs","bitPosition","bit","hasRestArgs","info","filteredArgs","serverActionReducer","createFromFetch","createTemporaryReferenceSet","encodeReply","fetchServerAction","temporaryReferences","Accept","redirectHeader","_redirectType","isPrerender","revalidatedParts","revalidatedHeader","parse","paths","cookie","e","redirectLocation","actionFlightData","actionResult","a","text","redirectHref","actionRevalidated","getRedirectError","reducer","clientReducer","serverReducer","createMutableActionQueue","dispatchNavigateAction","getCurrentAppRouterState","runRemainingActions","pending","next","runAction","needsRefresh","prevState","payload","handleResult","nextState","discarded","dispatchAction","resolvers","deferredPromise","newAction","last","globalActionQueue","initialState","instrumentationHooks","onRouterTransitionStart","getAppRouterActionQueue","getProfilingHookForOnNavigationStart","linkInstanceRef","setLinkForCurrentNavigation","locationSearch","back","forward","scroll","refresh","hmrRefresh","IDLE_LINK_STATUS","PENDING_LINK_STATUS","mountFormInstance","mountLinkInstance","onLinkVisibilityChanged","onNavigationIntent","pingVisibleLinks","unmountLinkForCurrentNavigation","unmountPrefetchableInstance","linkForMostRecentNavigation","setOptimisticLinkStatus","prefetchable","WeakMap","prefetchableAndVisible","observer","IntersectionObserver","handleIntersect","rootMargin","observeVisibility","element","instance","existingInstance","observe","coercePrefetchableUrl","reportErrorFn","reportError","prefetchEnabled","prefetchURL","isVisible","wasHoveredOrTouched","prefetchTask","cacheVersion","prefetchHref","unobserve","entry","intersectionRatio","rescheduleLinkPrefetch","unstable_upgradeToDynamicPrefetch","__NEXT_DYNAMIC_ON_HOVER","existingPrefetchTask","prefetchWithOldCacheImplementation","Intent","Default","currentCacheVersion","scheduleSegmentPrefetchTask","doPrefetch","catch","isLocalURL","locationOrigin","resolved","errorOnce","LinkComponent","useLinkStatus","isModifiedEvent","eventTarget","currentTarget","getAttribute","metaKey","ctrlKey","shiftKey","altKey","nativeEvent","which","linkClicked","as","onNavigate","nodeName","isAnchorNodeName","toUpperCase","hasAttribute","isDefaultPrevented","formatStringOrUrl","urlObjOrString","linkStatus","useOptimistic","hrefProp","asProp","childrenProp","prefetchProp","passHref","shallow","onClick","onMouseEnter","onMouseEnterProp","onTouchStart","onTouchStartProp","legacyBehavior","ref","forwardedRef","unstable_dynamicOnHover","restProps","useContext","appPrefetchKind","createPropError","expected","actual","resolvedHref","child","Children","only","childRef","observeLinkVisibilityOnMount","useCallback","mergedRef","useMergedRef","childProps","defaultPrevented","upgradeToDynamicPrefetch","__NEXT_LINK_NO_TOUCH_START","cloneElement","LinkStatusContext","createContext"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69]}